{"AssembledPart":{"slug":"AssembledPart","filePath":"AssembledPart.md","title":"AssembledPart","links":["Classes","README"],"tags":[],"content":"AssembledPart\n Back to Classes | Documentation Home | All Classes\n\nNamespace: AlibreScript.API\nKind: Class\n\nProperties\nConfigurations\nType: Object\r\nList of configurations defined on the part\nName\nType: Object\r\nName of the assembled part\nMethods\nAddPoint\nAdds a point at an offset to a point or a vertex\nOverload 1:\ndef AddPoint(name, point_or_vertex, x_offset, y_offset, z_offset):\n&quot;&quot;&quot;\nAdds a point at an offset to a point or a vertex\n \nArgs:\nname (str): Name of point\npoint_or_vertex (IPoint): Point or vertex\nx_offset (float): X offse\ny_offset (float): Y offset\nz_offset (float): Z offset\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddPoint(name, point_or_vertex1, point_or_vertex2, ratio):\n&quot;&quot;&quot;\nAdds a point between two points/vertices\n \nArgs:\nname (str): Name of point\npoint_or_vertex1 (IPoint): First point or vertex\npoint_or_vertex2 (IPoint): Second point or vertex\nratio (float): Ratio of distance between points/vertices\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nOverload 3:\ndef AddPoint(name, axis_or_edge1, axis_or_edge2):\n&quot;&quot;&quot;\nAdds a point at the intersection or two axes or edges\n \nArgs:\nname (str): Name of point\naxis_or_edge1 (IAxis): First axis or edge\naxis_or_edge2 (IAxis): Second axis or edge\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nOverload 4:\ndef AddPoint(name, plane_or_face1, plane_or_face2, plane_or_face3):\n&quot;&quot;&quot;\nAdds a point at the intersection of three planes or faces\n \nArgs:\nname (str): Name of point\nplane_or_face1 (IPlane): First plane or face\nplane_or_face2 (IPlane): Second plane or face\nplane_or_face3 (IPlane): Third plane or face\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nOverload 5:\ndef AddPoint(name, axis_or_edge, plane_or_face):\n&quot;&quot;&quot;\nAdds a point at the the intersection of a axis or edge and a plane or face\n \nArgs:\nname (str): Name of point\naxis_or_edge (IAxis): Axis or edge\nplane_or_face (IPlane): Plane or face\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nOverload 6:\ndef AddPoint(name, source_point_or_vertex, target_plane_or_face, x_offset, y_offset):\n&quot;&quot;&quot;\nAdds a point by projecting a point or vertex onto a plane or face\n \nArgs:\nname (str): Name of point\nsource_point_or_vertex (IPoint): Point or vertex to project\ntarget_plane_or_face (IPlane): Plane or face to project onto\nx_offset (float): X offset to apply to point once projected\ny_offset (float): Y offset to apply to point once projected\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nOverload 7:\ndef AddPoint(name, target_edge, ratio):\n&quot;&quot;&quot;\nAdds a point on an edge\n \nArgs:\nname (str): Name of point\ntarget_edge (Edge): The edge to create the point on\nratio (float): Ratio along the edge from 0.0 -&gt; 1.0\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nAddPointFromCircularEdge\nAdds a point at the center of a circular edge\ndef AddPointFromCircularEdge(name, target_edge):\n&quot;&quot;&quot;\nAdds a point at the center of a circular edge\n \nArgs:\nname (str): Name of point\ntarget_edge (Edge): The edge to use for creating the point\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nAddPointFromToroidalFace\nAdds a point at the center of a toroidal face\ndef AddPointFromToroidalFace(name, target_face):\n&quot;&quot;&quot;\nAdds a point at the center of a toroidal face\n \nArgs:\nname (str): Name of point\ntarget_face (Face): Toroidal face to use in creating the point\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nAssemblyPointtoPartPoint\nConverts a point in the assembly coordinate system into a point in the part\r\ncoordinate system\ndef AssemblyPointtoPartPoint(assembly_point):\n&quot;&quot;&quot;\nConverts a point in the assembly coordinate system into a point in the part coordinate system\n \nArgs:\nassembly_point (list): Point [X, Y, Z] in the assembly coordinate system\n \nReturns:\nPoint [X, Y, Z] in the part coordinate system\n \n&quot;&quot;&quot;\nGetConfiguration\nGets a configuration with a specific name\ndef GetConfiguration(name):\n&quot;&quot;&quot;\nGets a configuration with a specific name\n \nArgs:\nname (str): Name of confguration\n \nReturns:\nConfiguration object\n \n&quot;&quot;&quot;\nGetEdge\nGets an edge using it’s name “Edge”\ndef GetEdge(name):\n&quot;&quot;&quot;\nGets an edge using it&#039;s name &quot;Edge&lt;n&gt;&quot;\n \nArgs:\nname (str): Name of edge\n \nReturns:\nEdge if found\n \n&quot;&quot;&quot;\nGetFace\nGets a face using it’s name “Face”\ndef GetFace(name):\n&quot;&quot;&quot;\nGets a face using it&#039;s name &quot;Face&lt;n&gt;&quot;\n \nArgs:\nname (str): Name of face\n \nReturns:\nFace if found\n \n&quot;&quot;&quot;\nGetMappedOccurrence\nGets the occurrence of the part mapped into the\r\noccurrence structure of a specific assembly\r\nThis occurrence can be used to create constraints in the specific\r\nassembly using the part\ndef GetMappedOccurrence(assembly):\n&quot;&quot;&quot;\nGets the occurrence of the part mapped into the occurrence structure of a specific assembly This occurrence can be used to create constraints in the specific assembly using the part\n \nArgs:\nassembly (AlibreX.IADAssemblySession): Assembly for occurrence structure\n \nReturns:\nMapped occurrence or null if not found\n \n&quot;&quot;&quot;\nPartPointtoAssemblyPoint\nConverts a point in the part coordinate system into a point in the assembly\r\ncoordinate system\ndef PartPointtoAssemblyPoint(part_point):\n&quot;&quot;&quot;\nConverts a point in the part coordinate system into a point in the assembly coordinate system\n \nArgs:\npart_point (list): Point [X, Y, Z] in the part coordinate system\n \nReturns:\nPoint [X, Y, Z] in the assembly coordinate system\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"AssembledSubAssembly":{"slug":"AssembledSubAssembly","filePath":"AssembledSubAssembly.md","title":"AssembledSubAssembly","links":["Classes","README"],"tags":[],"content":"AssembledSubAssembly\n Back to Classes | Documentation Home | All Classes\n\nNamespace: AlibreScript.API\nKind: Class\n\nProperties\nConfigurations\nType: Object\r\nA list of configurations defined on the assembly\nName\nType: Object\r\nName of the subassembly\nMethods\nGetConfiguration\nGets a configuration with a specific name\ndef GetConfiguration(name):\n&quot;&quot;&quot;\nGets a configuration with a specific name\n \nArgs:\nname (str): Name of confguration\n \nReturns:\nConfiguration object\n \n&quot;&quot;&quot;\nGetMappedOccurrence\nGets the occurrence of the sub-assembly mapped into the\r\noccurrence structure of a specific assembly\r\nThis occurrence can be used to create constraints in the specific\r\nsub-assembly using the part\ndef GetMappedOccurrence(assembly):\n&quot;&quot;&quot;\nGets the occurrence of the sub-assembly mapped into the occurrence structure of a specific assembly This occurrence can be used to create constraints in the specific sub-assembly using the part\n \nArgs:\nassembly (AlibreX.IADAssemblySession): Assembly for occurrence structure\n \nReturns:\nMapped occurrence or null if not found\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"Assembly.ConstraintBoundsType":{"slug":"Assembly.ConstraintBoundsType","filePath":"Assembly.ConstraintBoundsType.md","title":"Assembly.ConstraintBoundsType","links":["Classes","README"],"tags":[],"content":"Assembly.ConstraintBoundsType\n Back to Classes | Documentation Home | All Classes\n\nNamespace: AlibreScript.API.Assembly\nKind: Class\n\nAssembly constraint bounds types\n\n⬆ Back to Top"},"Assembly":{"slug":"Assembly","filePath":"Assembly.md","title":"Assembly","links":["Home","Classes","Methods-Index","Properties-Index","AssembledPart","AssembledSubAssembly","Part","Assembly.ConstraintBoundsType","Configuration"],"tags":[],"content":"Assembly\nHome | Classes | Methods | Properties\n** Location:**Assembly &amp; Parts Assembly\nNamespace: AlibreScript.API | Kind: Class\nThe Assembly class provides comprehensive functionality for creating, manipulating, and managing assemblies within Alibre Design. This class handles assembly constraints, component management, and assembly-level operations.\nPractical Usage\nAssemblies are core to mechanical design and automation. Common scripting scenarios include:\n\nAutomated assembly generation from part libraries\nParametric assemblies that adapt to design changes\nConstraint management for proper component positioning\nAssembly validation and interference checking\nConfiguration management for design variants\n\nCommon Coding Patterns\n# Create new assembly\nassembly = Assembly(&quot;MyAssembly.AD_ASM&quot;, &quot;C:\\\\MyProject&quot;)\n \n# Add parts to assembly\npart1 = assembly.AddPart(&quot;Bracket.AD_PRT&quot;, &quot;C:\\\\Parts&quot;)\npart2 = assembly.AddPart(&quot;Shaft.AD_PRT&quot;, &quot;C:\\\\Parts&quot;)\n \n# Create alignment constraint between parts\nassembly.AddAlignConstraint(\n0.0, # Distance (flush alignment)\npart1, # First part\npart1.GetPlane(&quot;XY&quot;), # Reference plane on first part\npart2, # Second part\npart2.GetPlane(&quot;XY&quot;), # Reference plane on second part\nFalse, # Not reversed\n&quot;FlushConstraint&quot; # Constraint name\n)\n \n# Save assembly\nassembly.Save(&quot;Final assembly saved&quot;)\nRelated Classes\n\nAssembledPart - Individual parts within assembly\nAssembledSubAssembly - Sub-assemblies within assembly\nPart - Base part functionality\nAssembly.ConstraintBoundsType - Constraint definitions\nConfiguration - Assembly configurations\n\nQuick Navigation\n\nProperties - Assembly properties and metadata\nMethods - Available operations\nConstraint Methods - Assembly constraints\nComponent Methods - Managing parts and sub-assemblies\nFile Operations - Save, export, import\n\nProperties\nComment\nType: Object\r\nComment property\nConfigurations\nType: Object\r\nA list of configurations defined on the assembly\nCostCenter\nType: Object\r\nCost center property\nCreatedBy\nType: Object\r\nCreated By property\nCreatedDate\nType: Object\r\nCreated Date property\nCreatingApplication\nType: Object\r\nCreating Application property\nDensity\nType: Object\r\nDensity of the part\nDescription\nType: Object\r\nDescription of the part\nDocumentNumber\nType: Object\r\nDocument Number property\nEngineeringApprovalDate\nType: Object\r\nEngineering Approval Date property\nEngineeringApprovedBy\nType: Object\r\nEngineering Approved By property\nEstimatedCost\nType: Object\r\nEstimated Cost property\nExtendedMaterialInformation\nType: Object\r\nMaterial (extended information) property\nFileName\nType: Object\r\nPath and filename of the assembly\nKeywords\nType: Object\r\nKeywords property\nLastAuthor\nType: Object\r\nLast Author property\nLastUpdateDate\nType: Object\r\nLast Update Date property\nManufacturingApprovedBy\nType: Object\r\nManufacturing Approved By property\nManufacturingApprovedDate\nType: Object\r\nProduct property\nMaterial\nType: Object\r\nMaterial of the part\nModifiedInformation\nType: Object\r\nModified Information property\nName\nType: Object\r\nName of the assembly\nNumber\nType: Object\r\nUser-defined number for the part\nOrigin\nType: Object\r\nGets the origin (language independent)\nParameters\nType: Object\r\nA list of parameters defined on the assembly\nParts\nType: Object\r\nA list of parts defined on the assembly\nProduct\nType: Object\r\nProduct property\nReceivedFrom\nType: Object\r\nReceived From property\nRevision\nType: Object\r\nRevision property\nSelections\nType: Object\r\nGets the currently selected items as [ItemA, ItemB, …]\r\nSupports subassemblies, parts, faces, edges, vertices, planes, axes and points\nStockSize\nType: Object\r\nStock Size property\nSubAssemblies\nType: Object\r\nA list of subassemblies defined on the assembly\nSupplier\nType: Object\r\nSupplier property\nTitle\nType: Object\r\nTitle property\nVendor\nType: Object\r\nVendor property\nWebLink\nType: Object\r\nWeb Link property\nXAxis\nType: Object\r\nGets the X-axis (language independent)\nXYPlane\nType: Object\r\nGets the XY-plane (language independent)\nYAxis\nType: Object\r\nGets the Y-axis (language independent)\nYZPlane\nType: Object\r\nGets the YZ-plane (language independent)\nZAxis\nType: Object\r\nGets the Z-axis (language independent)\nZXPlane\nType: Object\r\nGets the ZX-plane (language independent)\nMethods\nAssembly\nOpens an existing assembly\nOverload 1:\ndef Assembly(folder, name):\n&quot;&quot;&quot;\nOpens an existing assembly\n \nArgs:\nfolder (str): Folder containing assembly\nname (str): Name of assembly to open\n \n&quot;&quot;&quot;\nOverload 2:\ndef Assembly(folder, name, hide_editor):\n&quot;&quot;&quot;\nOpens an existing assembly, optionally hiding the editor\n \nArgs:\nfolder (str): Folder containing assembly\nname (str): Name of assembly to open\nhide_editor (bool): True to hide the editor\n \n&quot;&quot;&quot;\nOverload 3:\ndef Assembly(name):\n&quot;&quot;&quot;\nCreates a new assembly\n \nArgs:\nname (str): Name of new assembly\n \n&quot;&quot;&quot;\nOverload 4:\ndef Assembly(name, create_new):\n&quot;&quot;&quot;\nCreates a new assembly or accesses an already opened assembly\n \nArgs:\nname (str): Name of assembly to create or access\ncreate_new (bool): True to create a new assembly, false to access an opened assembly\n \n&quot;&quot;&quot;\nOverload 5:\ndef Assembly(name, create_new, hide_editor):\n&quot;&quot;&quot;\nCreates a new assembly or accesses an already opened assembly, optionally hiding the editor\n \nArgs:\nname (str): Name of assembly to create or access\ncreate_new (bool): True to create a new assembly, false to access an opened assembly\nhide_editor (bool): True to hide the editor (only valid if assembly is not already open)\n \n&quot;&quot;&quot;\nAddAlignConstraint\nAdds a simple alignment constraint between two planes/faces/axes/edges/points\nOverload 1:\ndef AddAlignConstraint(distance, partor_assembly_a, item_a, partor_assembly_b, item_b):\n&quot;&quot;&quot;\nAdds a simple alignment constraint between two planes/faces/axes/edges/points\n \nArgs:\ndistance (float): Alignment distance\npartor_assembly_a (IAssembled): First part/assembly to constrain\nitem_a (IConstrainable): Plane/face/axis/edge/point on first part/assembly to constrain\npartor_assembly_b (IAssembled): Second part/assembly to constrain\nitem_b (IConstrainable): Plane/face/axis/edge/point on second part/assembly to constrain\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddAlignConstraint(distance, partor_assembly_a, item_a, partor_assembly_b, item_b, is_reversed, name):\n&quot;&quot;&quot;\nAdds a simple alignment constraint between two planes/faces/axes/edges/points\n \nArgs:\ndistance (float): Alignment distance\npartor_assembly_a (IAssembled): First part/assembly to constrain\nitem_a (IConstrainable): Plane/face/axis/edge/point on first part/assembly to constrain\npartor_assembly_b (IAssembled): Second part/assembly to constrain\nitem_b (IConstrainable): Plane/face/axis/edge/point on second part/assembly to constrain\nis_reversed (bool): true to reverse constraint\nname (str): Name of constraint\n \n&quot;&quot;&quot;\nAddAlignConstraint2\nAdds an alignment constraint between two planes/faces/axes/edges/points\r\nUses bounds type\ndef AddAlignConstraint2(distance1, distance2, partor_assembly_a, item_a, partor_assembly_b, item_b, is_reversed, name, bounds_type):\n&quot;&quot;&quot;\nAdds an alignment constraint between two planes/faces/axes/edges/points Uses bounds type\n \nArgs:\ndistance1 (float): Align distance\ndistance2 (float): Second distance for &#039;between&#039; bounds type or zero if not used\npartor_assembly_a (IAssembled): First part/assembly to constrain\nitem_a (IConstrainable): Plane/face/axis/edge/point on first part/assembly to constrain\npartor_assembly_b (IAssembled): Second part/assembly to constrain\nitem_b (IConstrainable): Plane/face/axis/edge/point on second part/assembly to constrain\nis_reversed (bool): true to reverse constraint\nname (str): Name of constraint\nbounds_type (Assembly.ConstraintBoundsType): The bounds type to use\n \n&quot;&quot;&quot;\nAddAngleConstraint\nAdds an angle constraint between two planes/faces/axes/edges/points\nOverload 1:\ndef AddAngleConstraint(angle, partor_assembly_a, item_a, partor_assembly_b, item_b):\n&quot;&quot;&quot;\nAdds an angle constraint between two planes/faces/axes/edges/points\n \nArgs:\nangle (float): Angle in degrees\npartor_assembly_a (IAssembled): First part/assembly to constrain\nitem_a (IConstrainable): Plane/face/axis/edge/point on first part/assembly to constrain\npartor_assembly_b (IAssembled): Second part/assembly to constrain\nitem_b (IConstrainable): Plane/face/axis/edge/point on second part/assembly to constrain\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddAngleConstraint(angle, partor_assembly_a, item_a, partor_assembly_b, item_b, is_reversed, name):\n&quot;&quot;&quot;\nAdds a simple angle constraint between two planes/faces/axes/edges/points\n \nArgs:\nangle (float): Angle in degrees\npartor_assembly_a (IAssembled): First part/assembly to constrain\nitem_a (IConstrainable): Plane/face/axis/edge/point on first part/assembly to constrain\npartor_assembly_b (IAssembled): Second part/assembly to constrain\nitem_b (IConstrainable): Plane/face/axis/edge/point on second part/assembly to constrain\nis_reversed (bool): true to reverse constraint\nname (str): Name of constraint\n \n&quot;&quot;&quot;\nAddAngleConstraint2\nAdds an angle constraint between two planes/faces/axes/edges/points\r\nUses bounds type\ndef AddAngleConstraint2(angle1, angle2, partor_assembly_a, item_a, partor_assembly_b, item_b, is_reversed, name, bounds_type):\n&quot;&quot;&quot;\nAdds an angle constraint between two planes/faces/axes/edges/points Uses bounds type\n \nArgs:\nangle1 (float): Angle for constraint\nangle2 (float): Second angle for &#039;between&#039; bounds type or zero if not used\npartor_assembly_a (IAssembled): First part/assembly to constrain\nitem_a (IConstrainable): Plane/face/axis/edge/point on first part/assembly to constrain\npartor_assembly_b (IAssembled): Second part/assembly to constrain\nitem_b (IConstrainable): Plane/face/axis/edge/point on second part/assembly to constrain\nis_reversed (bool): true to reverse constraint\nname (str): Name of constraint\nbounds_type (Assembly.ConstraintBoundsType): The bounds type to use\n \n&quot;&quot;&quot;\nAddAxis\nCreates an axis based on the intersection of two planes/faces\nOverload 1:\ndef AddAxis(name, plane1, plane2):\n&quot;&quot;&quot;\nCreates an axis based on the intersection of two planes/faces\n \nArgs:\nname (str): Name of axis\nplane1 (ISketchSurface): First plane/face\nplane2 (ISketchSurface): Second plane/face\n \nReturns:\nNew Axis\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddAxis(name, point1, point2):\n&quot;&quot;&quot;\nCreates an axis based on two points\n \nArgs:\nname (str): Name of axis\npoint1 (list): First point\npoint2 (list): Second point\n \nReturns:\nNew axis\n \n&quot;&quot;&quot;\nAddConfiguration\nAdds a configuration to the assembly\nOverload 1:\ndef AddConfiguration(name):\n&quot;&quot;&quot;\nAdds a configuration to the assembly\n \nArgs:\nname (str): Name of configuration\n \nReturns:\nNew configuration\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddConfiguration(name, base_configuration_name):\n&quot;&quot;&quot;\nAdds a configuration to the assembly using another configuration as a base\n \nArgs:\nname (str): Name of configuration\nbase_configuration_name (str): Name of base configuration to use\n \nReturns:\nNew configuration\n \n&quot;&quot;&quot;\nAddFastenerConstraint\nAdds a fastner constraint\ndef AddFastenerConstraint(distance, partor_assembly_a, item_a, partor_assembly_b, item_b, is_reversed, name):\n&quot;&quot;&quot;\nAdds a fastner constraint\n \nArgs:\ndistance (float): Fastener to surface mate distance\npartor_assembly_a (IAssembled): First part/assembly to constrain\nitem_a (IConstrainable): Plane/face/axis/edge/point on first part/assembly to constrain\npartor_assembly_b (IAssembled): Second part/assembly to constrain\nitem_b (IConstrainable): Plane/face/axis/edge/point on second part/assembly to constrain\nis_reversed (bool): true to reverse constraint\nname (str): Name of constraint\n \n&quot;&quot;&quot;\nAddFastenerConstraint2\nAdds a fastner constraint\ndef AddFastenerConstraint2(distance1, distance2, partor_assembly_a, item_a, partor_assembly_b, item_b, is_reversed, name, bounds_type):\n&quot;&quot;&quot;\nAdds a fastner constraint\n \nArgs:\ndistance1 (float): Fastener to surface mate distance\ndistance2 (float): Second distance for &#039;between&#039; bounds type or zero if not used\npartor_assembly_a (IAssembled): First part/assembly to constrain\nitem_a (IConstrainable): Plane/face/axis/edge/point on first part/assembly to constrain\npartor_assembly_b (IAssembled): Second part/assembly to constrain\nitem_b (IConstrainable): Plane/face/axis/edge/point on second part/assembly to constrain\nis_reversed (bool): true to reverse constraint\nname (str): Name of constraint\nbounds_type (Assembly.ConstraintBoundsType): The bounds type to use\n \n&quot;&quot;&quot;\nAddGearConstraint\nAdds a gear constraint using ratio RatioA:RatioB\ndef AddGearConstraint(ratio_a, ratio_b, partor_assembly_a, item_a, partor_assembly_b, item_b, is_reversed, name):\n&quot;&quot;&quot;\nAdds a gear constraint using ratio RatioA:RatioB\n \nArgs:\nratio_a (float): First value in gear ratio\nratio_b (float): Second value in gear ratio\npartor_assembly_a (IAssembled): First part/assembly to constrain\nitem_a (IConstrainable): Plane/face/axis/edge/point on first part/assembly to constrain\npartor_assembly_b (IAssembled): Second part/assembly to constrain\nitem_b (IConstrainable): Plane/face/axis/edge/point on second part/assembly to constrain\nis_reversed (bool): true to reverse constraint\nname (str): Name of constraint\n \n&quot;&quot;&quot;\nAddMateConstraint\nAdds a simple mate constraint between two planes/faces/axes/edges/points\nOverload 1:\ndef AddMateConstraint(distance, partor_assembly_a, item_a, partor_assembly_b, item_b):\n&quot;&quot;&quot;\nAdds a simple mate constraint between two planes/faces/axes/edges/points\n \nArgs:\ndistance (float): Mate distance\npartor_assembly_a (IAssembled): First part/assembly to constrain\nitem_a (IConstrainable): Plane/face/axis/edge/point on first part/assembly to constrain\npartor_assembly_b (IAssembled): Second part/assembly to constrain\nitem_b (IConstrainable): Plane/face/axis/edge/point on second part/assembly to constrain\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddMateConstraint(distance, partor_assembly_a, item_a, partor_assembly_b, item_b, is_reversed, name):\n&quot;&quot;&quot;\nAdds a simple mate constraint between two planes/faces/axes/edges/points\n \nArgs:\ndistance (float): Mate distance\npartor_assembly_a (IAssembled): First part/assembly to constrain\nitem_a (IConstrainable): Plane/face/axis/edge/point on first part/assembly to constrain\npartor_assembly_b (IAssembled): Second part/assembly to constrain\nitem_b (IConstrainable): Plane/face/axis/edge/point on second part/assembly to constrain\nis_reversed (bool): true to reverse constraint\nname (str): Name of constraint\n \n&quot;&quot;&quot;\nAddMateConstraint2\nAdds a mate constraint between two planes/faces/axes/edges/points\r\nUses bounds type\ndef AddMateConstraint2(distance1, distance2, partor_assembly_a, item_a, partor_assembly_b, item_b, is_reversed, name, bounds_type):\n&quot;&quot;&quot;\nAdds a mate constraint between two planes/faces/axes/edges/points Uses bounds type\n \nArgs:\ndistance1 (float): Mate distance\ndistance2 (float): Second distance for &#039;between&#039; bounds type or zero if not used\npartor_assembly_a (IAssembled): First part/assembly to constrain\nitem_a (IConstrainable): Plane/face/axis/edge/point on first part/assembly to constrain\npartor_assembly_b (IAssembled): Second part/assembly to constrain\nitem_b (IConstrainable): Plane/face/axis/edge/point on second part/assembly to constrain\nis_reversed (bool): true to reverse constraint\nname (str): Name of constraint\nbounds_type (Assembly.ConstraintBoundsType): The bounds type to use\n \n&quot;&quot;&quot;\nAddNewPart\nAdds a new part to the assembly\ndef AddNewPart(name, x, y, z):\n&quot;&quot;&quot;\nAdds a new part to the assembly\n \nArgs:\nname (str): Name of the new part\nx (float): X location of part\ny (float): Y location of part\nz (float): Z location of part\n \nReturns:\nNew part\n \n&quot;&quot;&quot;\nAddNewSubAssembly\nAdds a new sub-assembly to the assembly\ndef AddNewSubAssembly(name, x, y, z):\n&quot;&quot;&quot;\nAdds a new sub-assembly to the assembly\n \nArgs:\nname (str): Name of the new assembly\nx (float): X location of assembly\ny (float): Y location of assembly\nz (float): Z location of assembly\n \nReturns:\nNew part\n \n&quot;&quot;&quot;\nAddOrientConstraint\nAdds an orient constraint between two planes/faces/axes/edges/points\nOverload 1:\ndef AddOrientConstraint(value, partor_assembly_a, item_a, partor_assembly_b, item_b):\n&quot;&quot;&quot;\nAdds an orient constraint between two planes/faces/axes/edges/points\n \nArgs:\nvalue (float): Value\npartor_assembly_a (IAssembled): First part/assembly to constrain\nitem_a (IConstrainable): Plane/face/axis/edge/point on first part/assembly to constrain\npartor_assembly_b (IAssembled): Second part/assembly to constrain\nitem_b (IConstrainable): Plane/face/axis/edge/point on second part/assembly to constrain\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddOrientConstraint(value, partor_assembly_a, item_a, partor_assembly_b, item_b, is_reversed, name):\n&quot;&quot;&quot;\nAdds an orient constraint between two planes/faces/axes/edges/points\n \nArgs:\nvalue (float): Value\npartor_assembly_a (IAssembled): First part/assembly to constrain\nitem_a (IConstrainable): Plane/face/axis/edge/point on first part/assembly to constrain\npartor_assembly_b (IAssembled): Second part/assembly to constrain\nitem_b (IConstrainable): Plane/face/axis/edge/point on second part/assembly to constrain\nis_reversed (bool): true to reverse constraint\nname (str): Name of constraint\n \n&quot;&quot;&quot;\nAddParameter\nAdds a parameter to the assembly\nOverload 1:\ndef AddParameter(name, type, value):\n&quot;&quot;&quot;\nAdds a parameter to the assembly\n \nArgs:\nname (str): Name of parameter\ntype (ParameterTypes): Type of parameter\nvalue (float): Value for parameter\n \nReturns:\nNew parameter\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddParameter(name, type, equation):\n&quot;&quot;&quot;\nAdds a parameter to the assembly NOTE: DOESN&#039;T SEEM TO WORK IN GD V16 - THROWS EXCEPTION ABOUT TRANSACTION ALREADY BEING OPEN\n \nArgs:\nname (str): Name of parameter\ntype (ParameterTypes): Type of parameter\nequation (str): Equation for parameter\n \nReturns:\nNew parameter\n \n&quot;&quot;&quot;\nAddPart\nAdds a part to the assembly at the origin\nOverload 1:\ndef AddPart(folder, name):\n&quot;&quot;&quot;\nAdds a part to the assembly at the origin\n \nArgs:\nfolder (str): Folder containing part\nname (str): Name of part to open\n \nReturns:\nThe added part\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddPart(folder, name, offset_x, offset_y, offset_z):\n&quot;&quot;&quot;\nAdds a part to the assembly\n \nArgs:\nfolder (str): Folder containing part\nname (str): Name of part to open\noffset_x (float): X offset\noffset_y (float): Y offset\noffset_z (float): Z offset\n \nReturns:\nThe added part\n \n&quot;&quot;&quot;\nOverload 3:\ndef AddPart(folder, name, offset_x, offset_y, offset_z, angle_x, angle_y, angle_z, translation_first):\n&quot;&quot;&quot;\nAdds a part to the assembly\n \nArgs:\nfolder (str): Folder containing part\nname (str): Name of part to open\noffset_x (float): X offset\noffset_y (float): Y offset\noffset_z (float): Z offset\nangle_x (float): X rotation angle in degrees\nangle_y (float): Y rotation angle in degrees\nangle_z (float): Z rotation angle in degrees\ntranslation_first (bool): if true translation occurs before rotation, if false rotation occurs before translation\n \nReturns:\nThe added part\n \n&quot;&quot;&quot;\nOverload 4:\ndef AddPart(part):\n&quot;&quot;&quot;\nAdds a part to the assembly at the origin\n \nArgs:\npart (Part): Part to add\n \nReturns:\nThe added part\n \n&quot;&quot;&quot;\nOverload 5:\ndef AddPart(part, offset_x, offset_y, offset_z):\n&quot;&quot;&quot;\nAdds a part to the assembly\n \nArgs:\npart (Part): Part to add\noffset_x (float): X offset\noffset_y (float): Y offset\noffset_z (float): Z offset\n \nReturns:\nThe added part\n \n&quot;&quot;&quot;\nOverload 6:\ndef AddPart(file_name):\n&quot;&quot;&quot;\nAdds a part to the assembly at the origin\n \nArgs:\nfile_name (str): Path and name of part to open\n \nReturns:\nThe added part\n \n&quot;&quot;&quot;\nOverload 7:\ndef AddPart(file_name, offset_x, offset_y, offset_z):\n&quot;&quot;&quot;\nAdds a part to the assembly\n \nArgs:\nfile_name (str): Path and name of part to open\noffset_x (float): X offset\noffset_y (float): Y offset\noffset_z (float): Z offset\n \nReturns:\nThe added part\n \n&quot;&quot;&quot;\nOverload 8:\ndef AddPart(file_name, offset_x, offset_y, offset_z, angle_x, angle_y, angle_z, translation_first):\n&quot;&quot;&quot;\nAdds a part to the assembly\n \nArgs:\nfile_name (str): Path and name of part to open\noffset_x (float): X offset\noffset_y (float): Y offset\noffset_z (float): Z offset\nangle_x (float): X rotation angle in degrees\nangle_y (float): Y rotation angle in degrees\nangle_z (float): Z rotation angle in degrees\ntranslation_first (bool): if true translation occurs before rotation, if false rotation occurs before translation\n \nReturns:\nThe added part\n \n&quot;&quot;&quot;\nOverload 9:\ndef AddPart(part, offset_x, offset_y, offset_z, angle_x, angle_y, angle_z, translation_first):\n&quot;&quot;&quot;\nAdds a part to the assembly\n \nArgs:\npart (Part): Part to add\noffset_x (float): X offset\noffset_y (float): Y offset\noffset_z (float): Z offset\nangle_x (float): X rotation angle in degrees\nangle_y (float): Y rotation angle in degrees\nangle_z (float): Z rotation angle in degrees\ntranslation_first (bool): if true translation occurs before rotation, if false rotation occurs before translation\n \nReturns:\nThe added part\n \n&quot;&quot;&quot;\nAddPlane\nCreates a plane based on the offset from an existing plane\nOverload 1:\ndef AddPlane(name, source_plane, offset):\n&quot;&quot;&quot;\nCreates a plane based on the offset from an existing plane\n \nArgs:\nname (str): Name of plane\nsource_plane (ISketchSurface): Plane/face to use as basis\noffset (float): Offset from basis plane in currently chosen units\n \nReturns:\nCreated plane\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddPlane(name, normal_vector, pointon_plane):\n&quot;&quot;&quot;\nAdds a plane using a normal vector and a point on the plane\n \nArgs:\nname (str): Name of plane to add\nnormal_vector (list): Normal vector as a list [nx, ny, nz]. Does not need to be a unit vector\npointon_plane (list): A point on the plane as a list [px, py, pz]\n \nReturns:\nCreated plane\n \n&quot;&quot;&quot;\nOverload 3:\ndef AddPlane(name, source_plane, rotation_axis, angle):\n&quot;&quot;&quot;\nCreates a new plane at an angle to an existing plane\n \nArgs:\nname (str): Name of new plane\nsource_plane (ISketchSurface): Plane/face to use as basis for new plane\nrotation_axis (Axis): Axis of rotation for new plane\nangle (float): Angle of new plane in degrees\n \nReturns:\nNew plane\n \n&quot;&quot;&quot;\nOverload 4:\ndef AddPlane(name, point1, point2, point3):\n&quot;&quot;&quot;\nCreates a plane using three points\n \nArgs:\nname (str): Name of plane\npoint1 (list): Point on plane\npoint2 (list): Point on plane\npoint3 (list): Point on plane\n \nReturns:\nCreated plane\n \n&quot;&quot;&quot;\nAddPoint\nAdd a point at an offset to a point or a vertex\nOverload 1:\ndef AddPoint(name, point_or_vertex, x_offset, y_offset, z_offset):\n&quot;&quot;&quot;\nAdd a point at an offset to a point or a vertex\n \nArgs:\nname (str): Name of point\npoint_or_vertex (IPoint): Point or vertex\nx_offset (float): X offse\ny_offset (float): Y offset\nz_offset (float): Z offset\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddPoint(name, point_or_vertex1, point_or_vertex2, ratio):\n&quot;&quot;&quot;\nAdd a point between two points/vertices\n \nArgs:\nname (str): Name of point\npoint_or_vertex1 (IPoint): First point or vertex\npoint_or_vertex2 (IPoint): Second point or vertex\nratio (float): Ratio of distance between points/vertices\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nOverload 3:\ndef AddPoint(name, axis_or_edge1, axis_or_edge2):\n&quot;&quot;&quot;\nAdd a point at the intersection or two axes or edges\n \nArgs:\nname (str): Name of point\naxis_or_edge1 (IAxis): First axis or edge\naxis_or_edge2 (IAxis): Second axis or edge\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nOverload 4:\ndef AddPoint(name, plane_or_face1, plane_or_face2, plane_or_face3):\n&quot;&quot;&quot;\nAdd a point at the intersection of three planes or faces\n \nArgs:\nname (str): Name of point\nplane_or_face1 (IPlane): First plane or face\nplane_or_face2 (IPlane): Second plane or face\nplane_or_face3 (IPlane): Third plane or face\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nOverload 5:\ndef AddPoint(name, axis_or_edge, plane_or_face):\n&quot;&quot;&quot;\nAdd a point at the the intersection of a axis or edge and a plane or face\n \nArgs:\nname (str): Name of point\naxis_or_edge (IAxis): Axis or edge\nplane_or_face (IPlane): Plane or face\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nOverload 6:\ndef AddPoint(name, source_point_or_vertex, target_plane_or_face, x_offset, y_offset):\n&quot;&quot;&quot;\nAdd a point by projecting a point or vertex onto a plane or face\n \nArgs:\nname (str): Name of point\nsource_point_or_vertex (IPoint): Point or vertex to project\ntarget_plane_or_face (IPlane): Plane or face to project onto\nx_offset (float): X offset to apply to point once projected\ny_offset (float): Y offset to apply to point once projected\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nOverload 7:\ndef AddPoint(name, target_edge, ratio):\n&quot;&quot;&quot;\nAdd a point on an edge\n \nArgs:\nname (str): Name of point\ntarget_edge (Edge): The edge to create the point on\nratio (float): Ratio along the edge from 0.0 -&gt; 1.0\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nOverload 8:\ndef AddPoint(name, x, y, z):\n&quot;&quot;&quot;\nAdds a point to the assembly\n \nArgs:\nname (str): Name of new point\nx (float): X coordinate\ny (float): Y coordinate\nz (float): Z coordinate\n \nReturns:\nThe new point\n \n&quot;&quot;&quot;\nAddPointFromCircularEdge\nAdds a point at the center of a circular edge\ndef AddPointFromCircularEdge(name, target_edge):\n&quot;&quot;&quot;\nAdds a point at the center of a circular edge\n \nArgs:\nname (str): Name of point\ntarget_edge (Edge): The edge to use for creating the point\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nAddPointFromToroidalFace\nAdds a point at the center of a toroidal face\ndef AddPointFromToroidalFace(name, target_face):\n&quot;&quot;&quot;\nAdds a point at the center of a toroidal face\n \nArgs:\nname (str): Name of point\ntarget_face (Face): Toroidal face to use in creating the point\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nAddPoints\nAdds a set of points to the part\ndef AddPoints(prefix, points):\n&quot;&quot;&quot;\nAdds a set of points to the part\n \nArgs:\nprefix (str): Prefix for the point names\npoints (list): List of points [x1,y1,z1, ..., xn,yn,zn]\n \n&quot;&quot;&quot;\nAddRackAndPinionConstraint\nAdds a rack and pinion constraint\ndef AddRackAndPinionConstraint(pitch_diameter, partor_assembly_a, item_a, partor_assembly_b, item_b, is_reversed, name):\n&quot;&quot;&quot;\nAdds a rack and pinion constraint\n \nArgs:\npitch_diameter (float): Pitch diameter\npartor_assembly_a (IAssembled): First part/assembly to constrain\nitem_a (IConstrainable): Plane/face/axis/edge/point on first part/assembly to constrain\npartor_assembly_b (IAssembled): Second part/assembly to constrain\nitem_b (IConstrainable): Plane/face/axis/edge/point on second part/assembly to constrain\nis_reversed (bool): true to reverse constraint\nname (str): Name of constraint\n \n&quot;&quot;&quot;\nAddScrewConstraint\nAdds a screw constraint\ndef AddScrewConstraint(thread_pitch, partor_assembly_a, item_a, partor_assembly_b, item_b, is_reversed, name):\n&quot;&quot;&quot;\nAdds a screw constraint\n \nArgs:\nthread_pitch (float): Pitch of thread\npartor_assembly_a (IAssembled): First part/assembly to constrain\nitem_a (IConstrainable): Plane/face/axis/edge/point on first part/assembly to constrain\npartor_assembly_b (IAssembled): Second part/assembly to constrain\nitem_b (IConstrainable): Plane/face/axis/edge/point on second part/assembly to constrain\nis_reversed (bool): true to reverse constraint\nname (str): Name of constraint\n \n&quot;&quot;&quot;\nAddSubAssembly\nAdds a sub-assembly to the assembly\nOverload 1:\ndef AddSubAssembly(file_name, offset_x, offset_y, offset_z):\n&quot;&quot;&quot;\nAdds a sub-assembly to the assembly\n \nArgs:\nfile_name (str): Path and name of sub-assembly to open\noffset_x (float): X offset\noffset_y (float): Y offset\noffset_z (float): Z offset\n \nReturns:\nThe added sub-assembly\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddSubAssembly(file_name, offset_x, offset_y, offset_z, angle_x, angle_y, angle_z, translation_first):\n&quot;&quot;&quot;\nAdds a sub-assembly to the assembly\n \nArgs:\nfile_name (str): Path and name of sub-asembly to open\noffset_x (float): X offset\noffset_y (float): Y offset\noffset_z (float): Z offset\nangle_x (float): X rotation angle in degrees\nangle_y (float): Y rotation angle in degrees\nangle_z (float): Z rotation angle in degrees\ntranslation_first (bool): if true translation occurs before rotation, if false rotation occurs before translation\n \nReturns:\nThe added assembly\n \n&quot;&quot;&quot;\nOverload 3:\ndef AddSubAssembly(assembly):\n&quot;&quot;&quot;\nAdds a sub-assembly to the assembly at the origin\n \nArgs:\nassembly (Assembly): Assembly to add\n \nReturns:\nThe added assembly\n \n&quot;&quot;&quot;\nOverload 4:\ndef AddSubAssembly(assembly, offset_x, offset_y, offset_z):\n&quot;&quot;&quot;\nAdds a sub-assembly to the assembly\n \nArgs:\nassembly (Assembly): Assembly to add\noffset_x (float): X offset\noffset_y (float): Y offset\noffset_z (float): Z offset\n \nReturns:\nThe added assembly\n \n&quot;&quot;&quot;\nOverload 5:\ndef AddSubAssembly(assembly, offset_x, offset_y, offset_z, angle_x, angle_y, angle_z, translation_first):\n&quot;&quot;&quot;\nAdds a sub-assembly to the assembly\n \nArgs:\nassembly (Assembly): Sub-assembly to add\noffset_x (float): X offset\noffset_y (float): Y offset\noffset_z (float): Z offset\nangle_x (float): X rotation angle in degrees\nangle_y (float): Y rotation angle in degrees\nangle_z (float): Z rotation angle in degrees\ntranslation_first (bool): if true translation occurs before rotation, if false rotation occurs before translation\n \nReturns:\nThe added sub-assembly\n \n&quot;&quot;&quot;\nOverload 6:\ndef AddSubAssembly(folder, name):\n&quot;&quot;&quot;\nAdds a sub-assembly to the assembly at the origin\n \nArgs:\nfolder (str): Folder containing sub-assembly\nname (str): Name of sub-assembly to open\n \nReturns:\nThe added sub-assembly\n \n&quot;&quot;&quot;\nOverload 7:\ndef AddSubAssembly(folder, name, offset_x, offset_y, offset_z):\n&quot;&quot;&quot;\nAdds a sub-assembly to the assembly\n \nArgs:\nfolder (str): Folder containing sub-assembly\nname (str): Name of sub-assembly to open\noffset_x (float): X offset\noffset_y (float): Y offset\noffset_z (float): Z offset\n \nReturns:\nThe added sub-assembly\n \n&quot;&quot;&quot;\nOverload 8:\ndef AddSubAssembly(folder, name, offset_x, offset_y, offset_z, angle_x, angle_y, angle_z, translation_first):\n&quot;&quot;&quot;\nAdds a sub-assembly to the assembly\n \nArgs:\nfolder (str): Folder containing sub-assembly\nname (str): Name of sub-assembly to open\noffset_x (float): X offset\noffset_y (float): Y offset\noffset_z (float): Z offset\nangle_x (float): X rotation angle in degrees\nangle_y (float): Y rotation angle in degrees\nangle_z (float): Z rotation angle in degrees\ntranslation_first (bool): if true translation occurs before rotation, if false rotation occurs before translation\n \nReturns:\nThe added sub-assembly\n \n&quot;&quot;&quot;\nOverload 9:\ndef AddSubAssembly(file_name):\n&quot;&quot;&quot;\nAdds a sub-assembly to the assembly at the origin\n \nArgs:\nfile_name (str): Path and name of sub-assembly to open\n \nReturns:\nThe added sub-assembly\n \n&quot;&quot;&quot;\nAddTangentConstraint\nAdds a tangent constraint between two planes/faces/axes/edges/points\nOverload 1:\ndef AddTangentConstraint(distance, partor_assembly_a, item_a, partor_assembly_b, item_b, outside):\n&quot;&quot;&quot;\nAdds a tangent constraint between two planes/faces/axes/edges/points\n \nArgs:\ndistance (float): Alignment distance\npartor_assembly_a (IAssembled): First part/assembly to constrain\nitem_a (IConstrainable): Plane/face/axis/edge/point on first part/assembly to constrain\npartor_assembly_b (IAssembled): Second part/assembly to constrain\nitem_b (IConstrainable): Plane/face/axis/edge/point on second part/assembly to constrain\noutside (bool): true for an outside tangent constraint, false for an inside tangent constraint\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddTangentConstraint(distance, partor_assembly_a, item_a, partor_assembly_b, item_b, outside, is_reversed, name):\n&quot;&quot;&quot;\nAdds a tangent constraint between two planes/faces/axes/edges/points\n \nArgs:\ndistance (float): Alignment distance\npartor_assembly_a (IAssembled): First part/assembly to constrain\nitem_a (IConstrainable): Plane/face/axis/edge/point on first part/assembly to constrain\npartor_assembly_b (IAssembled): Second part/assembly to constrain\nitem_b (IConstrainable): Plane/face/axis/edge/point on second part/assembly to constrain\noutside (bool): true for an outside tangent constraint, false for an inside tangent constraint\nis_reversed (bool): true to reverse constraint\nname (str): Name of constraint\n \n&quot;&quot;&quot;\nAnchorPart\nAnchors a part\nOverload 1:\ndef AnchorPart(name):\n&quot;&quot;&quot;\nAnchors a part\n \nArgs:\nname (str): Name of part to anchor\n \n&quot;&quot;&quot;\nOverload 2:\ndef AnchorPart(part):\n&quot;&quot;&quot;\nAnchors a part\n \nArgs:\npart (AssembledPart): Part to anchor\n \n&quot;&quot;&quot;\nAnchorSubAssembly\nAnchors a sub-assembly\ndef AnchorSubAssembly(name):\n&quot;&quot;&quot;\nAnchors a sub-assembly\n \nArgs:\nname (str): Name of sub-assembly to anchor\n \n&quot;&quot;&quot;\nCreateUniqueName\nCreates a unique name that can be used to safely add a part or subassembly to the assembly\r\nif the names used in the assembly are not known in advance\ndef CreateUniqueName(base_name):\n&quot;&quot;&quot;\nCreates a unique name that can be used to safely add a part or subassembly to the assembly if the names used in the assembly are not known in advance\n \nArgs:\nbase_name (str): Base name to use\n \nReturns:\nUnique name\n \n&quot;&quot;&quot;\nDuplicatePart\nDuplicates a part in the assembly\nOverload 1:\ndef DuplicatePart(name, offset_x, offset_y, offset_z):\n&quot;&quot;&quot;\nDuplicates a part in the assembly\n \nArgs:\nname (str): Name of part to duplicate\noffset_x (float): X offset\noffset_y (float): Y offset\noffset_z (float): Z offset\n \nReturns:\nThe duplicate part\n \n&quot;&quot;&quot;\nOverload 2:\ndef DuplicatePart(part, offset_x, offset_y, offset_z):\n&quot;&quot;&quot;\nDuplicates a part in the assembly\n \nArgs:\npart (AssembledPart): Part to duplicate\noffset_x (float): X offset\noffset_y (float): Y offset\noffset_z (float): Z offset\n \nReturns:\nThe duplicate part\n \n&quot;&quot;&quot;\nOverload 3:\ndef DuplicatePart(name, offset_x, offset_y, offset_z, angle_x, angle_y, angle_z, translation_first):\n&quot;&quot;&quot;\nDuplicates a part in the assembly\n \nArgs:\nname (str): Name of part to duplicate\noffset_x (float): X offset\noffset_y (float): Y offset\noffset_z (float): Z offset\nangle_x (float): X rotation angle in degrees\nangle_y (float): Y rotation angle in degrees\nangle_z (float): Z rotation angle in degrees\ntranslation_first (bool): if true translation occurs before rotation, if false rotation occurs before translation\n \nReturns:\nThe duplicate part\n \n&quot;&quot;&quot;\nOverload 4:\ndef DuplicatePart(part, offset_x, offset_y, offset_z, angle_x, angle_y, angle_z, translation_first):\n&quot;&quot;&quot;\nDuplicates a part in the assembly\n \nArgs:\npart (AssembledPart): Part to duplicate\noffset_x (float): X offset\noffset_y (float): Y offset\noffset_z (float): Z offset\nangle_x (float): X rotation angle in degrees\nangle_y (float): Y rotation angle in degrees\nangle_z (float): Z rotation angle in degrees\ntranslation_first (bool): if true translation occurs before rotation, if false rotation occurs before translation\n \nReturns:\nThe duplicate part\n \n&quot;&quot;&quot;\nDuplicateSubAssembly\nDuplicates a sub-assembly in the assembly\nOverload 1:\ndef DuplicateSubAssembly(sub_assembly, offset_x, offset_y, offset_z):\n&quot;&quot;&quot;\nDuplicates a sub-assembly in the assembly\n \nArgs:\nsub_assembly (AssembledSubAssembly): Sub-assembly to duplicate\noffset_x (float): X offset\noffset_y (float): Y offset\noffset_z (float): Z offset\n \nReturns:\nThe duplicate sub-assembly\n \n&quot;&quot;&quot;\nOverload 2:\ndef DuplicateSubAssembly(name, offset_x, offset_y, offset_z):\n&quot;&quot;&quot;\nDuplicates a sub-assembly in the assembly\n \nArgs:\nname (str): Name of sub-assembly to duplicate\noffset_x (float): X offset\noffset_y (float): Y offset\noffset_z (float): Z offset\n \nReturns:\nThe duplicate sub-assembly\n \n&quot;&quot;&quot;\nOverload 3:\ndef DuplicateSubAssembly(sub_assembly, offset_x, offset_y, offset_z, angle_x, angle_y, angle_z, translation_first):\n&quot;&quot;&quot;\nDuplicates a sub-assembly in the assembly\n \nArgs:\nsub_assembly (AssembledSubAssembly): Sub-assembly to duplicate\noffset_x (float): X offset\noffset_y (float): Y offset\noffset_z (float): Z offset\nangle_x (float): X rotation angle in degrees\nangle_y (float): Y rotation angle in degrees\nangle_z (float): Z rotation angle in degrees\ntranslation_first (bool): if true translation occurs before rotation, if false rotation occurs before translation\n \nReturns:\nThe duplicate sub-assembly\n \n&quot;&quot;&quot;\nOverload 4:\ndef DuplicateSubAssembly(name, offset_x, offset_y, offset_z, angle_x, angle_y, angle_z, translation_first):\n&quot;&quot;&quot;\nDuplicates a sub-assembly in the assembly\n \nArgs:\nname (str): Name of sub-assembly to duplicate\noffset_x (float): X offset\noffset_y (float): Y offset\noffset_z (float): Z offset\nangle_x (float): X rotation angle in degrees\nangle_y (float): Y rotation angle in degrees\nangle_z (float): Z rotation angle in degrees\ntranslation_first (bool): if true translation occurs before rotation, if false rotation occurs before translation\n \nReturns:\nThe duplicate sub-assembly\n \n&quot;&quot;&quot;\nExportBIP\nExports a keyshot file\ndef ExportBIP(file_name):\n&quot;&quot;&quot;\nExports a keyshot file\n \nArgs:\nfile_name (str): Path and name of keyshot file\n \n&quot;&quot;&quot;\nExportIGES\nExports the assembly as a IGES file\ndef ExportIGES(file_name):\n&quot;&quot;&quot;\nExports the assembly as a IGES file\n \nArgs:\nfile_name (str): Path and name of IGES file\n \n&quot;&quot;&quot;\nExportSAT\nExports the assembly as a SAT file\ndef ExportSAT(file_name, version, save_colors):\n&quot;&quot;&quot;\nExports the assembly as a SAT file\n \nArgs:\nfile_name (str): Path and name of SAT file\nversion (int): Exported SAT file version\nsave_colors (bool): true to preseve colors\n \n&quot;&quot;&quot;\nExportSTEP203\nExports the assembly as a STEP 203 file\ndef ExportSTEP203(file_name):\n&quot;&quot;&quot;\nExports the assembly as a STEP 203 file\n \nArgs:\nfile_name (str): Path and name of STEP 203 file\n \n&quot;&quot;&quot;\nExportSTEP214\nExports the assembly as a STEP 214 file\ndef ExportSTEP214(file_name):\n&quot;&quot;&quot;\nExports the assembly as a STEP 214 file\n \nArgs:\nfile_name (str): Path and name of STEP 214 file\n \n&quot;&quot;&quot;\nExportSTL\nExports the assembly as an STL file\ndef ExportSTL(file_name):\n&quot;&quot;&quot;\nExports the assembly as an STL file\n \nArgs:\nfile_name (str): Path and name of STL file\n \n&quot;&quot;&quot;\nGetAxis\nGets an axis from an axis name\ndef GetAxis(name):\n&quot;&quot;&quot;\nGets an axis from an axis name\n \nArgs:\nname (str): Name of axis to find\n \nReturns:\nFound axis\n \n&quot;&quot;&quot;\nGetConfiguration\nGets a configuration with a specific name\ndef GetConfiguration(name):\n&quot;&quot;&quot;\nGets a configuration with a specific name\n \nArgs:\nname (str): Name of confguration\n \nReturns:\nConfiguration object\n \n&quot;&quot;&quot;\nGetCustomProperty\nGets the value of a custonm property\ndef GetCustomProperty(name):\n&quot;&quot;&quot;\nGets the value of a custonm property\n \nArgs:\nname (str): Name of the custom property\n \nReturns:\nThe value of the property as a string\n \n&quot;&quot;&quot;\nGetParameter\nGets a parameter with a specific name\ndef GetParameter(name):\n&quot;&quot;&quot;\nGets a parameter with a specific name\n \nArgs:\nname (str): Name of parameter\n \nReturns:\nParameter object\n \n&quot;&quot;&quot;\nGetPart\nGets a part in the assembly\ndef GetPart(name):\n&quot;&quot;&quot;\nGets a part in the assembly\n \nArgs:\nname (str): Name of part instance to get\n \nReturns:\nThe part\n \n&quot;&quot;&quot;\nGetPartOrientation\nGets the orientation of a part in an assembly\nOverload 1:\ndef GetPartOrientation(part):\n&quot;&quot;&quot;\nGets the orientation of a part in an assembly\n \nArgs:\npart (AssembledPart): Part in an assembly\n \nReturns:\nPart orientation as [OffsetX, OffsetY, OffsetZ, AngleX, AngleY, AngleZ], translation before rotation\n \n&quot;&quot;&quot;\nOverload 2:\ndef GetPartOrientation(part_name):\n&quot;&quot;&quot;\nGets the orientation of a part in an assembly\n \nArgs:\npart_name (str): Name of part to get orientation\n \nReturns:\nPart orientation as [OffsetX, OffsetY, OffsetZ, AngleX, AngleY, AngleZ], translation before rotation\n \n&quot;&quot;&quot;\nGetPlane\nGets a plane using the name of the plane\ndef GetPlane(name):\n&quot;&quot;&quot;\nGets a plane using the name of the plane\n \nArgs:\nname (str): Name of plane to find\n \nReturns:\nThe plane\n \n&quot;&quot;&quot;\nGetPoint\nGets a point on the assembly using the point name. The point must have been created in a script\ndef GetPoint(name):\n&quot;&quot;&quot;\nGets a point on the assembly using the point name. The point must have been created in a script\n \nArgs:\nname (str): Name of point to get\n \nReturns:\nThe point\n \n&quot;&quot;&quot;\nGetSubAssembly\nGets a sub-assembly in the assembly\ndef GetSubAssembly(name):\n&quot;&quot;&quot;\nGets a sub-assembly in the assembly\n \nArgs:\nname (str): Name of sub-assembly instance to get\n \nReturns:\nThe sub-assembly\n \n&quot;&quot;&quot;\nGetUserData\nGets user data\ndef GetUserData(name):\n&quot;&quot;&quot;\nGets user data\n \nArgs:\nname (str): Name of data to get\n \nReturns:\nData as a python dictionary or None if not found\n \n&quot;&quot;&quot;\nHidePart\nHides a part\nOverload 1:\ndef HidePart(name):\n&quot;&quot;&quot;\nHides a part\n \nArgs:\nname (str): Name of part to hide\n \n&quot;&quot;&quot;\nOverload 2:\ndef HidePart(part):\n&quot;&quot;&quot;\nHides a part\n \nArgs:\npart (AssembledPart): Part to hide\n \n&quot;&quot;&quot;\nHideSubAssembly\nHides a sub-assembly\ndef HideSubAssembly(name):\n&quot;&quot;&quot;\nHides a sub-assembly\n \nArgs:\nname (str): Name of sub-assembly to hide\n \n&quot;&quot;&quot;\nMovePart\nMoves a part\nOverload 1:\ndef MovePart(name, offset_x, offset_y, offset_z, apply_constraints):\n&quot;&quot;&quot;\nMoves a part\n \nArgs:\nname (str): Name of part to move\noffset_x (float): X offset to apply\noffset_y (float): Y offset to apply\noffset_z (float): Z offset to apply\napply_constraints (bool): true to apply constraints\n \n&quot;&quot;&quot;\nOverload 2:\ndef MovePart(part, offset_x, offset_y, offset_z, apply_constraints):\n&quot;&quot;&quot;\nMoves a part\n \nArgs:\npart (AssembledPart): Part to move\noffset_x (float): X offset to apply\noffset_y (float): Y offset to apply\noffset_z (float): Z offset to apply\napply_constraints (bool): true to apply constraints\n \n&quot;&quot;&quot;\nMoveParts\nMoves a set of parts\ndef MoveParts(names, offset_x, offset_y, offset_z, apply_constraints):\n&quot;&quot;&quot;\nMoves a set of parts\n \nArgs:\nnames (list): Names of parts to move\noffset_x (float): X offset to apply\noffset_y (float): Y offset to apply\noffset_z (float): Z offset to apply\napply_constraints (bool): true to apply constraints\n \n&quot;&quot;&quot;\nMoveSubAssemblies\nMoves a set of sub-assemblies\ndef MoveSubAssemblies(names, offset_x, offset_y, offset_z, apply_constraints):\n&quot;&quot;&quot;\nMoves a set of sub-assemblies\n \nArgs:\nnames (list): Names of sub-assemblies to move\noffset_x (float): X offset to apply\noffset_y (float): Y offset to apply\noffset_z (float): Z offset to apply\napply_constraints (bool): true to apply constraints\n \n&quot;&quot;&quot;\nMoveSubAssembly\nMoves a sub-assembly\nOverload 1:\ndef MoveSubAssembly(name, offset_x, offset_y, offset_z, apply_constraints):\n&quot;&quot;&quot;\nMoves a sub-assembly\n \nArgs:\nname (str): Name of sub-assembly to move\noffset_x (float): X offset to apply\noffset_y (float): Y offset to apply\noffset_z (float): Z offset to apply\napply_constraints (bool): true to apply constraints\n \n&quot;&quot;&quot;\nOverload 2:\ndef MoveSubAssembly(sub_assembly, offset_x, offset_y, offset_z, apply_constraints):\n&quot;&quot;&quot;\nMoves a sub-assembly\n \nArgs:\nsub_assembly (AssembledSubAssembly): Sub-assembly to move\noffset_x (float): X offset to apply\noffset_y (float): Y offset to apply\noffset_z (float): Z offset to apply\napply_constraints (bool): true to apply constraints\n \n&quot;&quot;&quot;\nRotatePart\nRotates a part\nOverload 1:\ndef RotatePart(name, angle_x, angle_y, angle_z, apply_constraints):\n&quot;&quot;&quot;\nRotates a part\n \nArgs:\nname (str): Name of part to rotate\nangle_x (float): X rotation angle in degrees\nangle_y (float): Y rotation angle in degrees\nangle_z (float): Z rotation angle in degrees\napply_constraints (bool): true to apply constraints\n \n&quot;&quot;&quot;\nOverload 2:\ndef RotatePart(part, angle_x, angle_y, angle_z, apply_constraints):\n&quot;&quot;&quot;\nRotates a part\n \nArgs:\npart (AssembledPart): Part to rotate\nangle_x (float): X rotation angle in degrees\nangle_y (float): Y rotation angle in degrees\nangle_z (float): Z rotation angle in degrees\napply_constraints (bool): true to apply constraints\n \n&quot;&quot;&quot;\nRotateParts\nRotates a set of parts\ndef RotateParts(names, angle_x, angle_y, angle_z, apply_constraints):\n&quot;&quot;&quot;\nRotates a set of parts\n \nArgs:\nnames (list): Names of parts to rotate\nangle_x (float): X rotation angle in degrees\nangle_y (float): Y rotation angle in degrees\nangle_z (float): Z rotation angle in degrees\napply_constraints (bool): true to apply constraints\n \n&quot;&quot;&quot;\nRotateSubAssemblies\nRotates a set of sub-assemblies\ndef RotateSubAssemblies(names, angle_x, angle_y, angle_z, apply_constraints):\n&quot;&quot;&quot;\nRotates a set of sub-assemblies\n \nArgs:\nnames (list): Names of sub-assemblies to rotate\nangle_x (float): X rotation angle in degrees\nangle_y (float): Y rotation angle in degrees\nangle_z (float): Z rotation angle in degrees\napply_constraints (bool): true to apply constraints\n \n&quot;&quot;&quot;\nRotateSubAssembly\nRotates a sub-assembly\nOverload 1:\ndef RotateSubAssembly(name, angle_x, angle_y, angle_z, apply_constraints):\n&quot;&quot;&quot;\nRotates a sub-assembly\n \nArgs:\nname (str): Name of sub-assembly to rotate\nangle_x (float): X rotation angle in degrees\nangle_y (float): Y rotation angle in degrees\nangle_z (float): Z rotation angle in degrees\napply_constraints (bool): true to apply constraints\n \n&quot;&quot;&quot;\nOverload 2:\ndef RotateSubAssembly(sub_assembly, angle_x, angle_y, angle_z, apply_constraints):\n&quot;&quot;&quot;\nRotates a sub-assembly\n \nArgs:\nsub_assembly (AssembledSubAssembly): Sub-assembly to rotate\nangle_x (float): X rotation angle in degrees\nangle_y (float): Y rotation angle in degrees\nangle_z (float): Z rotation angle in degrees\napply_constraints (bool): true to apply constraints\n \n&quot;&quot;&quot;\nOverload 3:\ndef RotateSubAssembly(assem_occ, angle_x, angle_y, angle_z, apply_constraints):\n&quot;&quot;&quot;\nRotates a sub-assembly\n \nArgs:\nassem_occ (AlibreX.IADOccurrence): Occurence of sub-assembly to rotate\nangle_x (float): X rotation angle in degrees\nangle_y (float): Y rotation angle in degrees\nangle_z (float): Z rotation angle in degrees\napply_constraints (bool): true to apply constraints\n \n&quot;&quot;&quot;\nSave\nSaves the assembly to a specific folder\ndef Save(folder):\n&quot;&quot;&quot;\nSaves the assembly to a specific folder\n \nArgs:\nfolder (str): Folder to save to\n \n&quot;&quot;&quot;\nSaveAll\nSave the assembly and all parts/sub-assemblies to a folder\ndef SaveAll(folder):\n&quot;&quot;&quot;\nSave the assembly and all parts/sub-assemblies to a folder\n \nArgs:\nfolder (str): Folder to save to\n \n&quot;&quot;&quot;\nSaveAs\nSaves the assembly to a specific folder with a new name\ndef SaveAs(folder, new_name):\n&quot;&quot;&quot;\nSaves the assembly to a specific folder with a new name\n \nArgs:\nfolder (str): Folder to save to\nnew_name (str): New name for assembly\n \n&quot;&quot;&quot;\nSaveSnapshot\nSaves the current view as a bitmap image\ndef SaveSnapshot(file_name, width, height, use_aspect_ratio, use_widthand_height):\n&quot;&quot;&quot;\nSaves the current view as a bitmap image\n \nArgs:\nfile_name (str): Path and mame of file to save to\nwidth (int): Width in pixels\nheight (int): Height in pixels\nuse_aspect_ratio (bool): if true uses greater of width/height along with current aspect ratio\nuse_widthand_height (bool): if true uses current width/height of view\n \n&quot;&quot;&quot;\nSaveThumbnail\nSaves a thumbnail image of the assembly\ndef SaveThumbnail(file_name, width, height):\n&quot;&quot;&quot;\nSaves a thumbnail image of the assembly\n \nArgs:\nfile_name (str): Path and name of file to save to\nwidth (int): Width of thumbnail in pixels\nheight (int): Height of thumbnail in pixels\n \n&quot;&quot;&quot;\nSetCustomProperty\nSets the value of a custom property\r\nThe custom property must already be defined on the assembly or defined on the user’s PC\ndef SetCustomProperty(name, value):\n&quot;&quot;&quot;\nSets the value of a custom property The custom property must already be defined on the assembly or defined on the user&#039;s PC\n \nArgs:\nname (str): Name of the custom property\nvalue (str): New value for the custom property\n \n&quot;&quot;&quot;\nSetUserData\nSets user data\ndef SetUserData(name, dict):\n&quot;&quot;&quot;\nSets user data\n \nArgs:\nname (str): Data name of the format companyname.projectname.dataname\ndict (IronPython.Runtime.PythonDictionary): Python dictionary of data to store\n \n&quot;&quot;&quot;\nShowPart\nShows a part\nOverload 1:\ndef ShowPart(name):\n&quot;&quot;&quot;\nShows a part\n \nArgs:\nname (str): Name of part to show\n \n&quot;&quot;&quot;\nOverload 2:\ndef ShowPart(part):\n&quot;&quot;&quot;\nShows a part\n \nArgs:\npart (AssembledPart): Part to show\n \n&quot;&quot;&quot;\nShowSubAssembly\nShows a sub-assembly\ndef ShowSubAssembly(name):\n&quot;&quot;&quot;\nShows a sub-assembly\n \nArgs:\nname (str): Name of sub-assembly to show\n \n&quot;&quot;&quot;\nSuppressPart\nSuppresses a part\nOverload 1:\ndef SuppressPart(name):\n&quot;&quot;&quot;\nSuppresses a part\n \nArgs:\nname (str): Name of part to suppress\n \n&quot;&quot;&quot;\nOverload 2:\ndef SuppressPart(part):\n&quot;&quot;&quot;\nSuppresses a part\n \nArgs:\npart (AssembledPart): Part to suppress\n \n&quot;&quot;&quot;\nSuppressSubAssembly\nSuppresses a sub-assembly\ndef SuppressSubAssembly(name):\n&quot;&quot;&quot;\nSuppresses a sub-assembly\n \nArgs:\nname (str): Name of sub-assembly to suppress\n \n&quot;&quot;&quot;\nUnanchorPart\nUn-anchors a part\nOverload 1:\ndef UnanchorPart(name):\n&quot;&quot;&quot;\nUn-anchors a part\n \nArgs:\nname (str): Name of part to un-anchor\n \n&quot;&quot;&quot;\nOverload 2:\ndef UnanchorPart(part):\n&quot;&quot;&quot;\nUn-anchors a part\n \nArgs:\npart (AssembledPart): Part to un-anchor\n \n&quot;&quot;&quot;\nUnanchorSubAssembly\nUn-anchors a sub-assembly\ndef UnanchorSubAssembly(name):\n&quot;&quot;&quot;\nUn-anchors a sub-assembly\n \nArgs:\nname (str): Name of sub-assembly to un-anchor\n \n&quot;&quot;&quot;\nUnsuppressPart\nUn-suppresses a part\nOverload 1:\ndef UnsuppressPart(name):\n&quot;&quot;&quot;\nUn-suppresses a part\n \nArgs:\nname (str): Name of part to un-suppress\n \n&quot;&quot;&quot;\nOverload 2:\ndef UnsuppressPart(part):\n&quot;&quot;&quot;\nUn-suppresses a part\n \nArgs:\npart (AssembledPart): Part to un-suppress\n \n&quot;&quot;&quot;\nUnsuppressSubAssembly\nUn-suppresses a sub-assembly\ndef UnsuppressSubAssembly(name):\n&quot;&quot;&quot;\nUn-suppresses a sub-assembly\n \nArgs:\nname (str): Name of sub-assembly to un-suppress\n \n&quot;&quot;&quot;\nAddAlignConstraint\nAdds a simple alignment constraint between two planes/faces/axes/edges/points\nOverload 1:\ndef AddAlignConstraint(distance, part_or_assembly_a, item_a, part_or_assembly_b, item_b):\n&quot;&quot;&quot;\nAdds a simple alignment constraint between two planes/faces/axes/edges/points\n \nArgs:\ndistance (float): Alignment distance\npart_or_assembly_a (IAssembled): First part/assembly to constrain\nitem_a (IConstrainable): Plane/face/axis/edge/point on first part/assembly to constrain\npart_or_assembly_b (IAssembled): Second part/assembly to constrain\nitem_b (IConstrainable): Plane/face/axis/edge/point on second part/assembly to constrain\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddAlignConstraint(distance, part_or_assembly_a, item_a, part_or_assembly_b, item_b, is_reversed, name):\n&quot;&quot;&quot;\nAdds a simple alignment constraint between two planes/faces/axes/edges/points\n \nArgs:\ndistance (float): Alignment distance\npart_or_assembly_a (IAssembled): First part/assembly to constrain\nitem_a (IConstrainable): Plane/face/axis/edge/point on first part/assembly to constrain\npart_or_assembly_b (IAssembled): Second part/assembly to constrain\nitem_b (IConstrainable): Plane/face/axis/edge/point on second part/assembly to constrain\nis_reversed (bool): True to reverse constraint\nname (str): Name of constraint\n \n&quot;&quot;&quot;\nAddAlignConstraint2\nAdds an alignment constraint between two planes/faces/axes/edges/points using bounds type\ndef AddAlignConstraint2(distance1, distance2, part_or_assembly_a, item_a, part_or_assembly_b, item_b, is_reversed, name, bounds_type):\n&quot;&quot;&quot;\nAdds an alignment constraint between two planes/faces/axes/edges/points\nUses bounds type for advanced constraint control\n \nArgs:\ndistance1 (float): Align distance\ndistance2 (float): Second distance for &#039;between&#039; bounds type or zero if not used\npart_or_assembly_a (IAssembled): First part/assembly to constrain\nitem_a (IConstrainable): Plane/face/axis/edge/point on first part/assembly to constrain\npart_or_assembly_b (IAssembled): Second part/assembly to constrain\nitem_b (IConstrainable): Plane/face/axis/edge/point on second part/assembly to constrain\nis_reversed (bool): True to reverse constraint\nname (str): Name of constraint\nbounds_type (Assembly.ConstraintBoundsType): Bounds type for constraint\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"Axis":{"slug":"Axis","filePath":"Axis.md","title":"Axis","links":["Classes","README"],"tags":[],"content":"Axis\n Back to Classes | Documentation Home | All Classes\n\nNamespace: AlibreScript.API\nKind: Class\n\nProperties\nName\nType: Object\r\nThe name of the axis\nMethods\nGetPart\nGets the part that the axis is defined on\nObject GetPart()\nGetSelectionAssembly\nThe assembly that the edge was selected on\r\nOnly valid when a selection has been made\nObject GetSelectionAssembly()\nHide\nHides the axis\nObject Hide()\nShow\nShows the axis\nObject Show()\n\n⬆ Back to Top"},"Bspline":{"slug":"Bspline","filePath":"Bspline.md","title":"Bspline","links":["Classes","README"],"tags":[],"content":"Bspline\n Back to Classes | Documentation Home | All Classes\n\nNamespace: AlibreScript.API\nKind: Class\n\nProperties\nControlPoints\nType: Object\r\nThe control points [x1, y1, …, xn, yn]\nIsReference\nType: Object\r\nTrue if the bspline is a reference bspline, false if it is a regular bspline\nKnotVectors\nType: Object\r\nThe knot vectors [k1, k2, …, kn]\nLength\nType: Object\r\nGets the length of the Bspline\nOrder\nType: Object\r\nThe order of the bspline\nWeights\nType: Object\r\nThe weights [w1, w2, …, wn]\nMethods\nBspline\nCreates a bspline\ndef Bspline(order, control_points, knot_vectors, weights, is_reference):\n&quot;&quot;&quot;\nCreates a bspline\n \nArgs:\norder (int): Order of the bspline\ncontrol_points (list): Value of control points [Point1X, Point1Y, ...]\nknot_vectors (list): Knot vectors [KnotVector1, KnotVector2, ...]\nweights (list): Point weights [Weight1, Weight2, ...]\nis_reference (bool): True if a reference bspline, false if a regular bspline\n \n&quot;&quot;&quot;\nGetNormalAt\nGets the normal vector at a point on the spline\ndef GetNormalAt(u):\n&quot;&quot;&quot;\nGets the normal vector at a point on the spline\n \nArgs:\nu (float): Location along the spline. 0.0 = start, 1.0 = end\n \nReturns:\nVector for point on the spline at the specified location (A, B)\n \n&quot;&quot;&quot;\nGetPointAt\nGets a point on the spline\ndef GetPointAt(u):\n&quot;&quot;&quot;\nGets a point on the spline\n \nArgs:\nu (float): Location along the spline. 0.0 = start, 1.0 = end\n \nReturns:\nPoint on the spline at the specified location [X, Y]\n \n&quot;&quot;&quot;\nGetX\nGets the X value of the spline at a location along the spline\ndef GetX(u):\n&quot;&quot;&quot;\nGets the X value of the spline at a location along the spline\n \nArgs:\nu (float): Location along the spline. 0.0 = start, 1.0 = end\n \nReturns:\nX value of spline at the specified location\n \n&quot;&quot;&quot;\nGetY\nGets the Y value of the spline at a location along the spline\ndef GetY(u):\n&quot;&quot;&quot;\nGets the Y value of the spline at a location along the spline\n \nArgs:\nu (float): Location along the spline. 0.0 = start, 1.0 = end\n \nReturns:\nY value of spline at the specified location\n \n&quot;&quot;&quot;\nSubdivide\nDivides the Bspline up into segments\ndef Subdivide(segments):\n&quot;&quot;&quot;\nDivides the Bspline up into segments\n \nArgs:\nsegments (int): Number of segments to obtain\n \nReturns:\nList of points between segments [X1, Y1, X2, Y2, ...]\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"Bspline3D":{"slug":"Bspline3D","filePath":"Bspline3D.md","title":"Bspline3D","links":["Classes","README"],"tags":[],"content":"Bspline3D\n Back to Classes | Documentation Home | All Classes\n\nNamespace: AlibreScript.API\nKind: Class\n\nProperties\nControlPoints\nType: Object\r\nThe control points [x1, y1, …, xn, yn]\nIsReference\nType: Object\r\nTrue if the bspline is a reference bspline, false if it is a regular bspline\nKnotVectors\nType: Object\r\nThe knot vectors [k1, k2, …, kn]\nLength\nType: Object\r\nGets the length of the Bspline\nOrder\nType: Object\r\nThe order of the bspline\nWeights\nType: Object\r\nThe weights [w1, w2, …, wn]\nMethods\nBspline3D\nCreates a bspline\ndef Bspline3D(order, control_points, knot_vectors, weights, is_reference):\n&quot;&quot;&quot;\nCreates a bspline\n \nArgs:\norder (int): Order of the bspline\ncontrol_points (list): Value of control points [Point1X, Point1Y, ...]\nknot_vectors (list): Knot vectors [KnotVector1, KnotVector2, ...]\nweights (list): Point weights [Weight1, Weight2, ...]\nis_reference (bool): True if a reference bspline, false if a regular bspline\n \n&quot;&quot;&quot;\nGetNormalAt\nGets the normal vector at a point on the spline\ndef GetNormalAt(u):\n&quot;&quot;&quot;\nGets the normal vector at a point on the spline\n \nArgs:\nu (float): Location along the spline. 0.0 = start, 1.0 = end\n \nReturns:\nVector for point on the spline at the specified location (A, B, C)\n \n&quot;&quot;&quot;\nGetPointAt\nGets a point on the spline\ndef GetPointAt(u):\n&quot;&quot;&quot;\nGets a point on the spline\n \nArgs:\nu (float): Location along the spline. 0.0 = start, 1.0 = end\n \nReturns:\nPoint on the spline at the specified location [X, Y, Z]\n \n&quot;&quot;&quot;\nGetX\nGets the X value of the spline at a location along the spline\ndef GetX(u):\n&quot;&quot;&quot;\nGets the X value of the spline at a location along the spline\n \nArgs:\nu (float): Location along the spline. 0.0 = start, 1.0 = end\n \nReturns:\nX value of spline at the specified location\n \n&quot;&quot;&quot;\nGetY\nGets the Y value of the spline at a location along the spline\ndef GetY(u):\n&quot;&quot;&quot;\nGets the Y value of the spline at a location along the spline\n \nArgs:\nu (float): Location along the spline. 0.0 = start, 1.0 = end\n \nReturns:\nY value of spline at the specified location\n \n&quot;&quot;&quot;\nGetZ\nGets the Z value of the spline at a location along the spline\ndef GetZ(u):\n&quot;&quot;&quot;\nGets the Z value of the spline at a location along the spline\n \nArgs:\nu (float): Location along the spline. 0.0 = start, 1.0 = end\n \nReturns:\nY value of spline at the specified location\n \n&quot;&quot;&quot;\nSubdivide\nDivides the Bspline up into segments\ndef Subdivide(segments):\n&quot;&quot;&quot;\nDivides the Bspline up into segments\n \nArgs:\nsegments (int): Number of segments to obtain\n \nReturns:\nList of points between segments [X1, Y1, Z1, X2, Y2, Z2, ...]\n \n&quot;&quot;&quot;\nSubdivideGetNormals\nDivides the Bspline up into segments and gets the normal for each point\ndef SubdivideGetNormals(segments):\n&quot;&quot;&quot;\nDivides the Bspline up into segments and gets the normal for each point\n \nArgs:\nsegments (int): Number of segments to obtain\n \nReturns:\nList of points between segments and normals [X1, Y1, Z1, A1, B1, C1, X2, Y2, Z2, A2, B2, C2, ...]\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"CSharp":{"slug":"CSharp","filePath":"CSharp.md","title":"CSharp","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"CSharp\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nMethods\nCompile\nCompiles C# code\ndef Compile(code):\n&quot;&quot;&quot;\nCompiles C# code\n \nArgs:\ncode (str): Code to compile\n \nReturns:\nCompiled code object\n \n&quot;&quot;&quot;\nCompileAndRun\nCompiles and runs C# code\nOverload 1:\ndef CompileAndRun(code):\n&quot;&quot;&quot;\nCompiles and runs C# code\n \nArgs:\ncode (str): Code to compile and run\n \nReturns:\nUpdated dictionary of variables\n \n&quot;&quot;&quot;\nOverload 2:\ndef CompileAndRun(code, variables):\n&quot;&quot;&quot;\nCompiles and runs C# code\n \nArgs:\ncode (str): Code to compile and run\nvariables (IronPython.Runtime.PythonDictionary): Dictionary of variables\n \nReturns:\nUpdated dictionary of variables\n \n&quot;&quot;&quot;\nRun\nRuns compiled C# code\nOverload 1:\ndef Run(script):\n&quot;&quot;&quot;\nRuns compiled C# code\n \nArgs:\nscript (Microsoft.CodeAnalysis.Scripting.Script{System.Object[]}): Compiled code object to run\n \nReturns:\nUpdated dictionary of variables\n \n&quot;&quot;&quot;\nOverload 2:\ndef Run(script, variables):\n&quot;&quot;&quot;\nRuns compiled C# code\n \nArgs:\nscript (Microsoft.CodeAnalysis.Scripting.Script{System.Object[]}): Compiled code object to run\nvariables (IronPython.Runtime.PythonDictionary): Dictionary of variables or None for no variables\n \nReturns:\nUpdated dictionary of variables\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"Circle":{"slug":"Circle","filePath":"Circle.md","title":"Circle","links":["Home","Classes","Methods-Index","Properties-Index","Members-Index","Sketch","CircularArc","Ellipse","Point","Line"],"tags":[],"content":"Circle\nHome | Classes | Methods | Properties | Members\n** Location:**Geometry &amp; Shapes Circle\nNamespace: AlibreScript.API | Kind: Class\nThe Circle class provides functionality for creating and manipulating circular geometry within sketches and 3D space.\nPractical Usage\nCircles are fundamental geometric elements in Alibre Design scripting. They’re commonly used for:\n\nHoles and circular features in mechanical parts\nCircular patterns and geometric layouts\nConstraint references for assembly positioning\nMeasurement and inspection points\n\nCommon Coding Patterns\n# Create a simple circle for a hole\ncenter_point = [0, 0]\nhole_radius = 5.0\nhole_circle = Circle(center_point, hole_radius, False)\nsketch.AddCircle(hole_circle)\n \n# Create reference circles for constraints\nref_circle = Circle([10, 10], 2.5, True) # Reference circle\nsketch.AddCircle(ref_circle)\n \n# Access circle properties for calculations\ncircle_area = 3.14159 * (circle.Radius ** 2)\ncircumference = circle.Length\nRelated Classes\n\nSketch - Contains circle geometry\nCircularArc - Arc-based circular geometry\nEllipse - Elliptical geometry\nPoint - Center point handling\nLine - Linear geometry\n\nQuick Navigation\n\nProperties - Circle properties and dimensions\nMethods - Available operations\n\nProperties\nCenter\nType: Object\r\nThe center of the circle [x, y]\nCenterPoint\nType: Object\r\nThe center of the circle as a sketch point\nIsReference\nType: Object\r\nTrue if the circle is a reference circle, false if it is a regular circle\nLength\nType: Object\r\nThe length of the circle circumference in script units\nRadius\nType: Object\r\nRadius of the circle\nMethods\nCircle\nCreates a 2D circle which can be added to sketches\ndef Circle(center, radius, is_reference):\n&quot;&quot;&quot;\nCreates a 2D circle which can be added to sketches\n \nArgs:\ncenter (list): Center of the circle as a python list [x, y]\nradius (float): Radius of circle\nis_reference (bool): True to create a reference circle\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"CircularArc.ArcType":{"slug":"CircularArc.ArcType","filePath":"CircularArc.ArcType.md","title":"CircularArc.ArcType","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"CircularArc.ArcType\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API.CircularArc\nKind: Class\n\nTypes of circular arcs\n\n⬆ Back to Top"},"CircularArc":{"slug":"CircularArc","filePath":"CircularArc.md","title":"CircularArc","links":["Home","Classes","Methods-Index","Properties-Index","Members-Index","CircularArc3D","CircularArc.ArcType","Circle","Sketch","EllipticalArc"],"tags":[],"content":"CircularArc\nHome | Classes | Methods | Properties | Members\n** Location:**Geometry &amp; Shapes CircularArc\nNamespace: AlibreScript.API | Kind: Class\nThe CircularArc class provides functionality for creating and manipulating circular arc geometry within 2D sketches.\nRelated Classes\n\nCircularArc3D - 3D circular arcs\nCircularArc.ArcType - Arc type definitions\nCircle - Full circular geometry\nSketch - Contains arc geometry\nEllipticalArc - Elliptical arc geometry\n\nQuick Navigation\n\nProperties - Arc properties and dimensions\nMethods - Available operations\n\nProperties\nAngle\nType: Object\r\nAngle of arc\nCenter\nType: Object\r\nThe center of the arc [x, y]\nCenterPoint\nType: Object\r\nThe center point as a sketchpoint object\nEnd\nType: Object\r\nThe end point as a sketchpoint object\nEndPoint\nType: Object\r\nThe end point of the arc [x, y]\nIsReference\nType: Object\r\nTrue if the arc is a reference arc, false if it is a regular arc\nRadius\nType: Object\r\nRadius of arc\nStart\nType: Object\r\nThe start point as a sketchpoint object\nStartPoint\nType: Object\r\nThe start point of the arc [x, y]\nType\nType: Object\r\nType of arc\nMethods\nCircularArc\nCreates an arc using the center, start point and end point\nOverload 1:\ndef CircularArc(center, start, end, is_reference):\n&quot;&quot;&quot;\nCreates an arc using the center, start point and end point\n \nArgs:\ncenter (list): Center of the arc\nstart (list): Start point of the arc\nend (list): End point of the arc\nis_reference (bool): True to create a reference arc, false to create a regular arc\n \n&quot;&quot;&quot;\nOverload 2:\ndef CircularArc(center, start, angle, is_reference):\n&quot;&quot;&quot;\nCreates an arc using the center, start point and an angle\n \nArgs:\ncenter (list): Location of center of arc\nstart (list): Location of start of arc\nangle (float): Angle of arc\nis_reference (bool): True if a reference arc, false if a regular arc\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"CircularArc3D.ArcType":{"slug":"CircularArc3D.ArcType","filePath":"CircularArc3D.ArcType.md","title":"CircularArc3D.ArcType","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"CircularArc3D.ArcType\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API.CircularArc3D\nKind: Class\n\nTypes of circular arcs\n\n⬆ Back to Top"},"CircularArc3D":{"slug":"CircularArc3D","filePath":"CircularArc3D.md","title":"CircularArc3D","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"CircularArc3D\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nProperties\nAngle\nType: Object\r\nAngle of arc\nCenter\nType: Object\r\nThe center of the arc [x, y, z]\nEndPoint\nType: Object\r\nThe end point of the arc [x, y, z]\nIsReference\nType: Object\r\nTrue if the arc is a reference arc, false if it is a regular arc\nRadius\nType: Object\r\nRadius of arc\nStartPoint\nType: Object\r\nThe start point of the arc [x, y, z]\nType\nType: Object\r\nType of arc\nMethods\nCircularArc3D\nCreates an arc using the center, start point and end point\nOverload 1:\ndef CircularArc3D(center, start, end, is_reference):\n&quot;&quot;&quot;\nCreates an arc using the center, start point and end point\n \nArgs:\ncenter (list): Center of the arc\nstart (list): Start point of the arc\nend (list): End point of the arc\nis_reference (bool): True to create a reference arc, false to create a regular arc\n \n&quot;&quot;&quot;\nOverload 2:\ndef CircularArc3D(center, start, angle, is_reference):\n&quot;&quot;&quot;\nCreates an arc using the center, start point and an angle\n \nArgs:\ncenter (list): Location of center of arc\nstart (list): Location of start of arc\nangle (float): Angle of arc\nis_reference (bool): True if a reference arc, false if a regular arc\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"Class-List":{"slug":"Class-List","filePath":"Class-List.md","title":"Class-List","links":["Home","Classes","Methods-Index","Properties-Index","Members-Index","Interfaces"],"tags":[],"content":"Class List\nHome | Classes | Methods | Properties | Members\nComplete alphabetical listing of all classes in the AlibreScript API with descriptions\nQuick Navigation\n\n Categorized Classes - Browse classes by functionality\n Search Methods - Find specific methods\n Property Reference - Browse properties\n Core Interfaces - Interface definitions\n\nComplete Class Reference\nAssembledPart\nNamespace: AlibreScript.API\nAssembledSubAssembly\nNamespace: AlibreScript.API\nAssembly\nNamespace: AlibreScript.API\nAssembly.ConstraintBoundsType\nNamespace: AlibreScript.API.Assembly\nAssembly constraint bounds types\nAxis\nNamespace: AlibreScript.API\nBspline\nNamespace: AlibreScript.API\nBspline3D\nNamespace: AlibreScript.API\nCircle\nNamespace: AlibreScript.API\nCircularArc\nNamespace: AlibreScript.API\nCircularArc.ArcType\nNamespace: AlibreScript.API.CircularArc\nTypes of circular arcs\nCircularArc3D\nNamespace: AlibreScript.API\nCircularArc3D.ArcType\nNamespace: AlibreScript.API.CircularArc3D\nTypes of circular arcs\nConfiguration\nNamespace: AlibreScript.API\nCSharp\nNamespace: AlibreScript.API\nEdge\nNamespace: AlibreScript.API\nEllipse\nNamespace: AlibreScript.API\nEllipticalArc\nNamespace: AlibreScript.API\nFace\nNamespace: AlibreScript.API\nFeature\nNamespace: AlibreScript.API\nGlobalParameters\nNamespace: AlibreScript.API\nGuideCurveTypes\nNamespace: AlibreScript.API\nType of guide curve\nIAxis\nNamespace: AlibreScript.API\nIPlane\nNamespace: AlibreScript.API\nIPoint\nNamespace: AlibreScript.API\nLine\nNamespace: AlibreScript.API\nLine3D\nNamespace: AlibreScript.API\nLockTypes\nNamespace: AlibreScript.API\nType of configuration lock\nParameter\nNamespace: AlibreScript.API\nParameterTypes\nNamespace: AlibreScript.API\nType of parameter\nParameterUnits\nNamespace: AlibreScript.API\nUnits of parameters\nPart\nNamespace: AlibreScript.API\nPart.DirectionType\nNamespace: AlibreScript.API.Part\nExtrusion directions - extrude along…\nPart.EndCondition\nNamespace: AlibreScript.API.Part\nExtrusion end conditions - extrude until…\nPart.FileTypes\nNamespace: AlibreScript.API.Part\nSupported file types\nPlane\nNamespace: AlibreScript.API\nPoint\nNamespace: AlibreScript.API\nPolyline\nNamespace: AlibreScript.API\nPolyline3D\nNamespace: AlibreScript.API\nPolylinePoint\nNamespace: AlibreScript.API\nPolylinePoint3D\nNamespace: AlibreScript.API\nSketch\nNamespace: AlibreScript.API\nSketch.Constraints\nNamespace: AlibreScript.API.Sketch\nSupported sketch constraints\nSketch3D\nNamespace: AlibreScript.API\nSketchPoint\nNamespace: AlibreScript.API\nSketchPoint3D\nNamespace: AlibreScript.API\nThreeD\nNamespace: AlibreScript.API\nTwoD\nNamespace: AlibreScript.API\nUnitTypes\nNamespace: AlibreScript.API\nSupported units\nVertex\nNamespace: AlibreScript.API\nWindows\nNamespace: AlibreScript.API\nWindowsInputTypes\nNamespace: AlibreScript.API\nType of Windows input\n\n⬆ Back to Top"},"Classes":{"slug":"Classes","filePath":"Classes.md","title":"Classes","links":["Home","Methods-Index","Properties-Index","Members-Index","Assembly","AssembledPart","AssembledSubAssembly","Part","Feature","Assembly.ConstraintBoundsType","Sketch","Sketch.Constraints","Sketch3D","SketchPoint","SketchPoint3D","TwoD","ThreeD","Line","Line3D","Circle","CircularArc","CircularArc.ArcType","CircularArc3D","CircularArc3D.ArcType","Ellipse","EllipticalArc","Polyline","Polyline3D","PolylinePoint","PolylinePoint3D","Bspline","Bspline3D","Point","Axis","Plane","Edge","Face","Vertex","Configuration","GlobalParameters","Parameter","ParameterTypes","ParameterUnits","UnitTypes","LockTypes","Windows","WindowsInputTypes","CSharp","GuideCurveTypes","Part.DirectionType","Part.EndCondition","Part.FileTypes","IAxis","IPlane","IPoint"],"tags":[],"content":"Classes\nHome | Classes | Methods | Properties | Members\nBrowse all available classes in the AlibreScript API\nBrowse by Category\nAssembly &amp; Parts {#assembly-and-parts}\n\nAssembly - Main assembly operations and constraints\nAssembledPart - Individual part handling within assemblies\nAssembledSubAssembly - Sub-assembly management\nPart - Part creation, manipulation, and properties\nFeature - Feature operations and management\nAssembly.ConstraintBoundsType - Constraint boundary definitions\n\nSketching &amp; Drawing {#sketching}\n\nSketch - 2D sketching operations and constraints\nSketch.Constraints - Sketch constraint management\nSketch3D - 3D sketch functionality\nSketchPoint - 2D sketch point operations\nSketchPoint3D - 3D sketch point operations\nTwoD - 2D dimension operations\nThreeD - 3D dimension operations\n\nGeometry &amp; Shapes {#geometry}\n\nLine - 2D line creation and manipulation\nLine3D - 3D line operations\nCircle - Circle creation and properties\nCircularArc - 2D circular arc operations\nCircularArc.ArcType - Arc type definitions\nCircularArc3D - 3D circular arc operations\nCircularArc3D.ArcType - 3D arc type definitions\nEllipse - Ellipse creation and manipulation\nEllipticalArc - Elliptical arc operations\nPolyline - 2D multi-segment lines\nPolyline3D - 3D multi-segment lines\nPolylinePoint - 2D polyline point handling\nPolylinePoint3D - 3D polyline point handling\nBspline - 2D B-spline curve operations\nBspline3D - 3D B-spline curve operations\n\n🧩 Core Elements\n\nPoint - Point operations and properties\nAxis - Axis definitions and operations\nPlane - Plane operations and properties\nEdge - Edge handling and properties\nFace - Face operations and properties\nVertex - Vertex operations and properties\n\nConfiguration &amp; Parameters {#configuration}\n\nConfiguration - Configuration management\nGlobalParameters - Global parameter handling\nParameter - Individual parameter operations\nParameterTypes - Parameter type definitions\nParameterUnits - Parameter unit definitions\nUnitTypes - Unit type definitions\nLockTypes - Lock type definitions\n\nUtilities &amp; System {#utilities}\n\nWindows - Window operations and management\nWindowsInputTypes - Input type definitions\nCSharp - C# integration utilities\nGuideCurveTypes - Guide curve type definitions\nPart.DirectionType - Direction type definitions\nPart.EndCondition - End condition definitions\nPart.FileTypes - File type definitions\n\nInterfaces\n\nIAxis - Axis interface definition\nIPlane - Plane interface definition\nIPoint - Point interface definition\n\nComplete Alphabetical List\n\nAssembledPart (Class)\nAssembledSubAssembly (Class)\nAssembly (Class)\nAssembly.ConstraintBoundsType (Class)\nAxis (Class)\nBspline (Class)\nBspline3D (Class)\nCircle (Class)\nCircularArc (Class)\nCircularArc.ArcType (Class)\nCircularArc3D (Class)\nCircularArc3D.ArcType (Class)\nConfiguration (Class)\nCSharp (Class)\nEdge (Class)\nEllipse (Class)\nEllipticalArc (Class)\nFace (Class)\nFeature (Class)\nGlobalParameters (Class)\nGuideCurveTypes (Class)\nIAxis (Interface)\nIPlane (Interface)\nIPoint (Interface)\nLine (Class)\nLine3D (Class)\nLockTypes (Class)\nParameter (Class)\nParameterTypes (Class)\nParameterUnits (Class)\nPart (Class)\nPart.DirectionType (Class)\nPart.EndCondition (Class)\nPart.FileTypes (Class)\nPlane (Class)\nPoint (Class)\nPolyline (Class)\nPolyline3D (Class)\nPolylinePoint (Class)\nPolylinePoint3D (Class)\nSketch (Class)\nSketch.Constraints (Class)\nSketch3D (Class)\nSketchPoint (Class)\nSketchPoint3D (Class)\nThreeD (Class)\nTwoD (Class)\nUnitTypes (Class)\nVertex (Class)\nWindows (Class)\nWindowsInputTypes (Class)\n\n\n** Navigation:** Home |  Methods |  Properties |  Members\n⬆ Back to Top"},"Configuration":{"slug":"Configuration","filePath":"Configuration.md","title":"Configuration","links":["Home","Classes","Methods-Index","Properties-Index","Members-Index","Part","Assembly","GlobalParameters","LockTypes","Parameter"],"tags":[],"content":"Configuration\nHome | Classes | Methods | Properties | Members\n** Location:**Configuration &amp; Parameters Configuration\nNamespace: AlibreScript.API | Kind: Class\nThe Configuration class provides functionality for managing part and assembly configurations, including activation state and configuration locks.\nRelated Classes\n\nPart - Contains configurations\nAssembly - Assembly configurations\nGlobalParameters - Configuration parameters\nLockTypes - Lock type definitions\nParameter - Configuration parameters\n\nQuick Navigation\n\nProperties - Configuration state and identity\nMethods - Configuration operations\n\nProperties\nIsActive\nType: Object\r\nTrue if the configuration is currently active\nName\nType: Object\r\nThe name of the configuration\nMethods\nSetLocks\nSets the locks on the configuration\ndef SetLocks(locks):\n&quot;&quot;&quot;\nSets the locks on the configuration\n \nArgs:\nlocks (LockTypes): Locks to set\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"Edge":{"slug":"Edge","filePath":"Edge.md","title":"Edge","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"Edge\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nProperties\nDiameter\nType: Object\r\nThe diameter of the edge, if it is a circle\nLength\nType: Object\r\nThe length of the edge\nName\nType: Object\r\nName of the edge\nMethods\nGetPart\nGets the part that the edge is defined on\nObject GetPart()\nGetSelectionAssembly\nThe assembly that the edge was selected on\r\nOnly valid when a selection has been made\nObject GetSelectionAssembly()\nGetVertices\nGets a python list of the current vertices in the edge\nObject GetVertices()\n\n⬆ Back to Top"},"Ellipse":{"slug":"Ellipse","filePath":"Ellipse.md","title":"Ellipse","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"Ellipse\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nProperties\nCenter\nType: Object\r\nThe center of the ellipse [x, y]\nCenterPoint\nType: Object\r\nThe center point as a sketchpoint object\nIsReference\nType: Object\r\nTrue if the ellipse is a reference ellipse, false if it is a regular ellipse\nMajorAxisAngle\nType: Object\r\nAngle of major axis\nMinorMajorRatio\nType: Object\r\nRatio of minor radius to major radius\nRadius\nType: Object\r\nRadius on major axis\nMethods\nEllipse\nCreates an ellipse\ndef Ellipse(center, major_radius, major_axis_angle, minor_major_ratio, is_reference):\n&quot;&quot;&quot;\nCreates an ellipse\n \nArgs:\ncenter (list): Center of the ellipse\nmajor_radius (float): Radius on the major axis\nmajor_axis_angle (float): Angle of the major axis in degrees\nminor_major_ratio (float): Radius on the minor axis as a ratio of the major radius\nis_reference (bool): True to create a reference arc, false to create a regular arc\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"EllipticalArc":{"slug":"EllipticalArc","filePath":"EllipticalArc.md","title":"EllipticalArc","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"EllipticalArc\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nProperties\nCenter\nType: Object\r\nThe center of the elliptical arc [x, y]\nCenterPoint\nType: Object\r\nThe center point as a sketchpoint object\nEnd\nType: Object\r\nThe end point as a sketchpoint object\nEndPoint\nType: Object\r\nThe end point of the arc [x, y]\nIsReference\nType: Object\r\nTrue if the elliptical arc is a reference elliptical arc, false if it is a regular elliptical arc\nMajorAxisAngle\nType: Object\r\nAngle of major axis\nMinorMajorRatio\nType: Object\r\nRatio of minor radius to major radius\nRadius\nType: Object\r\nRadius on major axis\nStart\nType: Object\r\nThe start point as a sketchpoint object\nStartPoint\nType: Object\r\nThe start point of the arc [x, y]\nMethods\nEllipticalArc\nCreates an elliptical arc\ndef EllipticalArc(center, start, end, major_radius, major_axis_angle, minor_major_ratio, is_reference):\n&quot;&quot;&quot;\nCreates an elliptical arc\n \nArgs:\ncenter (list): Center of the elliptical arc\nstart (list): The start point for the arc\nend (list): The end point for the arc\nmajor_radius (float): Radius on the major axis\nmajor_axis_angle (float): Angle of the major axis in degrees\nminor_major_ratio (float): Radius on the minor axis as a ratio of the major radius\nis_reference (bool): True to create a reference arc, false to create a regular arc\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"Face":{"slug":"Face","filePath":"Face.md","title":"Face","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"Face\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nProperties\nName\nType: Object\r\nThe name of the face\nMethods\nDistanceTo\nGets the distance from this face to another face\ndef DistanceTo(other_face):\n&quot;&quot;&quot;\nGets the distance from this face to another face\n \nArgs:\nother_face (Face): The other face to measure to\n \nReturns:\nThe distance between faces\n \n&quot;&quot;&quot;\nIsParallel\nChecks if another face is parallel to this one\ndef IsParallel(other_face):\n&quot;&quot;&quot;\nChecks if another face is parallel to this one\n \nArgs:\nother_face (Face): The other face to check\n \nReturns:\ntrue if the faces are parallel\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"Feature":{"slug":"Feature","filePath":"Feature.md","title":"Feature","links":["Home","Classes","Methods-Index","Properties-Index","Members-Index","Part","Assembly","Sketch","Configuration"],"tags":[],"content":"Feature\nHome | Classes | Methods | Properties | Members\n** Location:**Assembly &amp; Parts Feature\nNamespace: AlibreScript.API | Kind: Class\nThe Feature class provides functionality for managing part features including operations, appearance, and feature properties.\nRelated Classes\n\nPart - Contains features\nAssembly - Assembly feature operations\nSketch - Sketch-based features\nConfiguration - Feature configurations\n\nQuick Navigation\n\nProperties - Feature identity and attributes\nMethods - Feature operations and styling\n\nProperties\nName\nType: Object\r\nName of the feature\nMethods\nSetColor\nSets the color of the part\ndef SetColor(red, green, blue):\n&quot;&quot;&quot;\nSets the color of the part\n \nArgs:\nred (byte): Red component 0 - 255\ngreen (byte): Green component 0 - 255\nblue (byte): Blue component 0 - 255\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"GlobalParameters":{"slug":"GlobalParameters","filePath":"GlobalParameters.md","title":"GlobalParameters","links":["Home","Classes","Methods-Index","Properties-Index","Members-Index","Parameter","Configuration","ParameterTypes","ParameterUnits","Part","Assembly"],"tags":[],"content":"GlobalParameters\nHome | Classes | Methods | Properties | Members\n** Location:**Configuration &amp; Parameters GlobalParameters\nNamespace: AlibreScript.API | Kind: Class\nThe GlobalParameters class provides comprehensive functionality for managing global parameters, configurations, and parameter relationships across parts and assemblies.\nRelated Classes\n\nParameter - Individual parameter management\nConfiguration - Configuration operations\nParameterTypes - Parameter type definitions\nParameterUnits - Parameter unit definitions\nPart, Assembly - Use global parameters\n\nQuick Navigation\n\nProperties - Parameter collections and identity\nMethods - Parameter operations\nConfiguration Methods - Configuration management\nFile Operations - Save and load operations\n\nProperties\nConfigurations\nType: Object\r\nA list of configurations\nName\nType: Object\r\nName of the global parameters\nParameters\nType: Object\r\nA list of parameters\nMethods\nGlobalParameters\nOpens an existing global parameters set\nOverload 1:\ndef GlobalParameters(folder, name):\n&quot;&quot;&quot;\nOpens an existing global parameters set\n \nArgs:\nfolder (str): Folder containing global parameters\nname (str): Name of global parameters to open\n \n&quot;&quot;&quot;\nOverload 2:\ndef GlobalParameters(name):\n&quot;&quot;&quot;\nCreates a new global parameters set\n \nArgs:\nname (str): Name of new global parameters set\n \n&quot;&quot;&quot;\nOverload 3:\ndef GlobalParameters(name, create_new):\n&quot;&quot;&quot;\nCreates a new global parameters set or accesses an already opened global parameters set\n \nArgs:\nname (str): Name of global parameters set to create or access\ncreate_new (bool): True to create a new global parameters set, false to access an opened global parameters\n \n&quot;&quot;&quot;\nAddConfiguration\nAdds a configuration to the global parameters set\nOverload 1:\ndef AddConfiguration(name):\n&quot;&quot;&quot;\nAdds a configuration to the global parameters set\n \nArgs:\nname (str): Name of configuration\n \nReturns:\nNew configuration\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddConfiguration(name, base_configuration_name):\n&quot;&quot;&quot;\nAdds a configuration to the global parameters set using another configuration as a base\n \nArgs:\nname (str): Name of configuration\nbase_configuration_name (str): Name of base configuration to use\n \nReturns:\nNew configuration\n \n&quot;&quot;&quot;\nAddParameter\nAdds a parameter to the global parameters set\nOverload 1:\ndef AddParameter(name, type, value):\n&quot;&quot;&quot;\nAdds a parameter to the global parameters set\n \nArgs:\nname (str): Name of parameter\ntype (ParameterTypes): Type of parameter\nvalue (float): Value for parameter\n \nReturns:\nNew parameter\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddParameter(name, type, equation):\n&quot;&quot;&quot;\nAdds a parameter to the global parameters set\n \nArgs:\nname (str): Name of parameter\ntype (ParameterTypes): Type of parameter\nequation (str): Equation for parameter\n \nReturns:\nNew parameter\n \n&quot;&quot;&quot;\nGetConfiguration\nGets a configuration with a specific name\ndef GetConfiguration(name):\n&quot;&quot;&quot;\nGets a configuration with a specific name\n \nArgs:\nname (str): Name of confguration\n \nReturns:\nConfiguration object\n \n&quot;&quot;&quot;\nGetParameter\nGets a parameter with a specific name\ndef GetParameter(name):\n&quot;&quot;&quot;\nGets a parameter with a specific name\n \nArgs:\nname (str): Name of parameter\n \nReturns:\nParameter object\n \n&quot;&quot;&quot;\nSave\nSaves the global parameters set to a specific folder\ndef Save(folder):\n&quot;&quot;&quot;\nSaves the global parameters set to a specific folder\n \nArgs:\nfolder (str): Folder to save to\n \n&quot;&quot;&quot;\nSaveAs\nSaves the global parameters set to a specific folder with a new name\ndef SaveAs(folder, new_name):\n&quot;&quot;&quot;\nSaves the global parameters set to a specific folder with a new name\n \nArgs:\nfolder (str): Folder to save to\nnew_name (str): New name for global parameters set\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"GuideCurveTypes":{"slug":"GuideCurveTypes","filePath":"GuideCurveTypes.md","title":"GuideCurveTypes","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"GuideCurveTypes\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nType of guide curve\n\n⬆ Back to Top"},"Home":{"slug":"Home","filePath":"Home.md","title":"Home","links":["Classes","Methods-Index","Properties-Index","Members-Index","README","Namespaces","Class-List","Assembly","AssembledPart","AssembledSubAssembly","Part","Feature","Sketch","Sketch3D","SketchPoint","SketchPoint3D","TwoD","ThreeD","Line","Line3D","Circle","CircularArc","CircularArc3D","Ellipse","EllipticalArc","Polyline","Polyline3D","Bspline","Bspline3D","Configuration","GlobalParameters","Parameter","ParameterTypes","ParameterUnits","Windows","CSharp","IAxis","IPlane","IPoint"],"tags":[],"content":"AlibreScript API Documentation\n** Home | Classes | Methods | Properties | Members**\nWelcome to the AlibreScript API documentation for IronPython 2.7.10. This documentation is organized for easy navigation and provides comprehensive coverage of the API.\nMain Sections\n\n README - Project overview and getting started\n Classes - All available classes\n Methods Index - Alphabetical method reference\n Properties Index - Property documentation\n Members Index - Member listings A-Z\n Namespaces - API namespace structure\n📄 Class List - Organized class listing\n\nBrowse by Category\nAssembly &amp; Parts\n\nAssembly - Main assembly operations\nAssembledPart - Individual part handling\nAssembledSubAssembly - Sub-assembly management\nPart - Part creation and manipulation\nFeature - Feature operations\n\nSketching &amp; Drawing\n\nSketch - 2D sketching operations\nSketch3D - 3D sketch functionality\nSketchPoint / SketchPoint3D - Point handling\nTwoD / ThreeD - Dimension handling\n\nGeometry &amp; Shapes\n\nLine / Line3D - Line creation\nCircle - Circle operations\nCircularArc / CircularArc3D - Arc handling\nEllipse / EllipticalArc - Ellipse operations\nPolyline / Polyline3D - Multi-segment lines\nBspline / Bspline3D - Spline curves\n\nConfiguration &amp; Parameters\n\nConfiguration - Configuration management\nGlobalParameters - Global parameter handling\nParameter - Individual parameters\nParameterTypes / ParameterUnits - Parameter definitions\n\nUtilities &amp; Interfaces\n\nWindows - Window operations\nCSharp - C# integration\nIAxis / IPlane / IPoint - Core interfaces\n\n\n\n                  \n                  TIP\n                  \n                \n\nUse the category links above to explore related functionality, or browse the complete Classes list for all available API elements.\n\n\n\n⬆ Back to Top"},"IAxis":{"slug":"IAxis","filePath":"IAxis.md","title":"IAxis","links":["Home","Classes","Interfaces","Methods-Index","Properties-Index","Axis","IPlane","IPoint","Part","Assembly"],"tags":[],"content":"IAxis\nHome | Classes | Interfaces | Methods | Properties\n** Location:**Interfaces IAxis\nNamespace: AlibreScript.API | Kind: Interface\nThe IAxis interface defines the contract for axis operations and properties, providing a consistent interface for geometric axis definitions and transformations.\nRelated Classes\n\nAxis - Concrete axis implementation\nIPlane - Related plane interface\nIPoint - Related point interface\nPart - Contains axis elements\nAssembly - Assembly axis operations\n\nQuick Navigation\n\nMethods - Interface operations\n\nMethods\nGetOccurrence\nGets the part occurrence for this instance\nObject GetOccurrence()\n\n⬆ Back to Top"},"IPlane":{"slug":"IPlane","filePath":"IPlane.md","title":"IPlane","links":["Home","Classes","Interfaces","Methods-Index","Properties-Index","Plane","IAxis","IPoint","Sketch","Part"],"tags":[],"content":"IPlane\nHome | Classes | Interfaces | Methods | Properties\n** Location:**Interfaces IPlane\nNamespace: AlibreScript.API | Kind: Interface\nThe IPlane interface defines the contract for plane operations and properties, essential for 3D geometry operations and coordinate system definitions.\nRelated Classes\n\nPlane - Concrete plane implementation\nIAxis - Related axis interface\nIPoint - Related point interface\nSketch - Sketch planes\nPart - Contains plane elements\n\nQuick Navigation\n\nMethods - Interface operations\n\nMethods\nGetOccurrence\nGets the part occurrence for this instance\nObject GetOccurrence()\n\n⬆ Back to Top"},"IPoint":{"slug":"IPoint","filePath":"IPoint.md","title":"IPoint","links":["Home","Classes","Interfaces","Methods-Index","Properties-Index","Point","SketchPoint","SketchPoint3D","PolylinePoint","IAxis","IPlane"],"tags":[],"content":"IPoint\nHome | Classes | Interfaces | Methods | Properties\n** Location:**Interfaces IPoint\nNamespace: AlibreScript.API | Kind: Interface\nThe IPoint interface defines the contract for point operations and properties, providing a fundamental interface for all point-based geometry operations throughout the API.\nRelated Classes\n\nPoint - Concrete point implementation\nSketchPoint - 2D sketch points\nSketchPoint3D - 3D sketch points\nPolylinePoint - Polyline points\nIAxis, IPlane - Related interfaces\n\nQuick Navigation\n\nMethods - Interface operations\n\nMethods\nGetOccurrence\nGets the part occurrence for this instance\nObject GetOccurrence()\nPointObject\nLow level object that represents the point\nObject PointObject()\n\n⬆ Back to Top"},"Interfaces":{"slug":"Interfaces","filePath":"Interfaces.md","title":"Interfaces","links":["Home","Classes","Methods-Index","Properties-Index","Members-Index","IAxis","Axis","IPlane","Plane","IPoint","Point","SketchPoint","SketchPoint3D","PolylinePoint","PolylinePoint3D"],"tags":[],"content":"Interfaces\nHome | Classes | Methods | Properties | Members\nCore interface definitions in the AlibreScript API\nAvailable Interfaces\nIAxis\nNamespace: AlibreScript.API\nDefines the interface for axis operations and properties. Used for geometric axis definitions and transformations.\nRelated Classes:Axis\nIPlane\nNamespace: AlibreScript.API\nDefines the interface for plane operations and properties. Essential for 3D geometry operations and coordinate system definitions.\nRelated Classes:Plane\nIPoint\nNamespace: AlibreScript.API\nDefines the interface for point operations and properties. Fundamental interface for all point-based geometry operations.\nRelated Classes:Point, SketchPoint, SketchPoint3D, PolylinePoint, PolylinePoint3D\nUsage Patterns\nInterfaces in the AlibreScript API provide consistent contracts for geometric operations. They are typically implemented by concrete classes and used polymorphically throughout the API.\nSee Also:\n\n All Classes - Complete class reference\n🧩 Core Elements - Related geometric classes\n Geometry &amp; Shapes - Geometric operations\n\n\n** Navigation:** Home |  Classes |  Methods |  Properties\n⬆ Back to Top"},"Line":{"slug":"Line","filePath":"Line.md","title":"Line","links":["Home","Classes","Methods-Index","Properties-Index","Members-Index","Line3D","Sketch","SketchPoint","Polyline","Circle","CircularArc"],"tags":[],"content":"Line\nHome | Classes | Methods | Properties | Members\n** Location:**Geometry &amp; Shapes Line\nNamespace: AlibreScript.API | Kind: Class\nThe Line class provides functionality for creating and manipulating linear geometry within 2D sketches.\nRelated Classes\n\nLine3D - 3D line operations\nSketch - Contains line geometry\nSketchPoint - Line endpoints\nPolyline - Multi-segment lines\nCircle, CircularArc - Curved geometry\n\nQuick Navigation\n\nProperties - Line properties and dimensions\nMethods - Available operations\n\nProperties\nEnd\nType: Object\r\nThe end point as a sketchpoint object\nEndPoint\nType: Object\r\nThe end point of the line [x, y]\nIsReference\nType: Object\r\nTrue if the line is a reference line, false if it is a regular line\nLength\nType: Object\r\nThe length of the line in script units\nStart\nType: Object\r\nThe start point as a sketchpoint object\nStartPoint\nType: Object\r\nThe start point of the line [x, y]\nMethods\nLine\nCreates a new 2D line\ndef Line(start_point, end_point, is_reference):\n&quot;&quot;&quot;\nCreates a new 2D line\n \nArgs:\nstart_point (list): Location of the start point [x, y]\nend_point (list): Location of the end point [x, y]\nis_reference (bool): True if a reference line\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"Line3D":{"slug":"Line3D","filePath":"Line3D.md","title":"Line3D","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"Line3D\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nProperties\nEnd\nType: Object\r\nThe end point as a sketchpoint object\nEndPoint\nType: Object\r\nThe end point of the line [x, y, z]\nIsReference\nType: Object\r\nTrue if the line is a reference line, false if it is a regular line\nLength\nType: Object\r\nThe length of the line in script units\nStart\nType: Object\r\nThe start point as a sketchpoint object\nStartPoint\nType: Object\r\nThe start point of the line [x, y, z]\nMethods\nLine3D\nCreates a new 3D line\ndef Line3D(start_point, end_point, is_reference):\n&quot;&quot;&quot;\nCreates a new 3D line\n \nArgs:\nstart_point (list): Location of the start point [x, y, z]\nend_point (list): Location of the end point [x, y, z]\nis_reference (bool): True if a reference line\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"LockTypes":{"slug":"LockTypes","filePath":"LockTypes.md","title":"LockTypes","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"LockTypes\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nType of configuration lock\n\n⬆ Back to Top"},"Members-Index":{"slug":"Members-Index","filePath":"Members-Index.md","title":"Members-Index","links":["Home","Classes","Methods-Index","Properties-Index","members-a","members-g","members-s","members-r","members-","members-c","members-d","members-e","members-f","members-h","members-i","members-j","members-k","members-l","members-m","members-n","members-o","members-p","members-q","members-t","members-u","members-v","members-w","members-x","members-y","members-z"],"tags":[],"content":"Members Index\nHome | Classes | Members Index | Methods | Properties\nComplete alphabetical index of all methods and properties in the AlibreScript API\nQuick Access\nPopular Categories:\n\n Assembly Methods - Assembly, constraint, and part operations\n Sketching Methods - 2D/3D drawing and constraints\n Geometry Methods - Lines, arcs, circles, and curves\n Configuration Methods - Settings and parameters\n\nBrowse by Letter\nFrequently Used Letters\n\nA (186 items) - Add methods, Assembly operations, Axis functions\nG (86 items) - Get methods, Global parameters, Geometry functions\nS (71 items) - Set methods, Sketch operations, Save functions\nR (34 items) - Remove methods, Rotate operations\n\nComplete Index\n\n# (37 items) - Constructors and special methods\nA (186 items) | C (41 items) | D (19 items)\nE (39 items) | F (9 items) | G (86 items)\nH (8 items) | I (23 items) | J (2 items)\nK (4 items) | L (13 items) | M (19 items)\nN (20 items) | O (12 items) | P (11 items)\nQ (1 items) | R (34 items) | S (71 items)\nT (8 items) | U (12 items) | V (3 items)\nW (4 items) | X (8 items) | Y (8 items) | Z (7 items)\n\nTips for Navigation\n\nUse Ctrl+F to search for specific method names within any page\nClick letter links above to jump to specific alphabetical sections\nEach member page shows related classes and method categories\nUse the category links at the top to find methods by functional area\n\n\n** Navigation:** Home |  Classes |  Methods |  Properties\n⬆ Back to Top"},"Methods-Index":{"slug":"Methods-Index","filePath":"Methods-Index.md","title":"Methods-Index","links":["Home","Classes","Properties-Index","Members-Index","Assembly","Sketch","Sketch3D","Sketch.Constraints","Line","Circle","CircularArc","Part","Feature","Bspline","Bspline3D","CircularArc3D","Ellipse","EllipticalArc","GlobalParameters","Line3D","Polyline","Polyline3D","PolylinePoint","PolylinePoint3D","SketchPoint","SketchPoint3D","Windows","Configuration","AssembledPart","Parameter","CSharp","Face","AssembledSubAssembly","Point","IAxis","IPlane","IPoint","Axis","Edge","Plane","Vertex","ThreeD","TwoD"],"tags":[],"content":"Methods Index\nHome | Classes | Methods Index | Properties | Members\nAlphabetical index of all methods in the AlibreScript API\nBrowse Methods by Category\nAssembly Methods\nAssembly constraint operations | Component management\nSketching Methods\n2D sketch operations | 3D sketch operations | Constraint methods\nGeometry Methods\nLine operations | Circle operations | Arc operations\nPart Methods\nPart creation | Feature operations | File operations\nAlphabetical Method List\nQuick Jump:# | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z\n\n\nAssembly — in Assembly\nAssembly — in Assembly\nAssembly — in Assembly\nAssembly — in Assembly\nAssembly — in Assembly\nBspline — in Bspline\nBspline3D — in Bspline3D\nCircle — in Circle\nCircularArc — in CircularArc\nCircularArc — in CircularArc\nCircularArc3D — in CircularArc3D\nCircularArc3D — in CircularArc3D\nEllipse — in Ellipse\nEllipticalArc — in EllipticalArc\nGlobalParameters — in GlobalParameters\nGlobalParameters — in GlobalParameters\nGlobalParameters — in GlobalParameters\nLine — in Line\nLine3D — in Line3D\nPart — in Part\nPart — in Part\nPart — in Part\nPart — in Part\nPart — in Part\nPart — in Part\nPart — in Part\nPolyline — in Polyline\nPolyline — in Polyline\nPolyline3D — in Polyline3D\nPolyline3D — in Polyline3D\nPolylinePoint — in PolylinePoint\nPolylinePoint — in PolylinePoint\nPolylinePoint3D — in PolylinePoint3D\nPolylinePoint3D — in PolylinePoint3D\nSketchPoint — in SketchPoint\nSketchPoint3D — in SketchPoint3D\nWindows — in Windows\n\nA\n\nActivate — in Configuration\nAdd3DSketch — in Part\nAddAlignConstraint — in Assembly\nAddAlignConstraint — in Assembly\nAddAlignConstraint2 — in Assembly\nAddAngleConstraint — in Assembly\nAddAngleConstraint — in Assembly\nAddAngleConstraint2 — in Assembly\nAddArc — in Polyline\nAddArc — in Sketch\nAddArc — in Sketch3D\nAddArcCenterStartAngle — in Sketch\nAddArcCenterStartEnd — in Sketch\nAddArcCenterStartEnd — in Sketch3D\nAddAxis — in Assembly\nAddAxis — in Assembly\nAddAxis — in Part\nAddAxis — in Part\nAddAxis — in Part\nAddAxis — in Part\nAddBspline — in Sketch\nAddBspline — in Sketch\nAddBspline — in Sketch\nAddBspline — in Sketch3D\nAddBspline — in Sketch3D\nAddChamfer — in Part\nAddChamfer — in Part\nAddChamfer — in Part\nAddChamfer — in Part\nAddChamferAngle — in Part\nAddChamferAngle — in Part\nAddCircle — in Polyline\nAddCircle — in Sketch\nAddCircle — in Sketch\nAddConfiguration — in Assembly\nAddConfiguration — in Assembly\nAddConfiguration — in GlobalParameters\nAddConfiguration — in GlobalParameters\nAddConfiguration — in Part\nAddConfiguration — in Part\nAddConstraint — in Sketch\nAddConstraint — in Sketch\nAddDimension — in Sketch\nAddDimension — in Sketch\nAddDimension — in Sketch\nAddEllipse — in Sketch\nAddEllipse — in Sketch\nAddEllipse — in Sketch\nAddEllipticalArc — in Sketch\nAddEllipticalArc — in Sketch\nAddExtrudeBoss — in Part\nAddExtrudeBoss — in Part\nAddExtrudeCut — in Part\nAddExtrudeCut — in Part\nAddFastenerConstraint — in Assembly\nAddFastenerConstraint2 — in Assembly\nAddFigure — in Sketch\nAddFillet — in Part\nAddFillet — in Part\nAddFillet — in Part\nAddGear — in Part\nAddGearConstraint — in Assembly\nAddGearDN — in Part\nAddGearDN — in Part\nAddGearDP — in Part\nAddGearDP — in Part\nAddGearNP — in Part\nAddGearNP — in Part\nAddLine — in Sketch\nAddLine — in Sketch\nAddLine — in Sketch\nAddLine — in Sketch3D\nAddLine — in Sketch3D\nAddLine — in Sketch3D\nAddLines — in Sketch\nAddLines — in Sketch3D\nAddLoftBoss — in Part\nAddLoftBoss — in Part\nAddLoftCut — in Part\nAddLoftCut — in Part\nAddMateConstraint — in Assembly\nAddMateConstraint — in Assembly\nAddMateConstraint2 — in Assembly\nAddNewPart — in Assembly\nAddNewSubAssembly — in Assembly\nAddOrientConstraint — in Assembly\nAddOrientConstraint — in Assembly\nAddParameter — in Assembly\nAddParameter — in Assembly\nAddParameter — in GlobalParameters\nAddParameter — in GlobalParameters\nAddParameter — in Part\nAddParameter — in Part\nAddParameter — in Part\nAddPart — in Assembly\nAddPart — in Assembly\nAddPart — in Assembly\nAddPart — in Assembly\nAddPart — in Assembly\nAddPart — in Assembly\nAddPart — in Assembly\nAddPart — in Assembly\nAddPart — in Assembly\nAddPlane — in Assembly\nAddPlane — in Assembly\nAddPlane — in Assembly\nAddPlane — in Assembly\nAddPlane — in Part\nAddPlane — in Part\nAddPlane — in Part\nAddPlane — in Part\nAddPlane — in Part\nAddPoint — in AssembledPart\nAddPoint — in AssembledPart\nAddPoint — in AssembledPart\nAddPoint — in AssembledPart\nAddPoint — in AssembledPart\nAddPoint — in AssembledPart\nAddPoint — in AssembledPart\nAddPoint — in Assembly\nAddPoint — in Assembly\nAddPoint — in Assembly\nAddPoint — in Assembly\nAddPoint — in Assembly\nAddPoint — in Assembly\nAddPoint — in Assembly\nAddPoint — in Assembly\nAddPoint — in Part\nAddPoint — in Part\nAddPoint — in Part\nAddPoint — in Part\nAddPoint — in Part\nAddPoint — in Part\nAddPoint — in Part\nAddPoint — in Part\nAddPoint — in Part\nAddPoint — in Part\nAddPoint — in Polyline\nAddPoint — in Polyline3D\nAddPoint — in Sketch\nAddPoint — in Sketch\nAddPoint — in Sketch\nAddPoint — in Sketch3D\nAddPoint — in Sketch3D\nAddPointFromCircularEdge — in AssembledPart\nAddPointFromCircularEdge — in Assembly\nAddPointFromCircularEdge — in Part\nAddPointFromToroidalFace — in AssembledPart\nAddPointFromToroidalFace — in Assembly\nAddPointFromToroidalFace — in Part\nAddPoints — in Assembly\nAddPoints — in Part\nAddPolygon — in Sketch\nAddPolyhole — in Sketch\nAddPolyline — in Polyline\nAddPolyline — in Polyline3D\nAddPolyline — in Sketch\nAddPolyline — in Sketch3D\nAddRackAndPinionConstraint — in Assembly\nAddRectangle — in Sketch\nAddRevolveBoss — in Part\nAddRevolveCut — in Part\nAddScrewConstraint — in Assembly\nAddSketch — in Part\nAddSubAssembly — in Assembly\nAddSubAssembly — in Assembly\nAddSubAssembly — in Assembly\nAddSubAssembly — in Assembly\nAddSubAssembly — in Assembly\nAddSubAssembly — in Assembly\nAddSubAssembly — in Assembly\nAddSubAssembly — in Assembly\nAddSubAssembly — in Assembly\nAddSweepBoss — in Part\nAddSweepCut — in Part\nAddTangentConstraint — in Assembly\nAddTangentConstraint — in Assembly\nAddVertexChamfer — in Part\nAddVertexChamfer — in Part\nAnchorPart — in Assembly\nAnchorPart — in Assembly\nAnchorSubAssembly — in Assembly\nAssemblyPointtoPartPoint — in AssembledPart\nAttachToExcel — in Parameter\n\nC\n\nClone — in Polyline\nClone — in Polyline\nClone — in Polyline3D\nClone — in Polyline3D\nClose — in Assembly\nClose — in GlobalParameters\nClose — in Part\nCloseForm — in Windows\nCompile — in CSharp\nCompileAndRun — in CSharp\nCompileAndRun — in CSharp\nCopyFrom — in Sketch\nCopyFrom — in Sketch\nCreateUniqueName — in Assembly\n\nD\n\nDisableInput — in Windows\nDisplayUnits — in Assembly\nDisplayUnits — in Part\nDistanceTo — in Face\nDuplicatePart — in Assembly\nDuplicatePart — in Assembly\nDuplicatePart — in Assembly\nDuplicatePart — in Assembly\nDuplicateSubAssembly — in Assembly\nDuplicateSubAssembly — in Assembly\nDuplicateSubAssembly — in Assembly\nDuplicateSubAssembly — in Assembly\n\nE\n\nEnableInput — in Windows\nErrorDialog — in Windows\nExportBIP — in Assembly\nExportBIP — in Part\nExportIGES — in Assembly\nExportIGES — in Part\nExportRotatedSTL — in Part\nExportSAT — in Assembly\nExportSAT — in Part\nExportSTEP203 — in Assembly\nExportSTEP203 — in Part\nExportSTEP214 — in Assembly\nExportSTEP214 — in Part\nExportSTL — in Assembly\nExportSTL — in Part\nExportSVG — in Sketch\nExportSVG — in Sketch\nExportSVG — in Sketch\n\nF\n\nFindIntersection — in Polyline\nFindIntersection — in Polyline\nFindIntersectionWithCircle — in Polyline\nFromXml — in Sketch\nFromXml — in Sketch3D\n\nG\n\nGet3DSketch — in Part\nGetActiveConfiguration — in Assembly\nGetActiveConfiguration — in GlobalParameters\nGetActiveConfiguration — in Part\nGetAdjoiningFaces — in Face\nGetArea — in Face\nGetAssembly — in AssembledPart\nGetAssemblyBoundingBox — in AssembledPart\nGetAssemblyVertices — in AssembledPart\nGetAxis — in Assembly\nGetAxis — in Part\nGetBoundingBox — in Part\nGetConfiguration — in AssembledPart\nGetConfiguration — in AssembledSubAssembly\nGetConfiguration — in Assembly\nGetConfiguration — in GlobalParameters\nGetConfiguration — in Part\nGetCoordinates — in Point\nGetCustomProperty — in Assembly\nGetCustomProperty — in Part\nGetDisplayedForm — in Windows\nGetEdge — in AssembledPart\nGetEdge — in Part\nGetEdges — in AssembledPart\nGetEdges — in Face\nGetEdges — in Part\nGetFace — in AssembledPart\nGetFace — in Part\nGetFaces — in AssembledPart\nGetFaces — in Part\nGetFeature — in Part\nGetInputValue — in Windows\nGetMappedOccurrence — in AssembledPart\nGetMappedOccurrence — in AssembledSubAssembly\nGetNormalAt — in Bspline\nGetNormalAt — in Bspline3D\nGetOccurrence — in IAxis\nGetOccurrence — in IPlane\nGetOccurrence — in IPoint\nGetParameter — in Assembly\nGetParameter — in GlobalParameters\nGetParameter — in Part\nGetPart — in Assembly\nGetPart — in Axis\nGetPart — in Edge\nGetPart — in Face\nGetPart — in Plane\nGetPart — in Point\nGetPart — in Sketch\nGetPart — in Sketch3D\nGetPart — in Vertex\nGetPartOrientation — in Assembly\nGetPartOrientation — in Assembly\nGetPerpendicularVector — in ThreeD\nGetPerpendicularVector — in TwoD\nGetPlane — in Assembly\nGetPlane — in Part\nGetPoint — in Assembly\nGetPoint — in Part\nGetPointAt — in Bspline\nGetPointAt — in Bspline3D\nGetSelectionAssembly — in AssembledSubAssembly\nGetSelectionAssembly — in Axis\nGetSelectionAssembly — in Edge\nGetSelectionAssembly — in Face\nGetSelectionAssembly — in Part\nGetSelectionAssembly — in Plane\nGetSelectionAssembly — in Point\nGetSelectionAssembly — in Sketch\nGetSelectionAssembly — in Sketch3D\nGetSelectionAssembly — in Vertex\nGetSketch — in Part\nGetSubAssembly — in Assembly\nGetSurface — in Sketch\nGetUserData — in Assembly\nGetUserData — in Part\nGetVertex — in Part\nGetVertices — in Edge\nGetVertices — in Face\nGetVertices — in Part\nGetX — in Bspline\nGetX — in Bspline3D\nGetY — in Bspline\nGetY — in Bspline3D\nGetZ — in Bspline3D\nGlobaltoPoint — in Sketch\n\nH\n\nHide — in Axis\nHide — in Plane\nHide — in Point\nHideFeature — in Part\nHideFeature — in Part\nHidePart — in Assembly\nHidePart — in Assembly\nHideSubAssembly — in Assembly\n\nI\n\nImportSVG — in Sketch\nImportSVG — in Sketch\nInfoDialog — in Windows\nInsertPoint — in Polyline\nInsertPoint — in Polyline3D\nIsOpen — in Part\nIsParallel — in Face\nIsParallel — in Plane\nIsPointOnLine — in Polyline\nIsPointOnLine — in Polyline3D\nIsRectangle — in Face\n\nJ\n\nJoin — in Polyline\nJoin — in Polyline3D\n\nL\n\nLoadXml — in Sketch\nLoadXml — in Sketch3D\nLockAll — in Configuration\n\nM\n\nMovePart — in Assembly\nMovePart — in Assembly\nMoveParts — in Assembly\nMoveSubAssemblies — in Assembly\nMoveSubAssembly — in Assembly\nMoveSubAssembly — in Assembly\n\nN\n\nNonUniformScale — in Part\nNormalizeVector — in TwoD\n\nO\n\nOffset — in Polyline\nOffset — in Polyline3D\nOffset — in PolylinePoint\nOffset — in PolylinePoint3D\nOpenFileDialog — in Windows\nOptionsDialog — in Windows\nOptionsDialog — in Windows\n\nP\n\nPartPointtoAssemblyPoint — in AssembledPart\nPauseUpdating — in Assembly\nPauseUpdating — in Part\nPointObject — in IPoint\nPointtoGlobal — in Sketch\n\nQ\n\nQuestionDialog — in Windows\n\nR\n\nRegenerate — in Assembly\nRegenerate — in Part\nRemoveDuplicates — in Polyline\nRemoveDuplicates — in Polyline3D\nRemoveFeature — in Part\nRemoveFeature — in Part\nRemovePlane — in Part\nRemovePoint — in Part\nRemoveSketch — in Part\nRemoveSketch — in Part\nResumeUpdating — in Assembly\nResumeUpdating — in Part\nRotatePart — in Assembly\nRotatePart — in Assembly\nRotateParts — in Assembly\nRotatePoint — in TwoD\nRotateSubAssemblies — in Assembly\nRotateSubAssembly — in Assembly\nRotateSubAssembly — in Assembly\nRotateSubAssembly — in Assembly\nRotateZ — in Polyline\nRotateZ — in PolylinePoint\nRun — in CSharp\nRun — in CSharp\n\nS\n\nSave — in Assembly\nSave — in Assembly\nSave — in GlobalParameters\nSave — in GlobalParameters\nSave — in Part\nSave — in Part\nSaveAll — in Assembly\nSaveAs — in Assembly\nSaveAs — in GlobalParameters\nSaveAs — in Part\nSaveFileDialog — in Windows\nSaveSnapshot — in Assembly\nSaveSnapshot — in Part\nSaveThumbnail — in Assembly\nSaveThumbnail — in Part\nSavetoXml — in Sketch\nSavetoXml — in Sketch3D\nScale — in Part\nScale — in PolylinePoint\nScale — in PolylinePoint3D\nSelect — in Part\nSelect — in Part\nSelectFolderDialog — in Windows\nSetColor — in Feature\nSetColor — in Part\nSetCustomProperty — in Assembly\nSetCustomProperty — in Part\nSetInputValue — in Windows\nSetLocks — in Configuration\nSetStringList — in Windows\nSetUserData — in Assembly\nSetUserData — in Part\nShow — in Axis\nShow — in Plane\nShow — in Point\nShowFeature — in Part\nShowFeature — in Part\nShowPart — in Assembly\nShowPart — in Assembly\nShowSubAssembly — in Assembly\nSplitAtPoint — in Polyline\nSplitAtPoint — in Polyline3D\nStartFaceMapping — in Sketch\nStartFaceMapping — in Sketch\nStartMapping — in Sketch\nStopFaceMapping — in Sketch\nStopMapping — in Sketch\nSubdivide — in Bspline\nSubdivide — in Bspline3D\nSubdivideGetNormals — in Bspline3D\nSuppressFeature — in Part\nSuppressFeature — in Part\nSuppressPart — in Assembly\nSuppressPart — in Assembly\nSuppressSubAssembly — in Assembly\n\nT\n\nToXml — in Sketch\nToXml — in Sketch3D\nTransformPointUsingVectors — in ThreeD\n\nU\n\nUnanchorPart — in Assembly\nUnanchorPart — in Assembly\nUnanchorSubAssembly — in Assembly\nUnlockAll — in Configuration\nUnsuppressFeature — in Part\nUnsuppressFeature — in Part\nUnsuppressPart — in Assembly\nUnsuppressPart — in Assembly\nUnsuppressSubAssembly — in Assembly\nUtilityDialog — in Windows\nUtilityDialog — in Windows\n\n\n⬆ Back to Top"},"Namespaces":{"slug":"Namespaces","filePath":"Namespaces.md","title":"Namespaces","links":["Home","Classes","Methods-Index","Properties-Index","Members-Index","Assembly","AssembledPart","AssembledSubAssembly","Part","Feature","Sketch","Sketch3D","SketchPoint","SketchPoint3D","TwoD","ThreeD","Line","Line3D","Circle","CircularArc","CircularArc3D","Ellipse","EllipticalArc","Polyline","Polyline3D","Bspline","Bspline3D","Point","Axis","Plane","Edge","Face","Vertex","Configuration","GlobalParameters","Parameter","ParameterTypes","ParameterUnits","UnitTypes","LockTypes","Windows","WindowsInputTypes","CSharp","GuideCurveTypes","IAxis","IPlane","IPoint","Assembly.ConstraintBoundsType","CircularArc.ArcType","CircularArc3D.ArcType","Part.DirectionType","Part.EndCondition","Part.FileTypes","Sketch.Constraints"],"tags":[],"content":"Namespaces\nHome | Classes | Methods | Properties | Members\nNamespace organization of the AlibreScript API\nAlibreScript.API\nPrimary namespace containing all AlibreScript API types and interfaces\nAssembly &amp; Part Types\n\nAssembly — Main assembly operations and management\nAssembledPart — Individual parts within assemblies\nAssembledSubAssembly — Sub-assembly handling\nPart — Core part creation and manipulation\nFeature — Part features and operations\n\nSketching &amp; Drawing Types\n\nSketch — 2D sketching operations\nSketch3D — 3D sketching functionality\nSketchPoint / SketchPoint3D — Point handling\nTwoD / ThreeD — Dimension operations\n\nGeometry Types\n\nLine / Line3D — Line creation and manipulation\nCircle — Circle operations\nCircularArc / CircularArc3D — Arc handling\nEllipse / EllipticalArc — Ellipse operations\nPolyline / Polyline3D — Multi-segment lines\nBspline / Bspline3D — B-spline curves\n\n🧩 Core Geometric Elements\n\nPoint — Point operations\nAxis — Axis definitions\nPlane — Plane operations\nEdge — Edge handling\nFace — Face operations\nVertex — Vertex operations\n\nConfiguration &amp; Parameter Types\n\nConfiguration — Configuration management\nGlobalParameters — Global parameter handling\nParameter — Individual parameters\nParameterTypes — Parameter type definitions\nParameterUnits — Parameter unit definitions\nUnitTypes — Supported unit types\nLockTypes — Configuration lock types\n\nUtility &amp; System Types\n\nWindows — Window operations\nWindowsInputTypes — Windows input type definitions\nCSharp — C# integration utilities\nGuideCurveTypes — Guide curve type definitions\n\nInterfaces\n\nIAxis — Axis interface definition\nIPlane — Plane interface definition\nIPoint — Point interface definition\n\nNested Namespaces\nAlibreScript.API.Assembly\n\nAssembly.ConstraintBoundsType — Assembly constraint boundary definitions\n\nAlibreScript.API.CircularArc\n\nCircularArc.ArcType — 2D circular arc type definitions\n\nAlibreScript.API.CircularArc3D\n\nCircularArc3D.ArcType — 3D circular arc type definitions\n\nAlibreScript.API.Part\n\nPart.DirectionType — Direction type definitions\nPart.EndCondition — End condition definitions\nPart.FileTypes — File type definitions\n\nAlibreScript.API.Sketch\n\nSketch.Constraints — Sketch constraint management\n\n\n** Navigation:** Home |  Classes |  Methods |  Properties\nAlibreScript.API.Assembly\n\nAssembly.ConstraintBoundsType — Assembly constraint bounds types\n\nAlibreScript.API.CircularArc\n\nCircularArc.ArcType — Types of circular arcs\n\nAlibreScript.API.CircularArc3D\n\nCircularArc3D.ArcType — Types of circular arcs\n\nAlibreScript.API.Part\n\nPart.DirectionType — Extrusion directions - extrude along…\nPart.EndCondition — Extrusion end conditions - extrude until…\nPart.FileTypes — Supported file types\n\nAlibreScript.API.Sketch\n\nSketch.Constraints — Sketch constraint management\n\n\n** Navigation:** Home |  Classes |  Methods |  Properties\n⬆ Back to Top"},"Parameter":{"slug":"Parameter","filePath":"Parameter.md","title":"Parameter","links":["Home","Classes","Methods-Index","Properties-Index","Members-Index","GlobalParameters","ParameterTypes","ParameterUnits","Configuration","Part","Assembly"],"tags":[],"content":"Parameter\nHome | Classes | Methods | Properties | Members\n** Location:**Configuration &amp; Parameters Parameter\nNamespace: AlibreScript.API | Kind: Class\nThe Parameter class provides functionality for managing individual parameters including equations, units, Excel linkages, and parameter relationships.\nRelated Classes\n\nGlobalParameters - Parameter collections\nParameterTypes - Parameter type definitions\nParameterUnits - Unit definitions\nConfiguration - Parameter configurations\nPart, Assembly - Use parameters\n\nQuick Navigation\n\nProperties - Parameter attributes and linkages\nMethods - Parameter operations\n\nProperties\nComment\nType: Object\r\nComment for the parameter\nEquation\nType: Object\r\nEquation of the parameter\nExcelCell\nType: Object\r\nExcel cell associated with the parameter, e.g. ‘B3’\nExcelSheet\nType: Object\r\nExcel sheet associated with the parameter, e.g. ‘Sheet1’\nExcelWorkbook\nType: Object\r\nExcel workbook associated with the parameter e.g. ‘Foo.xlsx’\nName\nType: Object\r\nName of the parameter\nRawValue\nType: Object\r\nRaw value of the parameter\nType\nType: Object\r\nType of the parameter\nUnits\nType: Object\r\nCurrent units of the parameter\nValue\nType: Object\r\nCurrent value of the parameter in script units (for mm, cm, in), or degrees for angles, or raw value for other units\nMethods\nAttachToExcel\nAttaches the parameter to a cell in an Ezcel spreadsheet\ndef AttachToExcel(document, sheet, cell, units):\n&quot;&quot;&quot;\nAttaches the parameter to a cell in an Ezcel spreadsheet\n \nArgs:\ndocument (str): Path and name of Excel spreadsheet\nsheet (str): Name of sheet to use\ncell (str): Cell to use\nunits (UnitTypes): Units used in the cell\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"ParameterTypes":{"slug":"ParameterTypes","filePath":"ParameterTypes.md","title":"ParameterTypes","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"ParameterTypes\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nType of parameter\n\n⬆ Back to Top"},"ParameterUnits":{"slug":"ParameterUnits","filePath":"ParameterUnits.md","title":"ParameterUnits","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"ParameterUnits\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nUnits of parameters\n\n⬆ Back to Top"},"Part.DirectionType":{"slug":"Part.DirectionType","filePath":"Part.DirectionType.md","title":"Part.DirectionType","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"Part.DirectionType\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API.Part\nKind: Class\n\nExtrusion directions - extrude along…\n\n⬆ Back to Top"},"Part.EndCondition":{"slug":"Part.EndCondition","filePath":"Part.EndCondition.md","title":"Part.EndCondition","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"Part.EndCondition\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API.Part\nKind: Class\n\nExtrusion end conditions - extrude until…\n\n⬆ Back to Top"},"Part.FileTypes":{"slug":"Part.FileTypes","filePath":"Part.FileTypes.md","title":"Part.FileTypes","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"Part.FileTypes\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API.Part\nKind: Class\n\nSupported file types\n\n⬆ Back to Top"},"Part":{"slug":"Part","filePath":"Part.md","title":"Part","links":["Home","Classes","Methods-Index","Properties-Index","Assembly","AssembledPart","Feature","Configuration","GlobalParameters"],"tags":[],"content":"Part\nHome | Classes | Methods | Properties\n** Location:**Assembly &amp; Parts Part\nNamespace: AlibreScript.API | Kind: Class\nThe Part class provides comprehensive functionality for creating, manipulating, and managing individual parts within Alibre Design. This class handles part properties, geometry creation, sketching, and file operations.\nPractical Usage\nParts are the foundation of mechanical design. Common scripting applications include:\n\nAutomated part generation from design parameters\nParametric modeling with configurable dimensions\nFeature creation (extrudes, cuts, fillets, chamfers)\nSketch-based geometry for complex shapes\nPart validation and property management\nBatch operations on multiple parts\n\nCommon Coding Patterns\n# Create a new part\npart = Part(&quot;MyPart.AD_PRT&quot;, &quot;C:\\\\MyProject&quot;)\n \n# Add a sketch for the base feature\nbase_sketch = part.AddSketch(&quot;BaseSketch&quot;, part.GetPlane(&quot;XY&quot;))\n \n# Create geometry in the sketch\nbase_sketch.AddRectangle(0, 0, 50, 30, False)\nbase_sketch.AddCircle(25, 15, 5, False) # Center hole\n \n# Create an extrude feature\npart.AddExtrudeBoss(\n&quot;BaseExtrude&quot;, # Feature name\nbase_sketch, # Sketch to extrude\n10.0, # Extrude distance\nPart.EndCondition.Blind, # End condition\n0.0, # Taper angle\nFalse # Not thin wall\n)\n \n# Add a fillet to edges\npart.AddFillet(&quot;EdgeFillet&quot;, [&quot;Edge1&quot;, &quot;Edge2&quot;], 2.0)\n \n# Save the part\npart.Save(&quot;Part creation complete&quot;)\nRelated Classes\n\nAssembly - Contains parts as components\nAssembledPart - Part within an assembly context\nFeature - Part features and operations\nConfiguration - Part configurations\nGlobalParameters - Part parameters\n\nQuick Navigation\n\nProperties - Part properties and metadata\nMethods - Available operations\nSketching Methods - Drawing and sketching\nFeature Methods - Feature operations\nFile Operations - Save, export, import\n\nProperties\nComment\nType: Object\r\nComment property\nConfigurations\nType: Object\r\nList of configurations defined on the part\nCostCenter\nType: Object\r\nCost center property\nCreatedBy\nType: Object\r\nCreated By property\nCreatedDate\nType: Object\r\nCreated Date property\nCreatingApplication\nType: Object\r\nCreating Application property\nDensity\nType: Object\r\nDensity of the part\nDescription\nType: Object\r\nDescription of the part\nDocumentNumber\nType: Object\r\nDocument Number property\nEngineeringApprovalDate\nType: Object\r\nEngineering Approval Date property\nEngineeringApprovedBy\nType: Object\r\nEngineering Approved By property\nEstimatedCost\nType: Object\r\nEstimated Cost property\nExtendedMaterialInformation\nType: Object\r\nMaterial (extended information) property\nFileName\nType: Object\r\nPath and filename of the part\nKeywords\nType: Object\r\nKeywords property\nLastAuthor\nType: Object\r\nLast Author property\nLastUpdateDate\nType: Object\r\nLast Update Date property\nManufacturingApprovedBy\nType: Object\r\nManufacturing Approved By property\nManufacturingApprovedDate\nType: Object\r\nProduct property\nMass\nType: Object\r\nMass of the part\nMaterial\nType: Object\r\nMaterial of the part\nModifiedInformation\nType: Object\r\nModified Information property\nName\nType: Object\r\nName of the part\nNumber\nType: Object\r\nUser-defined number for the part\nOrigin\nType: Object\r\nGets the origin (language independent)\nParameters\nType: Object\r\nList of parameters defined on the part\nProduct\nType: Object\r\nProduct property\nReceivedFrom\nType: Object\r\nReceived From property\nRevision\nType: Object\r\nRevision property\nSelections\nType: Object\r\nGets the currently selected items as [ItemA, ItemB, …]\r\nSupports faces, edges, vertices, planes, axes and points\nStockSize\nType: Object\r\nStock Size property\nSupplier\nType: Object\r\nSupplier property\nTitle\nType: Object\r\nTitle property\nVendor\nType: Object\r\nVendor property\nWebLink\nType: Object\r\nWeb Link property\nXAxis\nType: Object\r\nGets the X-axis (language independent)\nXYPlane\nType: Object\r\nGets the XY-plane (language independent)\nYAxis\nType: Object\r\nGets the Y-axis (language independent)\nYZPlane\nType: Object\r\nGets the YZ-plane (language independent)\nZAxis\nType: Object\r\nGets the Z-axis (language independent)\nZXPlane\nType: Object\r\nGets the ZX-plane (language independent)\nMethods\nPart\nOpens an existing part\nOverload 1:\ndef Part(folder, name):\n&quot;&quot;&quot;\nOpens an existing part\n \nArgs:\nfolder (str): Folder containing part\nname (str): Name of part to open\n \n&quot;&quot;&quot;\nOverload 2:\ndef Part(folder, name, hide_editor):\n&quot;&quot;&quot;\nOpens an existing part, optionally hiding the editor\n \nArgs:\nfolder (str): Folder containing part\nname (str): Name of part to open\nhide_editor (bool): True to hide the editor (only valid if part is not already open)\n \n&quot;&quot;&quot;\nOverload 3:\ndef Part(name):\n&quot;&quot;&quot;\nCreates a new part\n \nArgs:\nname (str): Name of new part\n \n&quot;&quot;&quot;\nOverload 4:\ndef Part(name, create_new):\n&quot;&quot;&quot;\nCreates a new part or accesses an already opened part\n \nArgs:\nname (str): Name of part to create or access\ncreate_new (bool): True to create a new part, false to access an opened part\n \n&quot;&quot;&quot;\nOverload 5:\ndef Part(name, create_new, hide_editor):\n&quot;&quot;&quot;\nCreates a new part or accesses an already opened part, optionally hiding the editor\n \nArgs:\nname (str): Name of part to create or access\ncreate_new (bool): True to create a new part, false to access an opened part\nhide_editor (bool): True to hide the editor (only valid if CreateNew is true)\n \n&quot;&quot;&quot;\nOverload 6:\ndef Part(file_name, type):\n&quot;&quot;&quot;\nOpens or imports an existing file for editing\n \nArgs:\nfile_name (str): Name of file to open\ntype (Part.FileTypes): Type of file (GeomagicDesignPart, STEP, IGES, ThreeDM, SAT, STL_in, STL_cm, STL_mm)\n \n&quot;&quot;&quot;\nOverload 7:\ndef Part(file_name, type, hide_editor):\n&quot;&quot;&quot;\nOpens or imports an existing file for editing, optionally hiding the editor\n \nArgs:\nfile_name (str): Name of file to open\ntype (Part.FileTypes): Type of file (GeomagicDesignPart, STEP, IGES, ThreeDM, SAT, STL_in, STL_cm, STL_mm)\nhide_editor (bool): True to hide the editor\n \n&quot;&quot;&quot;\nAdd3DSketch\nCreates a new 3D sketch\ndef Add3DSketch(name):\n&quot;&quot;&quot;\nCreates a new 3D sketch\n \nArgs:\nname (str): Name of sketch\n \nReturns:\nCreated sketch\n \n&quot;&quot;&quot;\nAddAxis\nCreates an axis based on the intersection of two planes/faces\nOverload 1:\ndef AddAxis(name, plane1, plane2):\n&quot;&quot;&quot;\nCreates an axis based on the intersection of two planes/faces\n \nArgs:\nname (str): Name of axis\nplane1 (ISketchSurface): First plane/face\nplane2 (ISketchSurface): Second plane/face\n \nReturns:\nNew Axis\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddAxis(name, point_a, point_b):\n&quot;&quot;&quot;\nCreates an axis based on two points\n \nArgs:\nname (str): Name of axis\npoint_a (Point): First point object\npoint_b (Point): Second point object\n \nReturns:\nNew axis\n \n&quot;&quot;&quot;\nOverload 3:\ndef AddAxis(name, cylindrical_face):\n&quot;&quot;&quot;\nCreates an axis for a cylindrical face\n \nArgs:\nname (str): Name of axis\ncylindrical_face (Face): Cylindrical face\n \nReturns:\nNew axis\n \n&quot;&quot;&quot;\nOverload 4:\ndef AddAxis(name, point1, point2):\n&quot;&quot;&quot;\nCreates an axis based on two points\n \nArgs:\nname (str): Name of axis\npoint1 (list): First point [X, Y, Z]\npoint2 (list): Second point [X, Y, Z]\n \nReturns:\nNew axis\n \n&quot;&quot;&quot;\nAddChamfer\nAdds a chamfer to a face or edge\nOverload 1:\ndef AddChamfer(name, item, distance1, distance2, tangent_propagate):\n&quot;&quot;&quot;\nAdds a chamfer to a face or edge\n \nArgs:\nname (str): Name of chamfer\nitem (IChamferable): Face or edge to chamfer\ndistance1 (float): First chamfer distance\ndistance2 (float): Second chamfer distance\ntangent_propagate (bool): True to propagate the chamfer along connected edges\n \nReturns:\nChamfer feature\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddChamfer(name, items, distance1, distance2, tangent_propagate):\n&quot;&quot;&quot;\nAdds a chamfer to a set of faces and edges\n \nArgs:\nname (str): Name of chamfer\nitems (list): Faces and edges to chamfer\ndistance1 (float): First chamfer distance\ndistance2 (float): Second chamfer distance\ntangent_propagate (bool): True to propagate the chamfer along connected edges\n \nReturns:\nChamfer feature\n \n&quot;&quot;&quot;\nOverload 3:\ndef AddChamfer(name, item, distance, tangent_propagate):\n&quot;&quot;&quot;\nAdds a chamfer to a face or edge\n \nArgs:\nname (str): Name of chamfer\nitem (IChamferable): Face or edge to chamfer\ndistance (float): Chamfer distance\ntangent_propagate (bool): True to propagate the chamfer along connected edges\n \nReturns:\nChamfer feature\n \n&quot;&quot;&quot;\nOverload 4:\ndef AddChamfer(name, items, distance, tangent_propagate):\n&quot;&quot;&quot;\nAdds a chamfer to a set of faces and edges\n \nArgs:\nname (str): Name of chamfer\nitems (list): Faces and edges to chamfer\ndistance (float): Chamfer distance\ntangent_propagate (bool): True to propagate the chamfer along connected edges\n \nReturns:\nChamfer feature\n \n&quot;&quot;&quot;\nAddChamferAngle\nAdds a chamfer to a face or edge\nOverload 1:\ndef AddChamferAngle(name, item, distance, angle, tangent_propagate):\n&quot;&quot;&quot;\nAdds a chamfer to a face or edge\n \nArgs:\nname (str): Name of chamfer\nitem (IChamferable): Face or edge to chamfer\ndistance (float): Chamfer distance\nangle (float): Chamfer angle\ntangent_propagate (bool): True to propagate the chamfer along connected edges\n \nReturns:\nChamfer feature\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddChamferAngle(name, items, distance, angle, tangent_propagate):\n&quot;&quot;&quot;\nAdds a chamfer to a set of faces and edges\n \nArgs:\nname (str): Name of chamfer\nitems (list): Faces and edges to chamfer\ndistance (float): Chamfer distance\nangle (float): Chamfer angle\ntangent_propagate (bool): True to propagate the chamfer along connected edges\n \nReturns:\nChamfer feature\n \n&quot;&quot;&quot;\nAddConfiguration\nAdds a configuration to the part\nOverload 1:\ndef AddConfiguration(name):\n&quot;&quot;&quot;\nAdds a configuration to the part\n \nArgs:\nname (str): Name of configuration\n \nReturns:\nNew configuration\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddConfiguration(name, base_configuration_name):\n&quot;&quot;&quot;\nAdds a configuration to the part using another configuration as a base\n \nArgs:\nname (str): Name of configuration\nbase_configuration_name (str): Name of base configuration to use\n \nReturns:\nNew configuration\n \n&quot;&quot;&quot;\nAddExtrudeBoss\nAdds a simple extrude boss to a specific depth\nOverload 1:\ndef AddExtrudeBoss(name, sketch, depth, is_reversed):\n&quot;&quot;&quot;\nAdds a simple extrude boss to a specific depth\n \nArgs:\nname (str): Name of extrusion\nsketch (Sketch): Sketch to extrude\ndepth (float): Extrusion distance\nis_reversed (bool): True if extrusion direction is reversed\n \nReturns:\nExtruded feature\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddExtrudeBoss(name, sketch, depth, is_reversed, end_condition, end_plane, end_offset, direction, sweep_path, draft_angle, outward_draft):\n&quot;&quot;&quot;\nAdds an extrude feature\n \nArgs:\nname (str): Name of extrusion\nsketch (Sketch): Sketch to extrude\ndepth (float): Depth of extrusion\nis_reversed (bool): true if direction is reversed\nend_condition (Part.EndCondition): End condition for extrusion\nend_plane (ISketchSurface): Face or plane to terminate extrusion\nend_offset (float): Offset from face or plane to terminate extrusion\ndirection (Part.DirectionType): Direction of extrusion\nsweep_path (ISweepPath): Sketch or edge to follow when extruding\ndraft_angle (float): Angle of draft\noutward_draft (bool): true if outward draft\n \nReturns:\nExtruded feature\n \n&quot;&quot;&quot;\nAddExtrudeCut\nAdds a simple extrude cut to a specific depth\nOverload 1:\ndef AddExtrudeCut(name, sketch, depth, is_reversed):\n&quot;&quot;&quot;\nAdds a simple extrude cut to a specific depth\n \nArgs:\nname (str): Name of extrusion\nsketch (Sketch): Sketch to extrude\ndepth (float): Extrusion distance\nis_reversed (bool): True if extrusion direction is reversed\n \nReturns:\nExtruded feature\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddExtrudeCut(name, sketch, depth, is_reversed, end_condition, end_plane, end_offset, direction, sweep_path, draft_angle, outward_draft):\n&quot;&quot;&quot;\nAdds an extrude cut feature\n \nArgs:\nname (str): Name of extrusion\nsketch (Sketch): Sketch to extrude\ndepth (float): Depth of extrusion\nis_reversed (bool): true if direction is reversed\nend_condition (Part.EndCondition): End condition for extrusion\nend_plane (ISketchSurface): Face or plane to terminate extrusion\nend_offset (float): Offset from face or plane to terminate extrusion\ndirection (Part.DirectionType): Direction of extrusion\nsweep_path (ISweepPath): Sketch or edge to follow when extruding\ndraft_angle (float): Angle of draft\noutward_draft (bool): true if outward draft\n \nReturns:\nExtruded feature\n \n&quot;&quot;&quot;\nAddFillet\nAdds a constant radius fillet to a face or edge\nOverload 1:\ndef AddFillet(name, item, radius, tangent_propagate):\n&quot;&quot;&quot;\nAdds a constant radius fillet to a face or edge\n \nArgs:\nname (str): Name of fillet\nitem (IFilletable): Face or edge to fillet\nradius (float): Radius of fillet\ntangent_propagate (bool): True to propagate the fillet along connected edges\n \nReturns:\nFillet feature\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddFillet(name, items, radius, tangent_propagate):\n&quot;&quot;&quot;\nAdds a constant radius fillet to a set of faces and edges\n \nArgs:\nname (str): Name of fillet\nitems (list): Faces and edges to fillet\nradius (float): Radius of fillet\ntangent_propagate (bool): True to propagate the fillet along connected edges\n \nReturns:\nFillet feature\n \n&quot;&quot;&quot;\nOverload 3:\ndef AddFillet(name, items, start_radii, end_radii, tangent_propagate):\n&quot;&quot;&quot;\nAdds a variable radius fillet to a set of faces and edges\n \nArgs:\nname (str): Name of fillet\nitems (list): Faces and edges to fillet\nstart_radii (list): Start radii of fillets\nend_radii (list): End radii of fillets\ntangent_propagate (bool): True to propagate the fillet along connected edges\n \nReturns:\nFillet feature\n \n&quot;&quot;&quot;\nAddGear\nAdds a gear sketch to the part\ndef AddGear(name, numberof_teeth, pitch_diameter, pressure_angle, diametral_pitch, single_tooth, center_x, center_y, involute_points, plane):\n&quot;&quot;&quot;\nAdds a gear sketch to the part\n \nArgs:\nname (str): Name of gear sketch\nnumberof_teeth (float): Number of teeth\npitch_diameter (int): Diameter of pitch circle in current units\npressure_angle (float): Pressure angle (14.5 is typical)\ndiametral_pitch (float): Diametral angle (tooth size) (25.4/module) in teeth per inch\nsingle_tooth (bool): true to create only a single tooth profile\ncenter_x (float): X-coordinate of gear center\ncenter_y (float): Y-coordinate of gear center\ninvolute_points (int): Number of points for involute curve. Decreasing this makes Cubify/Geomagic faster. Increasing makes tooth profiles more accurate and allows gears with more teeth to be generated.\nplane (ISketchSurface): Plane or face to create gear sketch on\n \nReturns:\nGear sketch\n \n&quot;&quot;&quot;\nAddGearDN\nAdds a gear sketch to the part using diametral pitch and number of teeth\nOverload 1:\ndef AddGearDN(name, numberof_teeth, pressure_angle, diametral_pitch, center_x, center_y, plane):\n&quot;&quot;&quot;\nAdds a gear sketch to the part using diametral pitch and number of teeth\n \nArgs:\nname (str): Name of gear sketch\nnumberof_teeth (float): Number of teeth\npressure_angle (int): Pressure angle (14.5 is typical)\ndiametral_pitch (float): Diametral angle (tooth size) (1/module)\ncenter_x (float): X-coordinate of center of gear\ncenter_y (float): Y-coordinate of center of gear\nplane (ISketchSurface): Plane or face to create gear sketch on\n \nReturns:\nGear sketch\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddGearDN(name, numberof_teeth, pressure_angle, diametral_pitch, center_x, center_y, single_tooth, plane):\n&quot;&quot;&quot;\nAdds a gear sketch to the part using diametral pitch and number of teeth\n \nArgs:\nname (str): Name of gear sketch\nnumberof_teeth (float): Number of teeth\npressure_angle (int): Pressure angle (14.5 is typical)\ndiametral_pitch (float): Diametral angle (tooth size) (1/module)\ncenter_x (float): X-coordinate of center of gear\ncenter_y (float): Y-coordinate of center of gear\nsingle_tooth (bool): True to generate a single tooth\nplane (ISketchSurface): Plane or face to create gear sketch on\n \nReturns:\nGear sketch\n \n&quot;&quot;&quot;\nAddGearDP\nAdds a gear sketch to the part using diametral pitch and pitch diameter\nOverload 1:\ndef AddGearDP(name, pitch_diameter, pressure_angle, diametral_pitch, center_x, center_y, plane):\n&quot;&quot;&quot;\nAdds a gear sketch to the part using diametral pitch and pitch diameter\n \nArgs:\nname (str): Name of gear sketch\npitch_diameter (float): Diameter of pitch circle\npressure_angle (float): Pressure angle (14.5 is typical)\ndiametral_pitch (float): Diametral angle (tooth size) (1/module)\ncenter_x (float): X-coordinate of center of gear\ncenter_y (float): Y-coordinate of center of gear\nplane (ISketchSurface): Plane or face to create gear sketch on\n \nReturns:\nGear sketch\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddGearDP(name, pitch_diameter, pressure_angle, diametral_pitch, center_x, center_y, single_tooth, plane):\n&quot;&quot;&quot;\nAdds a gear sketch to the part using diametral pitch and pitch diameter\n \nArgs:\nname (str): Name of gear sketch\npitch_diameter (float): Diameter of pitch circle\npressure_angle (float): Pressure angle (14.5 is typical)\ndiametral_pitch (float): Diametral angle (tooth size) (1/module)\ncenter_x (float): X-coordinate of center of gear\ncenter_y (float): Y-coordinate of center of gear\nsingle_tooth (bool): True to generate a single tooth\nplane (ISketchSurface): Plane or face to create gear sketch on\n \nReturns:\nGear sketch\n \n&quot;&quot;&quot;\nAddGearNP\nAdds a gear sketch to the part using number of teeth and pitch diameter\nOverload 1:\ndef AddGearNP(name, numberof_teeth, pitch_diameter, pressure_angle, center_x, center_y, plane):\n&quot;&quot;&quot;\nAdds a gear sketch to the part using number of teeth and pitch diameter\n \nArgs:\nname (str): Name of gear sketch\nnumberof_teeth (int): Number of teeth\npitch_diameter (float): Diameter of pitch circle\npressure_angle (float): Pressure angle (14.5 is typical)\ncenter_x (float): X-coordinate of center of gear\ncenter_y (float): Y-coordinate of center of gear\nplane (ISketchSurface): Plane or face to create gear sketch on\n \nReturns:\nGear sketch\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddGearNP(name, numberof_teeth, pitch_diameter, pressure_angle, center_x, center_y, single_tooth, plane):\n&quot;&quot;&quot;\nAdds a gear sketch to the part using number of teeth and pitch diameter\n \nArgs:\nname (str): Name of gear sketch\nnumberof_teeth (int): Number of teeth\npitch_diameter (float): Diameter of pitch circle\npressure_angle (float): Pressure angle (14.5 is typical)\ncenter_x (float): X-coordinate of center of gear\ncenter_y (float): Y-coordinate of center of gear\nsingle_tooth (bool): True to generate a single tooth\nplane (ISketchSurface): Plane or face to create gear sketch on\n \nReturns:\nGear sketch\n \n&quot;&quot;&quot;\nAddLoftBoss\nAdds a loft extrusion\nOverload 1:\ndef AddLoftBoss(name, cross_sections, minimize_twist, minimize_curvature, simplify_surface, connect_ends):\n&quot;&quot;&quot;\nAdds a loft extrusion\n \nArgs:\nname (str): Name of loft\ncross_sections (list): Python list of cross sections (faces, 2D sketches, design points)\nminimize_twist (bool): True to minimize twist\nminimize_curvature (bool): True to minimize curvature\nsimplify_surface (bool): True to simplify the loft surface\nconnect_ends (bool): True to connect the start of the loft with the end\n \nReturns:\nExtruded feature\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddLoftBoss(name, cross_sections, guide_curves, guide_type, minimize_twist, minimize_curvature, simplify_surface, connect_ends):\n&quot;&quot;&quot;\nAdds a loft extrusion using guide curves\n \nArgs:\nname (str): Name of loft\ncross_sections (list): Python list of cross sections (faces, 2D sketches, design points)\nguide_curves (list): Python list of guide curves (3D sketches)\nguide_type (GuideCurveTypes): Type of guide curve\nminimize_twist (bool): True to minimize twist\nminimize_curvature (bool): True to minimize curvature\nsimplify_surface (bool): True to simplify the loft surface\nconnect_ends (bool): True to connect the start of the loft with the end\n \nReturns:\nExtruded feature\n \n&quot;&quot;&quot;\nAddLoftCut\nAdds a loft cut\nOverload 1:\ndef AddLoftCut(name, cross_sections, minimize_twist, minimize_curvature, simplify_surface, connect_ends):\n&quot;&quot;&quot;\nAdds a loft cut\n \nArgs:\nname (str): Name of loft\ncross_sections (list): Python list of cross sections (faces, 2D sketches, design points)\nminimize_twist (bool): True to minimize twist\nminimize_curvature (bool): True to minimize curvature\nsimplify_surface (bool): True to simplify the loft surface\nconnect_ends (bool): True to connect the start of the loft with the end\n \nReturns:\nCut feature\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddLoftCut(name, cross_sections, guide_curves, guide_type, minimize_twist, minimize_curvature, simplify_surface, connect_ends):\n&quot;&quot;&quot;\nAdds a loft cut using guide curves\n \nArgs:\nname (str): Name of loft\ncross_sections (list): Python list of cross sections (faces, 2D sketches, design points)\nguide_curves (list): Python list of guide curves (3D sketches)\nguide_type (GuideCurveTypes): Type of guide curve\nminimize_twist (bool): True to minimize twist\nminimize_curvature (bool): True to minimize curvature\nsimplify_surface (bool): True to simplify the loft surface\nconnect_ends (bool): True to connect the start of the loft with the end\n \nReturns:\nExtruded feature\n \n&quot;&quot;&quot;\nAddParameter\nAdds a cm/mm/in/deg parameter to the part\nOverload 1:\ndef AddParameter(name, type, value):\n&quot;&quot;&quot;\nAdds a cm/mm/in/deg parameter to the part\n \nArgs:\nname (str): Name of parameter\ntype (ParameterTypes): Type of parameter\nvalue (float): Value for parameter\n \nReturns:\nNew parameter\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddParameter(name, type, unitsto_use, value):\n&quot;&quot;&quot;\nAdds a parameter to the part with specific units\n \nArgs:\nname (str): Name of parameter\ntype (ParameterTypes): Type of parameter\nunitsto_use (ParameterUnits): Units to use\nvalue (float): Value for parameter\n \nReturns:\nNew parameter\n \n&quot;&quot;&quot;\nOverload 3:\ndef AddParameter(name, type, equation):\n&quot;&quot;&quot;\nAdds a parameter to the part\n \nArgs:\nname (str): Name of parameter\ntype (ParameterTypes): Type of parameter\nequation (str): Equation for parameter\n \nReturns:\nNew parameter\n \n&quot;&quot;&quot;\nAddPlane\nCreates a plane based on the offset from an existing plane\nOverload 1:\ndef AddPlane(name, source_plane, offset):\n&quot;&quot;&quot;\nCreates a plane based on the offset from an existing plane\n \nArgs:\nname (str): Name of plane\nsource_plane (ISketchSurface): Plane/face to use as basis\noffset (float): Offset from basis plane in currently chosen units\n \nReturns:\nCreated plane\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddPlane(name, normal_vector, pointon_plane):\n&quot;&quot;&quot;\nAdds a plane using a normal vector and a point on the plane\n \nArgs:\nname (str): Name of plane to add\nnormal_vector (list): Normal vector as a list [nx, ny, nz]. Does not need to be a unit vector\npointon_plane (list): A point on the plane as a list [px, py, pz]\n \nReturns:\nCreated plane\n \n&quot;&quot;&quot;\nOverload 3:\ndef AddPlane(name, axis, point):\n&quot;&quot;&quot;\nCreates a new plane contaning an axis and a point\n \nArgs:\nname (str): Name of new plane\naxis (Axis): Axis that lies on plane\npoint (Point): Point that lies on plane\n \nReturns:\nNew plane\n \n&quot;&quot;&quot;\nOverload 4:\ndef AddPlane(name, source_plane, rotation_axis, angle):\n&quot;&quot;&quot;\nCreates a new plane at an angle to an existing plane\n \nArgs:\nname (str): Name of new plane\nsource_plane (ISketchSurface): Plane/face to use as basis for new plane\nrotation_axis (Axis): Axis of rotation for new plane\nangle (float): Angle of new plane in degrees\n \nReturns:\nNew plane\n \n&quot;&quot;&quot;\nOverload 5:\ndef AddPlane(name, point1, point2, point3):\n&quot;&quot;&quot;\nCreates a plane using three points. Each point is defined as list of [x, y, z]\n \nArgs:\nname (str): Name of plane\npoint1 (list): Point on plane\npoint2 (list): Point on plane\npoint3 (list): Point on plane\n \nReturns:\nCreated plane\n \n&quot;&quot;&quot;\nAddPoint\nAdds a point to the part\nOverload 1:\ndef AddPoint(name, point):\n&quot;&quot;&quot;\nAdds a point to the part\n \nArgs:\nname (str): Name of the new point\npoint (list): Point location [x, y, z]\n \nReturns:\nThe new point\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddPoint(name, point):\n&quot;&quot;&quot;\nAdds a point to the part\n \nArgs:\nname (str): Name of the point\npoint (Point): Point to add\n \n&quot;&quot;&quot;\nOverload 3:\ndef AddPoint(name, x, y, z):\n&quot;&quot;&quot;\nAdds a point to the part\n \nArgs:\nname (str): Name of new point\nx (float): X coordinate\ny (float): Y coordinate\nz (float): Z coordinate\n \nReturns:\nThe new point\n \n&quot;&quot;&quot;\nOverload 4:\ndef AddPoint(name, point_or_vertex, x_offset, y_offset, z_offset):\n&quot;&quot;&quot;\nAdd a point at an offset to a point or a vertex\n \nArgs:\nname (str): Name of point\npoint_or_vertex (IPoint): Point or vertex\nx_offset (float): X offse\ny_offset (float): Y offset\nz_offset (float): Z offset\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nOverload 5:\ndef AddPoint(name, point_or_vertex1, point_or_vertex2, ratio):\n&quot;&quot;&quot;\nAdd a point between two points/vertices\n \nArgs:\nname (str): Name of point\npoint_or_vertex1 (IPoint): First point or vertex\npoint_or_vertex2 (IPoint): Second point or vertex\nratio (float): Ratio of distance between points/vertices\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nOverload 6:\ndef AddPoint(name, axis_or_edge1, axis_or_edge2):\n&quot;&quot;&quot;\nAdd a point at the intersection or two axes or edges\n \nArgs:\nname (str): Name of point\naxis_or_edge1 (IAxis): First axis or edge\naxis_or_edge2 (IAxis): Second axis or edge\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nOverload 7:\ndef AddPoint(name, plane_or_face1, plane_or_face2, plane_or_face3):\n&quot;&quot;&quot;\nAdd a point at the intersection of three planes or faces\n \nArgs:\nname (str): Name of point\nplane_or_face1 (IPlane): First plane or face\nplane_or_face2 (IPlane): Second plane or face\nplane_or_face3 (IPlane): Third plane or face\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nOverload 8:\ndef AddPoint(name, axis_or_edge, plane_or_face):\n&quot;&quot;&quot;\nAdd a point at the the intersection of a axis or edge and a plane or face\n \nArgs:\nname (str): Name of point\naxis_or_edge (IAxis): Axis or edge\nplane_or_face (IPlane): Plane or face\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nOverload 9:\ndef AddPoint(name, source_point_or_vertex, target_plane_or_face, x_offset, y_offset):\n&quot;&quot;&quot;\nAdd a point by projecting a point or vertex onto a plane or face\n \nArgs:\nname (str): Name of point\nsource_point_or_vertex (IPoint): Point or vertex to project\ntarget_plane_or_face (IPlane): Plane or face to project onto\nx_offset (float): X offset to apply to point once projected\ny_offset (float): Y offset to apply to point once projected\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nOverload 10:\ndef AddPoint(name, target_edge, ratio):\n&quot;&quot;&quot;\nAdd a point on an edge\n \nArgs:\nname (str): Name of point\ntarget_edge (Edge): The edge to create the point on\nratio (float): Ratio along the edge from 0.0 -&gt; 1.0\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nAddPointFromCircularEdge\nAdds a point at the center of a circular edge\ndef AddPointFromCircularEdge(name, target_edge):\n&quot;&quot;&quot;\nAdds a point at the center of a circular edge\n \nArgs:\nname (str): Name of point\ntarget_edge (Edge): The edge to use for creating the point\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nAddPointFromToroidalFace\nAdds a point at the center of a toroidal face\ndef AddPointFromToroidalFace(name, target_face):\n&quot;&quot;&quot;\nAdds a point at the center of a toroidal face\n \nArgs:\nname (str): Name of point\ntarget_face (Face): Toroidal face to use in creating the point\n \nReturns:\nThe created point\n \n&quot;&quot;&quot;\nAddPoints\nAdds a set of points to the part\ndef AddPoints(prefix, points):\n&quot;&quot;&quot;\nAdds a set of points to the part\n \nArgs:\nprefix (str): Prefix for the point names\npoints (list): List of points [x1,y1,z1, ..., xn,yn,zn]\n \n&quot;&quot;&quot;\nAddRevolveBoss\nCreates a revolve boss feature\ndef AddRevolveBoss(name, sketch, axis, angle):\n&quot;&quot;&quot;\nCreates a revolve boss feature\n \nArgs:\nname (str): Name of feature\nsketch (Sketch): Sketch to revolve\naxis (Axis): Axis to rotate around\nangle (float): Rotation angle in degrees\n \nReturns:\nCreated feature\n \n&quot;&quot;&quot;\nAddRevolveCut\nCreates a revolve cut feature\ndef AddRevolveCut(name, sketch, axis, angle):\n&quot;&quot;&quot;\nCreates a revolve cut feature\n \nArgs:\nname (str): Name of feature\nsketch (Sketch): Sketch to revolve\naxis (Axis): Axis to rotate around\nangle (float): Rotation angle in degrees\n \nReturns:\nCreated feature\n \n&quot;&quot;&quot;\nAddSketch\nCreates a new sketch using a plane/face\ndef AddSketch(name, plane):\n&quot;&quot;&quot;\nCreates a new sketch using a plane/face\n \nArgs:\nname (str): Name of sketch\nplane (ISketchSurface): Plane/face to use for sketch\n \nReturns:\nCreated sketch\n \n&quot;&quot;&quot;\nAddSweepBoss\nAdds a sweep extrude feature\ndef AddSweepBoss(name, profile_sketch, path_sketch, is_rigid, end_condition, end_plane, end_offset, draft_angle, outward_draft):\n&quot;&quot;&quot;\nAdds a sweep extrude feature\n \nArgs:\nname (str): Name of extrusion\nprofile_sketch (Sketch): Sketch to extrude\npath_sketch (ISweepPath): Sketch or edge to sweep along\nis_rigid (bool): true if path is parallel to profile\nend_condition (Part.EndCondition): End condition for extrusion\nend_plane (ISketchSurface): Face or plane to terminate extrusion\nend_offset (float): Offset from face or plane to terminate extrusion\ndraft_angle (float): Angle of draft\noutward_draft (bool): true if outward draft\n \nReturns:\nExtruded feature\n \n&quot;&quot;&quot;\nAddSweepCut\nAdds a sweep extrude cut feature\ndef AddSweepCut(name, profile_sketch, path_sketch, is_rigid, end_condition, end_plane, end_offset, draft_angle, outward_draft):\n&quot;&quot;&quot;\nAdds a sweep extrude cut feature\n \nArgs:\nname (str): Name of extrusion\nprofile_sketch (Sketch): Sketch to extrude\npath_sketch (ISweepPath): Sketch or edge to sweep along\nis_rigid (bool): true if path is parallel to profile\nend_condition (Part.EndCondition): End condition for extrusion\nend_plane (ISketchSurface): Face or plane to terminate extrusion\nend_offset (float): Offset from face or plane to terminate extrusion\ndraft_angle (float): Angle of draft\noutward_draft (bool): true if outward draft\n \nReturns:\nExtruded feature\n \n&quot;&quot;&quot;\nAddVertexChamfer\nAdds a chamfer to a vertex\nOverload 1:\ndef AddVertexChamfer(name, item, distance1, distance2, distance3):\n&quot;&quot;&quot;\nAdds a chamfer to a vertex\n \nArgs:\nname (str): Name of chamfer\nitem (Vertex): Vertex to chamfer\ndistance1 (float): First chamfer distance\ndistance2 (float): Second chamfer distance\ndistance3 (float): Third chamfer distance\n \nReturns:\nChamfer feature\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddVertexChamfer(name, items, distance1, distance2, distance3):\n&quot;&quot;&quot;\nAdds a chamfer to a set of vertices\n \nArgs:\nname (str): Name of chamfer\nitems (list): Vertices to chamfer\ndistance1 (float): First chamfer distance\ndistance2 (float): Second chamfer distance\ndistance3 (float): Third chamfer distance\n \nReturns:\nChamfer feature\n \n&quot;&quot;&quot;\nExportBIP\nExports a keyshot file\ndef ExportBIP(file_name):\n&quot;&quot;&quot;\nExports a keyshot file\n \nArgs:\nfile_name (str): Path and name of keyshot file\n \n&quot;&quot;&quot;\nExportIGES\nExports the part as a IGES file\ndef ExportIGES(file_name):\n&quot;&quot;&quot;\nExports the part as a IGES file\n \nArgs:\nfile_name (str): Path and name of IGES file\n \n&quot;&quot;&quot;\nExportRotatedSTL\nExports the part as an STL rotated so that a specific face is on the bottom\ndef ExportRotatedSTL(file_name, bottom_face, forceto_millimeters, use_custom_settings, max_cell_size, normal_deviation, surface_deviation):\n&quot;&quot;&quot;\nExports the part as an STL rotated so that a specific face is on the bottom\n \nArgs:\nfile_name (str): Path and name of STL file\nbottom_face (Face): Face to use as bottom of part\nforceto_millimeters (bool): true to output STL in millimeters regardless of part units\nuse_custom_settings (bool): true to use custom STL settings, false to use settings in system properties\nmax_cell_size (float): Custom max cell size\nnormal_deviation (float): Custom normal deviation\nsurface_deviation (float): Custom surface deviation\n \n&quot;&quot;&quot;\nExportSAT\nExports the part as a SAT file\ndef ExportSAT(file_name, version, save_colors):\n&quot;&quot;&quot;\nExports the part as a SAT file\n \nArgs:\nfile_name (str): Path and name of SAT file\nversion (int): Exported SAT file version\nsave_colors (bool): true to preseve colors\n \n&quot;&quot;&quot;\nExportSTEP203\nExports the part as a STEP 203 file\ndef ExportSTEP203(file_name):\n&quot;&quot;&quot;\nExports the part as a STEP 203 file\n \nArgs:\nfile_name (str): Path and name of STEP 203 file\n \n&quot;&quot;&quot;\nExportSTEP214\nExports the part as a STEP 214 file\ndef ExportSTEP214(file_name):\n&quot;&quot;&quot;\nExports the part as a STEP 214 file\n \nArgs:\nfile_name (str): Path and name of STEP 214 file\n \n&quot;&quot;&quot;\nExportSTL\nExports the part as an STL file\ndef ExportSTL(file_name):\n&quot;&quot;&quot;\nExports the part as an STL file\n \nArgs:\nfile_name (str): Path and name of STL file\n \n&quot;&quot;&quot;\nGet3DSketch\nGets a sketch using the name of the sketch\ndef Get3DSketch(name):\n&quot;&quot;&quot;\nGets a sketch using the name of the sketch\n \nArgs:\nname (str): Name of sketch\n \nReturns:\nSketch object\n \n&quot;&quot;&quot;\nGetAxis\nGets an axis from an axis name\ndef GetAxis(name):\n&quot;&quot;&quot;\nGets an axis from an axis name\n \nArgs:\nname (str): Name of axis to find\n \nReturns:\nFound axis\n \n&quot;&quot;&quot;\nGetConfiguration\nGets a configuration with a specific name\ndef GetConfiguration(name):\n&quot;&quot;&quot;\nGets a configuration with a specific name\n \nArgs:\nname (str): Name of confguration\n \nReturns:\nConfiguration object\n \n&quot;&quot;&quot;\nGetCustomProperty\nGets the value of a custonm property\ndef GetCustomProperty(name):\n&quot;&quot;&quot;\nGets the value of a custonm property\n \nArgs:\nname (str): Name of the custom property\n \nReturns:\nThe value of the property as a string\n \n&quot;&quot;&quot;\nGetEdge\nGets an edge using it’s name “Edge”\ndef GetEdge(name):\n&quot;&quot;&quot;\nGets an edge using it&#039;s name &quot;Edge&lt;n&gt;&quot;\n \nArgs:\nname (str): Name of edge\n \nReturns:\nEdge if found\n \n&quot;&quot;&quot;\nGetFace\nGets a face using it’s name “Face”\ndef GetFace(name):\n&quot;&quot;&quot;\nGets a face using it&#039;s name &quot;Face&lt;n&gt;&quot;\n \nArgs:\nname (str): Name of face\n \nReturns:\nFace if found\n \n&quot;&quot;&quot;\nGetFeature\nGets a feature on the part\ndef GetFeature(name):\n&quot;&quot;&quot;\nGets a feature on the part\n \nArgs:\nname (str): Name of the feature to get\n \nReturns:\nThe feature or null if not found\n \n&quot;&quot;&quot;\nGetParameter\nGets a parameter with a specific name\ndef GetParameter(name):\n&quot;&quot;&quot;\nGets a parameter with a specific name\n \nArgs:\nname (str): Name of parameter\n \nReturns:\nParameter object\n \n&quot;&quot;&quot;\nGetPlane\nGets a plane using the name of the plane\ndef GetPlane(name):\n&quot;&quot;&quot;\nGets a plane using the name of the plane\n \nArgs:\nname (str): Name of plane to find\n \nReturns:\nThe plane\n \n&quot;&quot;&quot;\nGetPoint\nGets a point on the part using the point name. The point must have been created in a script\ndef GetPoint(name):\n&quot;&quot;&quot;\nGets a point on the part using the point name. The point must have been created in a script\n \nArgs:\nname (str): Name of point to get\n \nReturns:\nPoint on the part\n \n&quot;&quot;&quot;\nGetSketch\nGets a sketch using the name of the sketch\ndef GetSketch(name):\n&quot;&quot;&quot;\nGets a sketch using the name of the sketch\n \nArgs:\nname (str): Name of sketch\n \nReturns:\nSketch object\n \n&quot;&quot;&quot;\nGetUserData\nGets user data\ndef GetUserData(name):\n&quot;&quot;&quot;\nGets user data\n \nArgs:\nname (str): Name of data to get\n \nReturns:\nData as a python dictionary or None if not found\n \n&quot;&quot;&quot;\nGetVertex\nGets a vertex using it’s name “Vertex”\ndef GetVertex(name):\n&quot;&quot;&quot;\nGets a vertex using it&#039;s name &quot;Vertex&lt;n&gt;&quot;\n \nArgs:\nname (str): Name of vertex\n \nReturns:\nVertex if found\n \n&quot;&quot;&quot;\nHideFeature\nHides a feature on the part\nOverload 1:\ndef HideFeature(name):\n&quot;&quot;&quot;\nHides a feature on the part\n \nArgs:\nname (str): Name of the feature to hide\n \n&quot;&quot;&quot;\nOverload 2:\ndef HideFeature(feature):\n&quot;&quot;&quot;\nHides a feature on the part\n \nArgs:\nfeature (Feature): Feature to hide\n \n&quot;&quot;&quot;\nNonUniformScale\nNon-uniform scaling of the part\ndef NonUniformScale(name, scale_about_center, scale_factor_x, scale_factor_y, scale_factor_z):\n&quot;&quot;&quot;\nNon-uniform scaling of the part\n \nArgs:\nname (str): Name of the scaling\nscale_about_center (bool): true to scale around the center of the part\nscale_factor_x (float): X scale factor\nscale_factor_y (float): Y scale factor\nscale_factor_z (float): Z scale factor\n \nReturns:\nScale feature\n \n&quot;&quot;&quot;\nRemoveFeature\nRemoves a feature from the part\nOverload 1:\ndef RemoveFeature(name):\n&quot;&quot;&quot;\nRemoves a feature from the part\n \nArgs:\nname (str): Name of the feature to remove\n \n&quot;&quot;&quot;\nOverload 2:\ndef RemoveFeature(feature):\n&quot;&quot;&quot;\nRemoves a feature from the part\n \nArgs:\nfeature (Feature): Feature to remove\n \n&quot;&quot;&quot;\nRemovePlane\nRemoves a plane from the part\ndef RemovePlane(plane):\n&quot;&quot;&quot;\nRemoves a plane from the part\n \nArgs:\nplane (Plane): Plane to remove\n \n&quot;&quot;&quot;\nRemovePoint\nRemoves a point from the part\ndef RemovePoint(point):\n&quot;&quot;&quot;\nRemoves a point from the part\n \nArgs:\npoint (Point): Point to remove\n \n&quot;&quot;&quot;\nRemoveSketch\nRemoves a sketch from the part\nOverload 1:\ndef RemoveSketch(name):\n&quot;&quot;&quot;\nRemoves a sketch from the part\n \nArgs:\nname (str): Name of sketch to remove\n \n&quot;&quot;&quot;\nOverload 2:\ndef RemoveSketch(sketch):\n&quot;&quot;&quot;\nRemoves a sketch from the part\n \nArgs:\nsketch (Sketch): Sketch to remove\n \n&quot;&quot;&quot;\nSave\nSaves the part to a specific folder\ndef Save(folder):\n&quot;&quot;&quot;\nSaves the part to a specific folder\n \nArgs:\nfolder (str): Folder to save to\n \n&quot;&quot;&quot;\nSaveAs\nSaves the part to a specific folder with a new name\ndef SaveAs(folder, new_name):\n&quot;&quot;&quot;\nSaves the part to a specific folder with a new name\n \nArgs:\nfolder (str): Folder to save to\nnew_name (str): New name for part\n \n&quot;&quot;&quot;\nSaveSnapshot\nSaves the current view as a bitmap image\ndef SaveSnapshot(file_name, width, height, use_aspect_ratio, use_widthand_height):\n&quot;&quot;&quot;\nSaves the current view as a bitmap image\n \nArgs:\nfile_name (str): Path and name of file to save to\nwidth (int): Width in pixels\nheight (int): Height in pixels\nuse_aspect_ratio (bool): if true uses greater of width/height along with current aspect ratio\nuse_widthand_height (bool): if true uses current width/height of view\n \n&quot;&quot;&quot;\nSaveThumbnail\nSaves a thumbnail image of the part\ndef SaveThumbnail(file_name, width, height):\n&quot;&quot;&quot;\nSaves a thumbnail image of the part\n \nArgs:\nfile_name (str): Path and name of file to save to\nwidth (int): Width of thumbnail in pixels\nheight (int): Height of thumbnail in pixels\n \n&quot;&quot;&quot;\nScale\nUniform scaling of the part\ndef Scale(name, scale_about_center, scale_factor):\n&quot;&quot;&quot;\nUniform scaling of the part\n \nArgs:\nname (str): Name of the scaling\nscale_about_center (bool): true to scale around the center of the part\nscale_factor (float): Scale factor\n \nReturns:\nScale feature\n \n&quot;&quot;&quot;\nSelect\nSelects a face, edge, vertex, point, axis, plane, sketch\nOverload 1:\ndef Select(faceor_edge):\n&quot;&quot;&quot;\nSelects a face, edge, vertex, point, axis, plane, sketch\n \nArgs:\nfaceor_edge (ISelectableGeometry): Face, edge, vertex, point, axis plane or sketch to select\n \n&quot;&quot;&quot;\nOverload 2:\ndef Select(faces_edges_list):\n&quot;&quot;&quot;\nSelects a group of faces, edges, vertices, points, axes, planes and sketches\n \nArgs:\nfaces_edges_list (list): List of Faces, edges, vertices, points, axes, planes and sketches to select [FaceA, FaceB, EdgeA, EdgeB, ...]\n \n&quot;&quot;&quot;\nSetColor\nSets the color of the part\ndef SetColor(red, green, blue):\n&quot;&quot;&quot;\nSets the color of the part\n \nArgs:\nred (byte): Red component 0 - 255\ngreen (byte): Green component 0 - 255\nblue (byte): Blue component 0 - 255\n \n&quot;&quot;&quot;\nSetCustomProperty\nSets the value of a custom property\r\nThe custom property must already be defined on the part or defined on the user’s PC\ndef SetCustomProperty(name, value):\n&quot;&quot;&quot;\nSets the value of a custom property The custom property must already be defined on the part or defined on the user&#039;s PC\n \nArgs:\nname (str): Name of the custom property\nvalue (str): New value for the custom property\n \n&quot;&quot;&quot;\nSetUserData\nSets user data\ndef SetUserData(name, dict):\n&quot;&quot;&quot;\nSets user data\n \nArgs:\nname (str): Data name of the format companyname.projectname.dataname\ndict (IronPython.Runtime.PythonDictionary): Python dictionary of data to store\n \n&quot;&quot;&quot;\nShowFeature\nShows a feature on the part\nOverload 1:\ndef ShowFeature(name):\n&quot;&quot;&quot;\nShows a feature on the part\n \nArgs:\nname (str): Name of the feature to show\n \n&quot;&quot;&quot;\nOverload 2:\ndef ShowFeature(feature):\n&quot;&quot;&quot;\nShows a feature on the part\n \nArgs:\nfeature (Feature): Feature to show\n \n&quot;&quot;&quot;\nSuppressFeature\nSuppresses a feature on the part\nOverload 1:\ndef SuppressFeature(name):\n&quot;&quot;&quot;\nSuppresses a feature on the part\n \nArgs:\nname (str): Name of the feature to suppress\n \n&quot;&quot;&quot;\nOverload 2:\ndef SuppressFeature(feature):\n&quot;&quot;&quot;\nSuppresses a feature on the part\n \nArgs:\nfeature (Feature): Feature to suppress\n \n&quot;&quot;&quot;\nUnsuppressFeature\nUnsuppresses a feature on the part\nOverload 1:\ndef UnsuppressFeature(name):\n&quot;&quot;&quot;\nUnsuppresses a feature on the part\n \nArgs:\nname (str): Name of the feature to unsuppress\n \n&quot;&quot;&quot;\nOverload 2:\ndef UnsuppressFeature(feature):\n&quot;&quot;&quot;\nUnsuppresses a feature on the part\n \nArgs:\nfeature (Feature): Feature to unsuppress\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"Plane":{"slug":"Plane","filePath":"Plane.md","title":"Plane","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"Plane\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nProperties\nName\nType: Object\r\nThe name of the plane\nMethods\nIsParallel\nChecks if another plane is parallel to this one\ndef IsParallel(other_plane):\n&quot;&quot;&quot;\nChecks if another plane is parallel to this one\n \nArgs:\nother_plane (Plane): The other plane to check\n \nReturns:\ntrue if the planes are parallel\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"Point":{"slug":"Point","filePath":"Point.md","title":"Point","links":["Home","Classes","Methods-Index","Properties-Index","Members-Index","IPoint","SketchPoint","SketchPoint3D","PolylinePoint","Axis","Plane"],"tags":[],"content":"Point\nHome | Classes | Methods | Properties | Members\n** Location:**Core Elements Point\nNamespace: AlibreScript.API | Kind: Class\nThe Point class provides fundamental functionality for creating and manipulating 3D point geometry throughout the AlibreScript API.\nRelated Classes\n\nIPoint - Point interface definition\nSketchPoint - 2D sketch points\nSketchPoint3D - 3D sketch points\nPolylinePoint - Polyline points\nAxis, Plane - Related geometric elements\n\nQuick Navigation\n\nProperties - Point coordinates and attributes\nMethods - Point operations\n\nProperties\nName\nType: Object\r\nName of the point\nX\nType: Object\r\nPoint X coordinate\nY\nType: Object\r\nPoint Y coordinate\nZ\nType: Object\r\nPoint Z coordinate\nMethods\nGetCoordinates\nGets the coordiates of the point as a list [X, Y, Z]\nObject GetCoordinates()\nGetPart\nGets the part that the point is defined in\nObject GetPart()\nGetSelectionAssembly\nThe assembly that the edge was selected on\r\nOnly valid when a selection has been made\nObject GetSelectionAssembly()\nHide\nHides the point\nObject Hide()\nShow\nShows the point\nObject Show()\n\n⬆ Back to Top"},"Polyline":{"slug":"Polyline","filePath":"Polyline.md","title":"Polyline","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"Polyline\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nMethods\nPolyline\nCreates a new 2D polyline that can be later added to a 2D sketch\ndef Polyline(points):\n&quot;&quot;&quot;\nCreates a new 2D polyline that can be later added to a 2D sketch\n \nArgs:\npoints (list): List of points in the polyline [X1, Y1, X2, Y2, ...]\n \n&quot;&quot;&quot;\nAddArc\nAdds an arc to the polyline. The arc is approcimated with straight line segments\ndef AddArc(center, start, end, minimum_segments):\n&quot;&quot;&quot;\nAdds an arc to the polyline. The arc is approcimated with straight line segments\n \nArgs:\ncenter (PolylinePoint): Point defining center of arc\nstart (PolylinePoint): Point defining start of arc\nend (PolylinePoint): Point defining end of arc\nminimum_segments (int): Minimum number of line segments to use to form arc\n \n&quot;&quot;&quot;\nAddCircle\nAdds a circle to the line\ndef AddCircle(center_x, center_y, diameter, sides):\n&quot;&quot;&quot;\nAdds a circle to the line\n \nArgs:\ncenter_x (float): X coordinate of circle center\ncenter_y (float): Y coordinate of circle center\ndiameter (float): Diameter of circle\nsides (int): Number of sides to use to approximate circle\n \n&quot;&quot;&quot;\nAddPoint\nAdds a new point to the polyline\ndef AddPoint(point):\n&quot;&quot;&quot;\nAdds a new point to the polyline\n \nArgs:\npoint (PolylinePoint): Point to add\n \n&quot;&quot;&quot;\nAddPolyline\nAppends a line to the current line\ndef AddPolyline(append_line):\n&quot;&quot;&quot;\nAppends a line to the current line\n \nArgs:\nappend_line (Polyline): Line to append\n \n&quot;&quot;&quot;\nClone\nCreates an exact copy of a section of the line\ndef Clone(start_index, end_index):\n&quot;&quot;&quot;\nCreates an exact copy of a section of the line\n \nArgs:\nstart_index (int): 0-based index of first point to include in copy\nend_index (int): 0-based index of last point to include in copy\n \nReturns:\nCopied line\n \n&quot;&quot;&quot;\nFindIntersection\nFinds the first intersection point between two lines\nOverload 1:\ndef FindIntersection(l1, l2):\n&quot;&quot;&quot;\nFinds the first intersection point between two lines\n \nArgs:\nl1 (Polyline): First line\nl2 (Polyline): Second line\n \nReturns:\nFirst intersection point or null if none found\n \n&quot;&quot;&quot;\nOverload 2:\ndef FindIntersection(a1, a2, b1, b2):\n&quot;&quot;&quot;\nGets the intersection between the line segments A1A2 and B1B2\n \nArgs:\na1 (PolylinePoint): First segment start point\na2 (PolylinePoint): First segment end point\nb1 (PolylinePoint): Second segment start point\nb2 (PolylinePoint): Second segment end point\n \nReturns:\nIntersection point or null if not found\n \n&quot;&quot;&quot;\nFindIntersectionWithCircle\nFinds first intersection of line with a circle\ndef FindIntersectionWithCircle(l1, circle_x, circle_y, radius):\n&quot;&quot;&quot;\nFinds first intersection of line with a circle\n \nArgs:\nl1 (Polyline): Line to check\ncircle_x (float): X-coordinate of circle center\ncircle_y (float): Y-coordinate of circle center\nradius (float): Radius of circle\n \nReturns:\nIntersection point or null if not found\n \n&quot;&quot;&quot;\nInsertPoint\nInserts a point at a specific location\ndef InsertPoint(index, point):\n&quot;&quot;&quot;\nInserts a point at a specific location\n \nArgs:\nindex (int): 0-based index of location to insert\npoint (PolylinePoint): Point to insert\n \n&quot;&quot;&quot;\nIsPointOnLine\nDetermines if a point is on a line segment\ndef IsPointOnLine(a1, a2, point, tolerance):\n&quot;&quot;&quot;\nDetermines if a point is on a line segment\n \nArgs:\na1 (PolylinePoint): First point of line segment\na2 (PolylinePoint): Last point of line segment\npoint (PolylinePoint): Point to check\ntolerance (float): Fudge factor\n \nReturns:\nTrue if point is on line\n \n&quot;&quot;&quot;\nJoin\nJoins a line onto the end of the current line and returns the new line\ndef Join(append_line):\n&quot;&quot;&quot;\nJoins a line onto the end of the current line and returns the new line\n \nArgs:\nappend_line (Polyline): The line to join to the current line\n \nReturns:\nThe new line created from this line plus the appended line\n \n&quot;&quot;&quot;\nOffset\nApplies an offset to all points on the line\ndef Offset(offset_x, offset_y):\n&quot;&quot;&quot;\nApplies an offset to all points on the line\n \nArgs:\noffset_x (float): X offset to apply\noffset_y (float): Y offset to apply\n \n&quot;&quot;&quot;\nRotateZ\nRotates the polyline around the Z axis\ndef RotateZ(center_x, center_y, angle):\n&quot;&quot;&quot;\nRotates the polyline around the Z axis\n \nArgs:\ncenter_x (float): X coordinate of center of rotation\ncenter_y (float): Y coordinate of center of rotation\nangle (float): Number of degrees to rotate\n \n&quot;&quot;&quot;\nSplitAtPoint\nSplits a polyline at a point, creating two polylines\ndef SplitAtPoint(split_point, tolerence):\n&quot;&quot;&quot;\nSplits a polyline at a point, creating two polylines\n \nArgs:\nsplit_point (PolylinePoint): Point to split at\ntolerence (float): Tolerance to determine if point is on/near line\n \nReturns:\nList of polylines [A, B]\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"Polyline3D":{"slug":"Polyline3D","filePath":"Polyline3D.md","title":"Polyline3D","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"Polyline3D\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nMethods\nPolyline3D\nCreates a new 3D polyline that can be later added to a 3D sketch\ndef Polyline3D(points):\n&quot;&quot;&quot;\nCreates a new 3D polyline that can be later added to a 3D sketch\n \nArgs:\npoints (list): List of points in the polyline [X1, Y1, Z1, X2, Y2, Z2, ...]\n \n&quot;&quot;&quot;\nAddPoint\nAdds a new point to the polyline\ndef AddPoint(point):\n&quot;&quot;&quot;\nAdds a new point to the polyline\n \nArgs:\npoint (PolylinePoint3D): Point to add\n \n&quot;&quot;&quot;\nAddPolyline\nAppends a line to the current line\ndef AddPolyline(append_line):\n&quot;&quot;&quot;\nAppends a line to the current line\n \nArgs:\nappend_line (Polyline3D): Line to append\n \n&quot;&quot;&quot;\nClone\nCreates an exact copy of a section of the line\ndef Clone(start_index, end_index):\n&quot;&quot;&quot;\nCreates an exact copy of a section of the line\n \nArgs:\nstart_index (int): 0-based index of first point to include in copy\nend_index (int): 0-based index of last point to include in copy\n \nReturns:\nCopied line\n \n&quot;&quot;&quot;\nInsertPoint\nInserts a point at a specific location\ndef InsertPoint(index, point):\n&quot;&quot;&quot;\nInserts a point at a specific location\n \nArgs:\nindex (int): 0-based index of location to insert\npoint (PolylinePoint3D): Point to insert\n \n&quot;&quot;&quot;\nIsPointOnLine\nDetermines if a point is on a line segment\ndef IsPointOnLine(a, b, p, tolerance):\n&quot;&quot;&quot;\nDetermines if a point is on a line segment\n \nArgs:\na (PolylinePoint3D): First point of line segment\nb (PolylinePoint3D): Last point of line segment\np (PolylinePoint3D): Point to check\ntolerance (float): Fudge factor\n \nReturns:\nTrue if point is on line\n \n&quot;&quot;&quot;\nJoin\nJoins a line onto the end of the current line and returns the new line\ndef Join(append_line):\n&quot;&quot;&quot;\nJoins a line onto the end of the current line and returns the new line\n \nArgs:\nappend_line (Polyline3D): The line to join to the current line\n \nReturns:\nThe new line created from this line plus the appended line\n \n&quot;&quot;&quot;\nOffset\nApplies an offset to all points on the line\ndef Offset(offset_x, offset_y, offset_z):\n&quot;&quot;&quot;\nApplies an offset to all points on the line\n \nArgs:\noffset_x (float): X offset to apply\noffset_y (float): Y offset to apply\noffset_z (float): Z offset to apply\n \n&quot;&quot;&quot;\nSplitAtPoint\nSplits a polyline at a point, creating two polylines\ndef SplitAtPoint(split_point, tolerence):\n&quot;&quot;&quot;\nSplits a polyline at a point, creating two polylines\n \nArgs:\nsplit_point (PolylinePoint3D): Point to split at\ntolerence (float): Tolerance to determine if point is on/near line\n \nReturns:\nList of polylines [A, B]\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"PolylinePoint":{"slug":"PolylinePoint","filePath":"PolylinePoint.md","title":"PolylinePoint","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"PolylinePoint\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nMethods\nPolylinePoint\nCreates a new polyline point\ndef PolylinePoint(x, y):\n&quot;&quot;&quot;\nCreates a new polyline point\n \nArgs:\nx (float): X coordinate\ny (float): Y coordinate\n \n&quot;&quot;&quot;\nOffset\nApplies an offset to the point and creates a new point\ndef Offset(x, y):\n&quot;&quot;&quot;\nApplies an offset to the point and creates a new point\n \nArgs:\nx (float): X offset to apply\ny (float): Y offset to apply\n \nReturns:\nNew point with offset applied\n \n&quot;&quot;&quot;\nRotateZ\nRotates the point around the Z axis\ndef RotateZ(center_x, center_y, angle):\n&quot;&quot;&quot;\nRotates the point around the Z axis\n \nArgs:\ncenter_x (float): X coordinate of center of rotation\ncenter_y (float): Y coordinate of center of rotation\nangle (float): Number of degrees to rotate\n \n&quot;&quot;&quot;\nScale\nScales the point location based on an origin for the scaling\ndef Scale(scale_origin_x, scale_origin_y, scale_factor):\n&quot;&quot;&quot;\nScales the point location based on an origin for the scaling\n \nArgs:\nscale_origin_x (float): X-coordinate for scaling origin\nscale_origin_y (float): Y-coordinate for scaling origin\nscale_factor (float): Factor for scaling as a percentage\n \nReturns:\nNew point with scaling applied\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"PolylinePoint3D":{"slug":"PolylinePoint3D","filePath":"PolylinePoint3D.md","title":"PolylinePoint3D","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"PolylinePoint3D\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nMethods\nPolylinePoint3D\nCreates a new 3D polyline point\ndef PolylinePoint3D(x, y, z):\n&quot;&quot;&quot;\nCreates a new 3D polyline point\n \nArgs:\nx (float): X coordinate\ny (float): Y coordinate\nz (float): Z coordinate\n \n&quot;&quot;&quot;\nOffset\nApplies an offset to the point and creates a new point\ndef Offset(x, y, z):\n&quot;&quot;&quot;\nApplies an offset to the point and creates a new point\n \nArgs:\nx (float): X offset to apply\ny (float): Y offset to apply\nz (float): Z offset to apply\n \nReturns:\nNew point with offset applied\n \n&quot;&quot;&quot;\nScale\nScales the point location based on an origin for the scaling\ndef Scale(scale_origin_x, scale_origin_y, scale_origin_z, scale_factor):\n&quot;&quot;&quot;\nScales the point location based on an origin for the scaling\n \nArgs:\nscale_origin_x (float): X-coordinate for scaling origin\nscale_origin_y (float): Y-coordinate for scaling origin\nscale_origin_z (float): Z-coordinate for scaling origin\nscale_factor (float): Factor for scaling as a percentage\n \nReturns:\nNew point with scaling applied\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"Properties-Index":{"slug":"Properties-Index","filePath":"Properties-Index.md","title":"Properties-Index","links":["Home","Classes","Methods-Index","Members-Index","Circle","Sketch","CircularArc","Line","Bspline","Part","CircularArc3D","Ellipse","EllipticalArc","Assembly","Parameter","AssembledPart","AssembledSubAssembly","GlobalParameters","Bspline3D","Edge","Line3D","Sketch3D","Configuration","SketchPoint","SketchPoint3D","Axis","Face","Feature","Plane","Point","Vertex"],"tags":[],"content":"Properties Index\nHome | Classes | Methods | Properties Index | Members\nAlphabetical index of all properties in the AlibreScript API\nProperty Categories\nCommon Properties\n\nMetadata: Comment, Description, Name, DocumentNumber\nGeometry: Center, Radius, Angle, Length, Width, Height\nConfiguration: Configurations, Parameters, Settings\nFile Info: FileName, CreatedBy, CreatedDate, LastUpdateDate\n\nGeometry Properties\n\nPoints &amp; Centers: Center, CenterPoint, Origin\nDimensions: Radius, Angle, Length\nComplex Geometry: ControlPoints, Figures\n\nPart &amp; Assembly Properties\n\nIdentity: Name, Description, Comment\nMaterial: Material, Density, Mass\nManagement: Configurations, Features\n\nAlphabetical Property List\nQuick Jump:A | C | D | E | F | G | H | I | K | L | M | N | O | P | R | S | T | U | V | W | X | Y | Z\nA\n\nAngle — in CircularArc\nAngle — in CircularArc3D\n\nC\n\nCenter — in Circle\nCenter — in CircularArc\nCenter — in CircularArc3D\nCenter — in Ellipse\nCenter — in EllipticalArc\nCenterPoint — in Circle\nCenterPoint — in CircularArc\nCenterPoint — in Ellipse\nCenterPoint — in EllipticalArc\nComment — in Assembly\nComment — in Parameter\nComment — in Part\nConfigurations — in AssembledPart\nConfigurations — in AssembledSubAssembly\nConfigurations — in Assembly\nConfigurations — in GlobalParameters\nConfigurations — in Part\nControlPoints — in Bspline\nControlPoints — in Bspline3D\nCostCenter — in Assembly\nCostCenter — in Part\nCreatedBy — in Assembly\nCreatedBy — in Part\nCreatedDate — in Assembly\nCreatedDate — in Part\nCreatingApplication — in Assembly\nCreatingApplication — in Part\n\nD\n\nDensity — in Assembly\nDensity — in Part\nDescription — in Assembly\nDescription — in Part\nDiameter — in Edge\nDocumentNumber — in Assembly\nDocumentNumber — in Part\n\nE\n\nEnd — in CircularArc\nEnd — in EllipticalArc\nEnd — in Line\nEnd — in Line3D\nEndPoint — in CircularArc\nEndPoint — in CircularArc3D\nEndPoint — in EllipticalArc\nEndPoint — in Line\nEndPoint — in Line3D\nEngineeringApprovalDate — in Assembly\nEngineeringApprovalDate — in Part\nEngineeringApprovedBy — in Assembly\nEngineeringApprovedBy — in Part\nEquation — in Parameter\nEstimatedCost — in Assembly\nEstimatedCost — in Part\nExcelCell — in Parameter\nExcelSheet — in Parameter\nExcelWorkbook — in Parameter\nExtendedMaterialInformation — in Assembly\nExtendedMaterialInformation — in Part\n\nF\n\nFigures — in Sketch\nFigures — in Sketch3D\nFileName — in Assembly\nFileName — in Part\n\nI\n\nIsActive — in Configuration\nIsReference — in Bspline\nIsReference — in Bspline3D\nIsReference — in Circle\nIsReference — in CircularArc\nIsReference — in CircularArc3D\nIsReference — in Ellipse\nIsReference — in EllipticalArc\nIsReference — in Line\nIsReference — in Line3D\nIsReference — in SketchPoint\nIsReference — in SketchPoint3D\n\nK\n\nKeywords — in Assembly\nKeywords — in Part\nKnotVectors — in Bspline\nKnotVectors — in Bspline3D\n\nL\n\nLastAuthor — in Assembly\nLastAuthor — in Part\nLastUpdateDate — in Assembly\nLastUpdateDate — in Part\nLength — in Bspline\nLength — in Bspline3D\nLength — in Circle\nLength — in Edge\nLength — in Line\nLength — in Line3D\n\nM\n\nMajorAxisAngle — in Ellipse\nMajorAxisAngle — in EllipticalArc\nManufacturingApprovedBy — in Assembly\nManufacturingApprovedBy — in Part\nManufacturingApprovedDate — in Assembly\nManufacturingApprovedDate — in Part\nMass — in Part\nMaterial — in Assembly\nMaterial — in Part\nMinorMajorRatio — in Ellipse\nMinorMajorRatio — in EllipticalArc\nModifiedInformation — in Assembly\nModifiedInformation — in Part\n\nN\n\nName — in AssembledPart\nName — in AssembledSubAssembly\nName — in Assembly\nName — in Axis\nName — in Configuration\nName — in Edge\nName — in Face\nName — in Feature\nName — in GlobalParameters\nName — in Parameter\nName — in Part\nName — in Plane\nName — in Point\nName — in Sketch\nName — in Sketch3D\nName — in Vertex\nNumber — in Assembly\nNumber — in Part\n\nO\n\nOrder — in Bspline\nOrder — in Bspline3D\nOrigin — in Assembly\nOrigin — in Part\nOrigin — in Sketch\n\nP\n\nParameters — in Assembly\nParameters — in GlobalParameters\nParameters — in Part\nParts — in Assembly\nProduct — in Assembly\nProduct — in Part\n\nR\n\nRadius — in Circle\nRadius — in CircularArc\nRadius — in CircularArc3D\nRadius — in Ellipse\nRadius — in EllipticalArc\nRawValue — in Parameter\nReceivedFrom — in Assembly\nReceivedFrom — in Part\nRevision — in Assembly\nRevision — in Part\n\nS\n\nSelections — in Assembly\nSelections — in Part\nStart — in CircularArc\nStart — in EllipticalArc\nStart — in Line\nStart — in Line3D\nStartPoint — in CircularArc\nStartPoint — in CircularArc3D\nStartPoint — in EllipticalArc\nStartPoint — in Line\nStartPoint — in Line3D\nStockSize — in Assembly\nStockSize — in Part\nSubAssemblies — in Assembly\nSupplier — in Assembly\nSupplier — in Part\n\nT\n\nTitle — in Assembly\nTitle — in Part\nType — in CircularArc\nType — in CircularArc3D\nType — in Parameter\n\nU\n\nUnits — in Parameter\n\nV\n\nValue — in Parameter\nVendor — in Assembly\nVendor — in Part\n\nW\n\nWebLink — in Assembly\nWebLink — in Part\nWeights — in Bspline\nWeights — in Bspline3D\n\nX\n\nX — in Point\nX — in SketchPoint\nX — in SketchPoint3D\nX — in Vertex\nXAxis — in Assembly\nXAxis — in Part\nXYPlane — in Assembly\nXYPlane — in Part\n\nY\n\nY — in Point\nY — in SketchPoint\nY — in SketchPoint3D\nY — in Vertex\nYAxis — in Assembly\nYAxis — in Part\nYZPlane — in Assembly\nYZPlane — in Part\n\nZ\n\nZ — in Point\nZ — in SketchPoint3D\nZ — in Vertex\nZAxis — in Assembly\nZAxis — in Part\nZXPlane — in Assembly\nZXPlane — in Part\n\n\n⬆ Back to Top"},"Properties":{"slug":"Properties","filePath":"Properties.md","title":"Properties","links":["Home","Classes","Methods-Index","Properties-Index","Members-Index","CircularArc","CircularArc3D","Circle","Ellipse","EllipticalArc","Assembly","Parameter","Part","AssembledPart","AssembledSubAssembly","GlobalParameters","Bspline","Bspline3D","Edge","Line","Line3D","Sketch","Sketch3D","Configuration","SketchPoint","SketchPoint3D","Axis","Face","Feature","Plane","Point","Vertex"],"tags":[],"content":"Properties\nHome | Classes | Methods | Properties Index | Members\nComplete property reference with type information\nQuick Access\n\nProperties Index - Enhanced property index with categories\nClasses - Browse properties by class\nMembers Index - All members including properties\n\nComplete Property List by Letter\nQuick Jump:A | C | D | E | F | G | H | I | K | L | M | N | O | P | R | S | T | U | V | W | X | Y | Z\nA\n\nObject — Angle in CircularArc\nObject — Angle in CircularArc3D\n\nC\n\nObject — Center in Circle\nObject — Center in CircularArc\nObject — Center in CircularArc3D\nObject — Center in Ellipse\nObject — Center in EllipticalArc\nObject — CenterPoint in Circle\nObject — CenterPoint in CircularArc\nObject — CenterPoint in Ellipse\nObject — CenterPoint in EllipticalArc\nObject — Comment in Assembly\nObject — Comment in Parameter\nObject — Comment in Part\nObject — Configurations in AssembledPart\nObject — Configurations in AssembledSubAssembly\nObject — Configurations in Assembly\nObject — Configurations in GlobalParameters\nObject — Configurations in Part\nObject — ControlPoints in Bspline\nObject — ControlPoints in Bspline3D\nObject — CostCenter in Assembly\nObject — CostCenter in Part\nObject — CreatedBy in Assembly\nObject — CreatedBy in Part\nObject — CreatedDate in Assembly\nObject — CreatedDate in Part\nObject — CreatingApplication in Assembly\nObject — CreatingApplication in Part\n\nD\n\nObject — Density in Assembly\nObject — Density in Part\nObject — Description in Assembly\nObject — Description in Part\nObject — Diameter in Edge\nObject — DocumentNumber in Assembly\nObject — DocumentNumber in Part\n\nE\n\nObject — End in CircularArc\nObject — End in EllipticalArc\nObject — End in Line\nObject — End in Line3D\nObject — EndPoint in CircularArc\nObject — EndPoint in CircularArc3D\nObject — EndPoint in EllipticalArc\nObject — EndPoint in Line\nObject — EndPoint in Line3D\nObject — EngineeringApprovalDate in Assembly\nObject — EngineeringApprovalDate in Part\nObject — EngineeringApprovedBy in Assembly\nObject — EngineeringApprovedBy in Part\nObject — Equation in Parameter\nObject — EstimatedCost in Assembly\nObject — EstimatedCost in Part\nObject — ExcelCell in Parameter\nObject — ExcelSheet in Parameter\nObject — ExcelWorkbook in Parameter\nObject — ExtendedMaterialInformation in Assembly\nObject — ExtendedMaterialInformation in Part\n\nF\n\nObject — Figures in Sketch\nObject — Figures in Sketch3D\nObject — FileName in Assembly\nObject — FileName in Part\n\nI\n\nObject — IsActive in Configuration\nObject — IsReference in Bspline\nObject — IsReference in Bspline3D\nObject — IsReference in Circle\nObject — IsReference in CircularArc\nObject — IsReference in CircularArc3D\nObject — IsReference in Ellipse\nObject — IsReference in EllipticalArc\nObject — IsReference in Line\nObject — IsReference in Line3D\nObject — IsReference in SketchPoint\nObject — IsReference in SketchPoint3D\n\nK\n\nObject — Keywords in Assembly\nObject — Keywords in Part\nObject — KnotVectors in Bspline\nObject — KnotVectors in Bspline3D\n\nL\n\nObject — LastAuthor in Assembly\nObject — LastAuthor in Part\nObject — LastUpdateDate in Assembly\nObject — LastUpdateDate in Part\nObject — Length in Bspline\nObject — Length in Bspline3D\nObject — Length in Circle\nObject — Length in Edge\nObject — Length in Line\nObject — Length in Line3D\n\nM\n\nObject — MajorAxisAngle in Ellipse\nObject — MajorAxisAngle in EllipticalArc\nObject — ManufacturingApprovedBy in Assembly\nObject — ManufacturingApprovedBy in Part\nObject — ManufacturingApprovedDate in Assembly\nObject — ManufacturingApprovedDate in Part\nObject — Mass in Part\nObject — Material in Assembly\nObject — Material in Part\nObject — MinorMajorRatio in Ellipse\nObject — MinorMajorRatio in EllipticalArc\nObject — ModifiedInformation in Assembly\nObject — ModifiedInformation in Part\n\nN\n\nObject — Name in AssembledPart\nObject — Name in AssembledSubAssembly\nObject — Name in Assembly\nObject — Name in Axis\nObject — Name in Configuration\nObject — Name in Edge\nObject — Name in Face\nObject — Name in Feature\nObject — Name in GlobalParameters\nObject — Name in Parameter\nObject — Name in Part\nObject — Name in Plane\nObject — Name in Point\nObject — Name in Sketch\nObject — Name in Sketch3D\nObject — Name in Vertex\nObject — Number in Assembly\nObject — Number in Part\n\nO\n\nObject — Order in Bspline\nObject — Order in Bspline3D\nObject — Origin in Assembly\nObject — Origin in Part\nObject — Origin in Sketch\n\nP\n\nObject — Parameters in Assembly\nObject — Parameters in GlobalParameters\nObject — Parameters in Part\nObject — Parts in Assembly\nObject — Product in Assembly\nObject — Product in Part\n\nR\n\nObject — Radius in Circle\nObject — Radius in CircularArc\nObject — Radius in CircularArc3D\nObject — Radius in Ellipse\nObject — Radius in EllipticalArc\nObject — RawValue in Parameter\nObject — ReceivedFrom in Assembly\nObject — ReceivedFrom in Part\nObject — Revision in Assembly\nObject — Revision in Part\n\nS\n\nObject — Selections in Assembly\nObject — Selections in Part\nObject — Start in CircularArc\nObject — Start in EllipticalArc\nObject — Start in Line\nObject — Start in Line3D\nObject — StartPoint in CircularArc\nObject — StartPoint in CircularArc3D\nObject — StartPoint in EllipticalArc\nObject — StartPoint in Line\nObject — StartPoint in Line3D\nObject — StockSize in Assembly\nObject — StockSize in Part\nObject — SubAssemblies in Assembly\nObject — Supplier in Assembly\nObject — Supplier in Part\n\nT\n\nObject — Title in Assembly\nObject — Title in Part\nObject — Type in CircularArc\nObject — Type in CircularArc3D\nObject — Type in Parameter\n\nU\n\nObject — Units in Parameter\n\nV\n\nObject — Value in Parameter\nObject — Vendor in Assembly\nObject — Vendor in Part\n\nW\n\nObject — WebLink in Assembly\nObject — WebLink in Part\nObject — Weights in Bspline\nObject — Weights in Bspline3D\n\nX\n\nObject — X in Point\nObject — X in SketchPoint\nObject — X in SketchPoint3D\nObject — X in Vertex\nObject — XAxis in Assembly\nObject — XAxis in Part\nObject — XYPlane in Assembly\nObject — XYPlane in Part\n\nY\n\nObject — Y in Point\nObject — Y in SketchPoint\nObject — Y in SketchPoint3D\nObject — Y in Vertex\nObject — YAxis in Assembly\nObject — YAxis in Part\nObject — YZPlane in Assembly\nObject — YZPlane in Part\n\nZ\n\nObject — Z in Point\nObject — Z in SketchPoint3D\nObject — Z in Vertex\nObject — ZAxis in Assembly\nObject — ZAxis in Part\nObject — ZXPlane in Assembly\nObject — ZXPlane in Part\n\n\n⬆ Back to Top"},"Sketch.Constraints":{"slug":"Sketch.Constraints","filePath":"Sketch.Constraints.md","title":"Sketch.Constraints","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"Sketch.Constraints\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API.Sketch\nKind: Class\n\nSupported sketch constraints\n\n⬆ Back to Top"},"Sketch":{"slug":"Sketch","filePath":"Sketch.md","title":"Sketch","links":["Home","Classes","Methods-Index","Properties-Index","Sketch3D","Sketch.Constraints","SketchPoint","Line","Circle","CircularArc","Part"],"tags":[],"content":"Sketch\nHome | Classes | Methods | Properties\n** Location:**Sketching &amp; Drawing Sketch\nNamespace: AlibreScript.API | Kind: Class\nThe Sketch class provides functionality for 2D sketching operations including creating geometric figures, applying constraints, and managing sketch elements.\nRelated Classes\n\nSketch3D - 3D sketching operations\nSketch.Constraints - Sketch constraint management\nSketchPoint - 2D sketch points\nLine, Circle, CircularArc - Sketch geometry\nPart - Contains sketches\n\nQuick Navigation\n\nProperties - Sketch properties\nMethods - All available operations\nArc Methods - Circular arc operations\nLine Methods - Line creation and manipulation\nCircle Methods - Circle operations\nConstraint Methods - Apply sketch constraints\n\nProperties\nFigures\nType: Object\r\nA list of figures (line, circle, circulararc, bspline, ellipse, elliptical arc) defined on the sketch\nName\nType: Object\r\nName of the sketch\nOrigin\nType: Object\r\nThe point that defines the origin\nMethods\nAddArc\nAdds a circular arc to the sketch\ndef AddArc(new_arc):\n&quot;&quot;&quot;\nAdds a circular arc to the sketch\n \nArgs:\nnew_arc (CircularArc): Arc to add\n \nReturns:\nThe added circular arc\n \n&quot;&quot;&quot;\nAddArcCenterStartAngle\nAdds a circular arc using center, start and angle\r\nArc goes anti-clockwise from start\ndef AddArcCenterStartAngle(center_x, center_y, start_x, start_y, angle, is_reference):\n&quot;&quot;&quot;\nAdds a circular arc using center, start and angle Arc goes anti-clockwise from start\n \nArgs:\ncenter_x (float): X coordinate for center\ncenter_y (float): Y coordinate for center\nstart_x (float): X coordinate for start\nstart_y (float): Y coordinate for start\nangle (float): Arc angle in degrees\nis_reference (bool): True if arc is a reference figure\n \nReturns:\nThe added circular arc\n \n&quot;&quot;&quot;\nAddArcCenterStartEnd\nAdds a circular arc using three points - center, start and end\r\nArc goes anti-clockwise from start to end\ndef AddArcCenterStartEnd(center_x, center_y, start_x, start_y, end_x, end_y, is_reference):\n&quot;&quot;&quot;\nAdds a circular arc using three points - center, start and end Arc goes anti-clockwise from start to end\n \nArgs:\ncenter_x (float): X coordinate for center\ncenter_y (float): Y coordinate for center\nstart_x (float): X coordinate for start\nstart_y (float): Y coordinate for start\nend_x (float): X coordinate for end\nend_y (float): Y cordinate for end\nis_reference (bool): True if arc is a reference figure\n \nReturns:\nThe added circular arc\n \n&quot;&quot;&quot;\nAddBspline\nAdds a Bspline to the sketch\nOverload 1:\ndef AddBspline(order, control_points, knot_vectors, weights, is_reference):\n&quot;&quot;&quot;\nAdds a Bspline to the sketch\n \nArgs:\norder (int): Order of the Bspline (Degree - 1)\ncontrol_points (list): List of control points\nknot_vectors (list): List of knot vectors\nweights (list): List of control point weights\nis_reference (bool): True to create a reference bspline\n \nReturns:\nThe created Bspline\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddBspline(points, is_reference):\n&quot;&quot;&quot;\nAdds a Bspline to the sketch through a set of points\n \nArgs:\npoints (list): List of points\nis_reference (bool): True to create a reference bspline\n \nReturns:\nThe created Bspline\n \n&quot;&quot;&quot;\nOverload 3:\ndef AddBspline(new_bspline):\n&quot;&quot;&quot;\nAdds a new bspline to the sketch\n \nArgs:\nnew_bspline (Bspline): Bspline to add to the sketch\n \nReturns:\nThe added Bspline\n \n&quot;&quot;&quot;\nAddCircle\nAdds a circle to the sketch\nOverload 1:\ndef AddCircle(center_x, center_y, diameter, is_reference):\n&quot;&quot;&quot;\nAdds a circle to the sketch\n \nArgs:\ncenter_x (float): X coordinate of circle center\ncenter_y (float): Y coordinate of circle center\ndiameter (float): Circle diameter\nis_reference (bool): True to create a reference circle\n \nReturns:\nA circle object\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddCircle(new_circle):\n&quot;&quot;&quot;\nAdds a circle to the sketch\n \nArgs:\nnew_circle (Circle): Circle to add to sketch\n \nReturns:\nThe added circle\n \n&quot;&quot;&quot;\nAddConstraint\nAdds a constraint to the sketch\nOverload 1:\ndef AddConstraint(figure, constraint):\n&quot;&quot;&quot;\nAdds a constraint to the sketch\n \nArgs:\nfigure (ISketchFigure): Figure to constrain (e.g. Line)\nconstraint (Sketch.Constraints): Constraint to apply\n \nReturns:\nTrue if constraint was added\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddConstraint(figures, constraint):\n&quot;&quot;&quot;\nAdds a constraint to the sketch\n \nArgs:\nfigures (list): List of Sketch figures to constrain [Figure1, Figure2, ...] (Circle, Line, CircularArc, etc.)\nconstraint (Sketch.Constraints): Constraint to apply\n \nReturns:\nReturns True if constraint was added\n \n&quot;&quot;&quot;\nAddDimension\nAdds a dimension to the sketch between two points\nOverload 1:\ndef AddDimension(p1, p2):\n&quot;&quot;&quot;\nAdds a dimension to the sketch between two points\n \nArgs:\np1 (SketchPoint): First point\np2 (SketchPoint): Second point\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddDimension(circle):\n&quot;&quot;&quot;\nAdds a dimension to the radius of a circle\n \nArgs:\ncircle (Circle): Circle to dimension\n \n&quot;&quot;&quot;\nOverload 3:\ndef AddDimension(arc):\n&quot;&quot;&quot;\nAdds a dimension to the radius of an arc\n \nArgs:\narc (CircularArc): Arc to dimension\n \n&quot;&quot;&quot;\nAddEllipse\nAdds an ellipse to the sketch using three points\nOverload 1:\ndef AddEllipse(center_x, center_y, major_x, major_y, minor_x, minor_y, is_reference):\n&quot;&quot;&quot;\nAdds an ellipse to the sketch using three points\n \nArgs:\ncenter_x (float): X coordinate of ellipse center\ncenter_y (float): Y coordinate of ellipse center\nmajor_x (float): X coordinate of ellipse on major axis\nmajor_y (float): Y coordinate of ellipse on major axis\nminor_x (float): X coordinate of ellipse on minor axis\nminor_y (float): Y coordinate of ellipse on minor axis\nis_reference (bool): True to create a reference ellipse\n \nReturns:\nAn ellipse object\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddEllipse(center_x, center_y, major_axis_diameter, minor_major_ratio, major_axis_angle, is_reference):\n&quot;&quot;&quot;\nAdds an ellipse to the sketch\n \nArgs:\ncenter_x (float): X coordinate of ellipse center\ncenter_y (float): Y coordinate of ellipse center\nmajor_axis_diameter (float): Diameter of ellipse on major axis\nminor_major_ratio (float): Ratio of minor diameter to major diameter\nmajor_axis_angle (float): Angle of major axis\nis_reference (bool): True to create a reference ellipse\n \nReturns:\nAn ellipse object\n \n&quot;&quot;&quot;\nOverload 3:\ndef AddEllipse(new_ellipse):\n&quot;&quot;&quot;\nAdds an ellipse to the sketch\n \nArgs:\nnew_ellipse (Ellipse): Ellipse to add\n \nReturns:\nAdded ellipse\n \n&quot;&quot;&quot;\nAddEllipticalArc\nAdds an elliptical arc to the sketch\nOverload 1:\ndef AddEllipticalArc(center_x, center_y, start_x, start_y, end_x, end_y, major_axis_diameter, minor_major_ratio, major_axis_angle, is_reference):\n&quot;&quot;&quot;\nAdds an elliptical arc to the sketch\n \nArgs:\ncenter_x (float): X coordinate of arc center\ncenter_y (float): Y coordinate of arc center\nstart_x (float): X coorindate of arc start\nstart_y (float): Y coordinate of arc start\nend_x (float): X coordinate of arc end\nend_y (float): Y coordinate of arc end\nmajor_axis_diameter (float): Diameter of ellipse on major axis\nminor_major_ratio (float): Ratio of minor diameter to major diameter\nmajor_axis_angle (float): Angle of major axis\nis_reference (bool): True to create a reference elliptical arc\n \nReturns:\nAn elliptical arc object\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddEllipticalArc(new_elliptical_arc):\n&quot;&quot;&quot;\nAdds an elliptical arc to the sketch\n \nArgs:\nnew_elliptical_arc (EllipticalArc): Elliptical arc to add\n \nReturns:\nAdded elliptical arc\n \n&quot;&quot;&quot;\nAddFigure\nAdds a figure to the sketch\ndef AddFigure(new_figure):\n&quot;&quot;&quot;\nAdds a figure to the sketch\n \nArgs:\nnew_figure (ISketchFigure): Figure to add\n \nReturns:\nThe added figure\n \n&quot;&quot;&quot;\nAddLine\nAdds a line to the sketch\nOverload 1:\ndef AddLine(start_point, end_point, is_reference):\n&quot;&quot;&quot;\nAdds a line to the sketch\n \nArgs:\nstart_point (list): Start of line [X, Y]\nend_point (list): End of line [X, Y]\nis_reference (bool): true if line is a reference line\n \nReturns:\nThe added line\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddLine(new_line):\n&quot;&quot;&quot;\nAdds a line to the sketch\n \nArgs:\nnew_line (Line): 2D line to add\n \nReturns:\nThe added line\n \n&quot;&quot;&quot;\nOverload 3:\ndef AddLine(x1, y1, x2, y2, is_reference):\n&quot;&quot;&quot;\nAdds a line to the sketch\n \nArgs:\nx1 (float): Start point X\ny1 (float): Start point Y\nx2 (float): End point X\ny2 (float): End point Y\nis_reference (bool): true to create a reference line\n \nReturns:\nThe added line\n \n&quot;&quot;&quot;\nAddLines\nAdds a polyline to the sketch\ndef AddLines(points, is_reference):\n&quot;&quot;&quot;\nAdds a polyline to the sketch\n \nArgs:\npoints (list): Set of points [Point1X, Point1Y, Point2X, Point2Y, ...]\nis_reference (bool): true if line is a reference line\n \n&quot;&quot;&quot;\nAddPoint\nAdds a point to the sketch\nOverload 1:\ndef AddPoint(x, y):\n&quot;&quot;&quot;\nAdds a point to the sketch\n \nArgs:\nx (float): Point X coordinate\ny (float): Point Y coordinate\n \nReturns:\nThe created sketch point\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddPoint(x, y, is_reference):\n&quot;&quot;&quot;\nAdds a point to the sketch [DEPRECATED - DO NOT USE]\n \nArgs:\nx (float): Point X coordinate\ny (float): Point Y coordinate\nis_reference (bool): Set to false\n \nReturns:\nThe added point\n \n&quot;&quot;&quot;\nOverload 3:\ndef AddPoint(new_point):\n&quot;&quot;&quot;\nAdds a point to the sketch\n \nArgs:\nnew_point (SketchPoint): Point to add\n \nReturns:\nThe added point\n \n&quot;&quot;&quot;\nAddPolygon\nAdds a regular polygon to the sketch\ndef AddPolygon(center_x, center_y, diameter, sides, is_reference):\n&quot;&quot;&quot;\nAdds a regular polygon to the sketch\n \nArgs:\ncenter_x (float): X coordinate for polygon center\ncenter_y (float): Y coordinate for polygon center\ndiameter (float): Diameter of polygon\nsides (int): Number of sides\nis_reference (bool): True to create a reference polygon\n \n&quot;&quot;&quot;\nAddPolyhole\nAdds a polyhole to the sketch\r\nCreate a “circle” whose size should be accurate regardless of the 3D printing method\r\nSee: hydraraptor.blogspot.co.uk/2011/02/polyholes.html\ndef AddPolyhole(center_x, center_y, diameter, is_reference):\n&quot;&quot;&quot;\nAdds a polyhole to the sketch Create a &quot;circle&quot; whose size should be accurate regardless of the 3D printing method See: hydraraptor.blogspot.co.uk/2011/02/polyholes.html\n \nArgs:\ncenter_x (float): X coordinate for hole center\ncenter_y (float): Y coordinate for hole center\ndiameter (float): Diameter of hole\nis_reference (bool): true if line is a reference line\n \n&quot;&quot;&quot;\nAddPolyline\nAdds a polyline to the sketch\ndef AddPolyline(line, is_reference):\n&quot;&quot;&quot;\nAdds a polyline to the sketch\n \nArgs:\nline (Polyline): Polyine to add\nis_reference (bool): true if line is a reference line\n \n&quot;&quot;&quot;\nAddRectangle\nAdds a rectangle to the sketch\ndef AddRectangle(bottom_left_x, bottom_left_y, top_right_x, top_right_y, is_reference):\n&quot;&quot;&quot;\nAdds a rectangle to the sketch\n \nArgs:\nbottom_left_x (float): X coordinate of bottom left corner\nbottom_left_y (float): Y coordinate of bottom left corner\ntop_right_x (float): X coordinate of top right\ntop_right_y (float): Y coordinate of top right\nis_reference (bool): True to create a reference rectangle\n \n&quot;&quot;&quot;\nCopyFrom\nCopies a sketch into this sketch\nOverload 1:\ndef CopyFrom(source):\n&quot;&quot;&quot;\nCopies a sketch into this sketch\n \nArgs:\nsource (Sketch): Sketch to copy from\n \n&quot;&quot;&quot;\nOverload 2:\ndef CopyFrom(source, angle, rotation_center_x, rotation_center_y, translate_x, translate_y, scale_origin_x, scale_origin_y, scale_factor):\n&quot;&quot;&quot;\nCopies a sketch into this sketch\n \nArgs:\nsource (Sketch): Sketch to copy from\nangle (float): Rotation angle\nrotation_center_x (float): X-coodinate for center of rotation\nrotation_center_y (float): Y-coordinate for center of rotation\ntranslate_x (float): Amount to move sketch in X direction\ntranslate_y (float): Amount to move sketch in Y direction\nscale_origin_x (float): X-coordinate for scaling origin\nscale_origin_y (float): Y-coordinate for scaling origin\nscale_factor (float): Factor for scaling as a percentage\n \n&quot;&quot;&quot;\nExportSVG\nExports the sketch to an SVG\nOverload 1:\ndef ExportSVG(file_name):\n&quot;&quot;&quot;\nExports the sketch to an SVG\n \nArgs:\nfile_name (str): Path and name of SVG file to export to\n \n&quot;&quot;&quot;\nOverload 2:\ndef ExportSVG(file_name, include_references):\n&quot;&quot;&quot;\nExports the sketch to an SVG\n \nArgs:\nfile_name (str): Path and name of SVG file to export to\ninclude_references (bool): true to include reference figures in export\n \n&quot;&quot;&quot;\nOverload 3:\ndef ExportSVG(file_name, include_references, stroke_width, stroke_color, stroke_line_cap, stroke_dashed, stroke_dash_length, reference_stroke_width, reference_stroke_color, reference_stroke_line_cap, reference_stroke_dashed, reference_stroke_dash_length):\n&quot;&quot;&quot;\nExports the sketch to an SVG with specific styling\n \nArgs:\nfile_name (str): Path and name of SVG file to export to\ninclude_references (bool): true to include reference figures in export\nstroke_width (float): Stroke width\nstroke_color (str): String containing name of stroke color\nstroke_line_cap (str): String containing name of stroke line cap type\nstroke_dashed (bool): true if stroke dashed, false if solid\nstroke_dash_length (float): Length of stroke dashes if dashed\nreference_stroke_width (float): Reference stroke width\nreference_stroke_color (str): String containing name of reference stroke color\nreference_stroke_line_cap (str): String containing name of reference stroke line cap type, can be: butt, round, square\nreference_stroke_dashed (bool): true if reference stroke dashed, false if solid\nreference_stroke_dash_length (float): Length of reference stroke dashes if dashed\n \n&quot;&quot;&quot;\nFromXml\nAdds elements to the sketch from XML\ndef FromXml(xml):\n&quot;&quot;&quot;\nAdds elements to the sketch from XML\n \nArgs:\nxml (str): XML to parse\n \n&quot;&quot;&quot;\nGlobaltoPoint\nProjects a 3D point in the part coordinate system into a point on the sketch\ndef GlobaltoPoint(x, y, z):\n&quot;&quot;&quot;\nProjects a 3D point in the part coordinate system into a point on the sketch\n \nArgs:\nx (float): X coordinate of 3D point\ny (float): Y coordinate of 3D point\nz (float): Z coordinate of 3D point\n \nReturns:\nPython list [x, y]\n \n&quot;&quot;&quot;\nImportSVG\nImports an SVG into the sketch\nOverload 1:\ndef ImportSVG(file_name):\n&quot;&quot;&quot;\nImports an SVG into the sketch\n \nArgs:\nfile_name (str): Path and name of SVG file\n \n&quot;&quot;&quot;\nOverload 2:\ndef ImportSVG(file_name, translate_x, translate_y, rotation_angle, translate_then_rotate, native_figures):\n&quot;&quot;&quot;\nImports an SVG into the sketch\n \nArgs:\nfile_name (str): Path and name of SVG file\ntranslate_x (float): Amount to translate in the X direction\ntranslate_y (float): Amount to translate in the Y direction\nrotation_angle (float): Amount to rotate in degrees\ntranslate_then_rotate (bool): true to perform translation passed to this function before rotation passed to this function, false to reverse order\nnative_figures (bool): true to create native circles and arcs when possible, false to always use Bezier curves\n \n&quot;&quot;&quot;\nLoadXml\nLoads the sketch from an XML file\ndef LoadXml(file_name):\n&quot;&quot;&quot;\nLoads the sketch from an XML file\n \nArgs:\nfile_name (str): Path and name of file to load from\n \n&quot;&quot;&quot;\nPointtoGlobal\nConverts a point on the sketch into a 3D point in the part coordinate system\ndef PointtoGlobal(x, y):\n&quot;&quot;&quot;\nConverts a point on the sketch into a 3D point in the part coordinate system\n \nArgs:\nx (float): X coordinate of point on sketch\ny (float): Y coordinate of point on sketch\n \nReturns:\nPython list [x, y, z]\n \n&quot;&quot;&quot;\nSavetoXml\nSaves the sketch to an XML file\r\nDoes not support ellipses and elliptical arcs\ndef SavetoXml(file_name):\n&quot;&quot;&quot;\nSaves the sketch to an XML file Does not support ellipses and elliptical arcs\n \nArgs:\nfile_name (str): Path and name of file to save to\n \n&quot;&quot;&quot;\nStartFaceMapping\nStarts mapping the face so that the specified edge is at [0, 0]\nOverload 1:\ndef StartFaceMapping(edge_vertex1, edge_vertex2):\n&quot;&quot;&quot;\nStarts mapping the face so that the specified edge is at [0, 0]\n \nArgs:\nedge_vertex1 (Vertex): Firrt vertex of edge\nedge_vertex2 (Vertex): Second vertex of edge\n \n&quot;&quot;&quot;\nOverload 2:\ndef StartFaceMapping(edge_end_point1, edge_end_point2):\n&quot;&quot;&quot;\nStarts mapping the face so that the specified edge is at [0, 0] Affects only the operation of the AddXXX functions and the GlobaltoPoint and PointtoGlobal functions, which will now use mapped X and Y values\n \nArgs:\nedge_end_point1 (list): First end point of edge [X, Y, Z]\nedge_end_point2 (list): Second end point of edge [X, Y, Z]\n \n&quot;&quot;&quot;\nStartMapping\nStarts mapping the sketch so that the specified line is at [0, 0]\r\nAffects only the operation of the AddXXX functions and the\r\nGlobaltoPoint and PointtoGlobal functions, which will now use mapped X and Y values\ndef StartMapping(point1, point2, point_above_axis):\n&quot;&quot;&quot;\nStarts mapping the sketch so that the specified line is at [0, 0] Affects only the operation of the AddXXX functions and the GlobaltoPoint and PointtoGlobal functions, which will now use mapped X and Y values\n \nArgs:\npoint1 (list): First line end point [X, Y, Z]\npoint2 (list): Second line end point [X, Y, Z]\npoint_above_axis (list): Point to be located above the X-axis\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"Sketch3D":{"slug":"Sketch3D","filePath":"Sketch3D.md","title":"Sketch3D","links":["Home","Classes","Methods-Index","Properties-Index","Members-Index","Sketch","SketchPoint3D","Line3D","CircularArc3D","Bspline3D","Part"],"tags":[],"content":"Sketch3D\nHome | Classes | Methods | Properties | Members\n** Location:**Sketching &amp; Drawing Sketch3D\nNamespace: AlibreScript.API | Kind: Class\nThe Sketch3D class provides functionality for 3D sketching operations including creating spatial geometric figures and managing 3D sketch elements.\nRelated Classes\n\nSketch - 2D sketching operations\nSketchPoint3D - 3D sketch points\nLine3D, CircularArc3D - 3D sketch geometry\nBspline3D - 3D spline curves\nPart - Contains 3D sketches\n\nQuick Navigation\n\nProperties - Sketch properties\nMethods - All available operations\nArc Methods - 3D arc operations\nLine Methods - 3D line creation\nSpline Methods - 3D curve operations\n\nProperties\nFigures\nType: Object\r\nA list of figures defines on the sketch, e.g. bspline\nName\nType: Object\r\nName of the sketch\nMethods\nAddArc\nAdds a circular arc to the sketch\ndef AddArc(new_arc):\n&quot;&quot;&quot;\nAdds a circular arc to the sketch\n \nArgs:\nnew_arc (CircularArc3D): Arc to add\n \n&quot;&quot;&quot;\nAddArcCenterStartEnd\nAdds a circular arc using three points - center, start and end\r\nArc goes anti-clockwise from start to end\ndef AddArcCenterStartEnd(center_x, center_y, center_z, start_x, start_y, start_z, end_x, end_y, end_z):\n&quot;&quot;&quot;\nAdds a circular arc using three points - center, start and end Arc goes anti-clockwise from start to end\n \nArgs:\ncenter_x (float): X coordinate for center\ncenter_y (float): Y coordinate for center\ncenter_z (float): Z coordinate for center\nstart_x (float): X coordinate for start\nstart_y (float): Y coordinate for start\nstart_z (float): Z coordinate for start\nend_x (float): X coordinate for end\nend_y (float): Y cordinate for end\nend_z (float): Z coordnate for end\n \n&quot;&quot;&quot;\nAddBspline\nAdds a Bspline to the sketch\nOverload 1:\ndef AddBspline(points):\n&quot;&quot;&quot;\nAdds a Bspline to the sketch\n \nArgs:\npoints (list): List of control points [X1, Y1, Z1, X2, Y2, Z2, ...]\n \nReturns:\nThe Bspline object that was created\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddBspline(bspline):\n&quot;&quot;&quot;\nAdds a Bspline to the sketch\n \nArgs:\nbspline (Bspline3D): Bspline to add\n \n&quot;&quot;&quot;\nAddLine\nAdds a line to the sketch\nOverload 1:\ndef AddLine(start_point, end_point):\n&quot;&quot;&quot;\nAdds a line to the sketch\n \nArgs:\nstart_point (list): Start of line [X, Y, Z]\nend_point (list): End of line [X, Y, Z]\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddLine(new_line):\n&quot;&quot;&quot;\nAdds a line to the sketch\n \nArgs:\nnew_line (Line3D): 3D line to add\n \n&quot;&quot;&quot;\nOverload 3:\ndef AddLine(x1, y1, z1, x2, y2, z2):\n&quot;&quot;&quot;\nAdds a line to the sketch\n \nArgs:\nx1 (float): Start point X\ny1 (float): Start point Y\nz1 (float): Start point Z\nx2 (float): End point X\ny2 (float): End point Y\nz2 (float): End point Z\n \n&quot;&quot;&quot;\nAddLines\nAdds a polyline to the sketch\ndef AddLines(points):\n&quot;&quot;&quot;\nAdds a polyline to the sketch\n \nArgs:\npoints (list): Set of points [Point1X, Point1Y, Point1Z, Point2X, Point2Y, Point2Z, ...]\n \n&quot;&quot;&quot;\nAddPoint\nAdds a point to the sketch\nOverload 1:\ndef AddPoint(x, y, z):\n&quot;&quot;&quot;\nAdds a point to the sketch\n \nArgs:\nx (float): Point X coordinate\ny (float): Point Y coordinate\nz (float): Point Z coordinate\n \n&quot;&quot;&quot;\nOverload 2:\ndef AddPoint(new_point):\n&quot;&quot;&quot;\nAdds a point to the sketch\n \nArgs:\nnew_point (SketchPoint3D): Point to add\n \n&quot;&quot;&quot;\nAddPolyline\nAdds a polyline to the sketch\ndef AddPolyline(line):\n&quot;&quot;&quot;\nAdds a polyline to the sketch\n \nArgs:\nline (Polyline3D): Polyine to add\n \n&quot;&quot;&quot;\nFromXml\nAdds elements to the sketch from XML\ndef FromXml(xml):\n&quot;&quot;&quot;\nAdds elements to the sketch from XML\n \nArgs:\nxml (str): XML to parse\n \n&quot;&quot;&quot;\nLoadXml\nLoads the sketch from an XML file\ndef LoadXml(file_name):\n&quot;&quot;&quot;\nLoads the sketch from an XML file\n \nArgs:\nfile_name (str): Path and name of file to load from\n \n&quot;&quot;&quot;\nSavetoXml\nSaves the sketch to an XML file\ndef SavetoXml(file_name):\n&quot;&quot;&quot;\nSaves the sketch to an XML file\n \nArgs:\nfile_name (str): Path and name of file to save to\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"SketchPoint":{"slug":"SketchPoint","filePath":"SketchPoint.md","title":"SketchPoint","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"SketchPoint\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nProperties\nIsReference\nType: Object\r\nTrue if the point is a reference point, false if it is a regular point\nX\nType: Object\r\nX-coordinate of point\nY\nType: Object\r\nY-coordinate of point\nMethods\nSketchPoint\nCreates a new sketch point which can be added to sketches\ndef SketchPoint(x, y, is_reference):\n&quot;&quot;&quot;\nCreates a new sketch point which can be added to sketches\n \nArgs:\nx (float): X coordinate of sketch point\ny (float): Y coordinate of sketch point\nis_reference (bool): true to create a reference point, false to create a regular point\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"SketchPoint3D":{"slug":"SketchPoint3D","filePath":"SketchPoint3D.md","title":"SketchPoint3D","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"SketchPoint3D\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nProperties\nIsReference\nType: Object\r\nTrue if the point is a reference point, false if it is a regular point\nX\nType: Object\r\nX-coordinate of point\nY\nType: Object\r\nY-coordinate of point\nZ\nType: Object\r\nZ-coordinate of point\nMethods\nSketchPoint3D\nCreates a new 3D sketch point which can be added to sketches\ndef SketchPoint3D(x, y, z, is_reference):\n&quot;&quot;&quot;\nCreates a new 3D sketch point which can be added to sketches\n \nArgs:\nx (float): X coordinate of point\ny (float): Y coordinate of point\nz (float): Z coordinate of point\nis_reference (bool): true to create a reference point, false to create a regular point\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"ThreeD":{"slug":"ThreeD","filePath":"ThreeD.md","title":"ThreeD","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"ThreeD\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nMethods\nGetPerpendicularVector\nGets a vector that is perpendicular to a vector\ndef GetPerpendicularVector(vector):\n&quot;&quot;&quot;\nGets a vector that is perpendicular to a vector\n \nArgs:\nvector (list): Vector [X, Y, Z]\n \nReturns:\nVector that is perpendicular [X, Y, Z]\n \n&quot;&quot;&quot;\nTransformPointUsingVectors\nTransforms a point based on two vectors\ndef TransformPointUsingVectors(source_vector, destination_vector, point):\n&quot;&quot;&quot;\nTransforms a point based on two vectors\n \nArgs:\nsource_vector (list): Source vector [X, Y, Z]\ndestination_vector (list): Destination vector [X, Y, Z]\npoint (list): Point to transform [X, Y, Z]\n \nReturns:\nTransformed point [X, Y, Z]\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"TwoD":{"slug":"TwoD","filePath":"TwoD.md","title":"TwoD","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"TwoD\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nMethods\nGetPerpendicularVector\nGets a vector that is perpendicular to a vector\ndef GetPerpendicularVector(vector):\n&quot;&quot;&quot;\nGets a vector that is perpendicular to a vector\n \nArgs:\nvector (list): Vector [X, Y]\n \nReturns:\nVector that is perpendicular [X, Y]\n \n&quot;&quot;&quot;\nNormalizeVector\nNormalizes a vector\ndef NormalizeVector(vector):\n&quot;&quot;&quot;\nNormalizes a vector\n \nArgs:\nvector (list): Vector [X, Y]\n \nReturns:\nNormalized vector [X, Y]\n \n&quot;&quot;&quot;\nRotatePoint\nRotates a point\ndef RotatePoint(point, angle):\n&quot;&quot;&quot;\nRotates a point\n \nArgs:\npoint (list): Point to rotate as [X, Y]\nangle (float): Angle to rotate in degrees\n \nReturns:\nRotated point as [RX, RY]\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"UnitTypes":{"slug":"UnitTypes","filePath":"UnitTypes.md","title":"UnitTypes","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"UnitTypes\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nSupported units\n\n⬆ Back to Top"},"Vertex":{"slug":"Vertex","filePath":"Vertex.md","title":"Vertex","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"Vertex\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nProperties\nName\nType: Object\r\nName of the vertex\nX\nType: Object\r\nX-coordinate of vertex\nY\nType: Object\r\nY-coordinate of vertex\nZ\nType: Object\r\nZ-coordinate of vertex\nMethods\nGetPart\nPart that the vertex is defined on\nObject GetPart()\nGetSelectionAssembly\nThe assembly that the edge was selected on\r\nOnly valid when a selection has been made\nObject GetSelectionAssembly()\n\n⬆ Back to Top"},"Windows":{"slug":"Windows","filePath":"Windows.md","title":"Windows","links":["Home","Classes","Methods-Index","Properties-Index","Members-Index","WindowsInputTypes","CSharp","Part","Assembly","GlobalParameters"],"tags":[],"content":"Windows\nHome | Classes | Methods | Properties | Members\n** Location:**Utilities &amp; System Windows\nNamespace: AlibreScript.API | Kind: Class\nThe Windows class provides functionality for managing Windows forms, dialogs, and user interface operations within the Alibre Design environment.\nRelated Classes\n\nWindowsInputTypes - Input type definitions\nCSharp - C# integration utilities\nPart, Assembly - Use Windows operations\nGlobalParameters - Windows for parameters\n\nQuick Navigation\n\nMethods - All available operations\nDialog Methods - File dialogs and user input\nForm Methods - Form management\nDisplay Methods - Window display operations\n\nMethods\nCloseForm\nClose all currently open forms for a specific session\ndef CloseForm(session_identifier):\n&quot;&quot;&quot;\nClose all currently open forms for a specific session\n \nArgs:\nsession_identifier (str): Identifier for session\n \n&quot;&quot;&quot;\nDisableInput\nDisables an input\ndef DisableInput(index):\n&quot;&quot;&quot;\nDisables an input\n \nArgs:\nindex (int): Index of the input\n \n&quot;&quot;&quot;\nEnableInput\nEnables an input\ndef EnableInput(index):\n&quot;&quot;&quot;\nEnables an input\n \nArgs:\nindex (int): Index of the input\n \n&quot;&quot;&quot;\nErrorDialog\nShows an error window\ndef ErrorDialog(message, title):\n&quot;&quot;&quot;\nShows an error window\n \nArgs:\nmessage (str): Error message\ntitle (str): Title of window\n \n&quot;&quot;&quot;\nGetDisplayedForm\nGets the currently displayed form for a specific session\ndef GetDisplayedForm(session_identifier):\n&quot;&quot;&quot;\nGets the currently displayed form for a specific session\n \nArgs:\nsession_identifier (str): Identifier of session\n \nReturns:\nDisplayed form or null for none\n \n&quot;&quot;&quot;\nGetInputValue\nGets the current value of an input\ndef GetInputValue(index):\n&quot;&quot;&quot;\nGets the current value of an input\n \nArgs:\nindex (int): Index of the input\n \nReturns:\nCurrent value\n \n&quot;&quot;&quot;\nInfoDialog\nShows an information window\ndef InfoDialog(message, title):\n&quot;&quot;&quot;\nShows an information window\n \nArgs:\nmessage (str): Message to show\ntitle (str): Title of window\n \n&quot;&quot;&quot;\nOpenFileDialog\nPrompts user to select a file\ndef OpenFileDialog(title, filter, default_extension):\n&quot;&quot;&quot;\nPrompts user to select a file\n \nArgs:\ntitle (str): Title of dialog window\nfilter (str): File filter, example filter: &#039;Part Files|*.AD_PRT&#039;\ndefault_extension (str): Default file extension, e.g. &#039;.AD_PRT&#039;\n \nReturns:\nPath and name of selected file or empty string if canceled\n \n&quot;&quot;&quot;\nOptionsDialog\nShows a dialog prompting the user to enter values\nOverload 1:\ndef OptionsDialog(title, inputs, input_area_width):\n&quot;&quot;&quot;\nShows a dialog prompting the user to enter values\n \nArgs:\ntitle (str): Title of dialog window\ninputs (list): List of input definitions [[Name, Type, DefaultValue], [...]]\ninput_area_width (int): Width of input area, optional\n \nReturns:\nList of entered values\n \n&quot;&quot;&quot;\nOverload 2:\ndef OptionsDialog(title, inputs, input_area_width, input_changed_callback, update_user_interface_callback):\n&quot;&quot;&quot;\nShows a dialog prompting the user to enter values\n \nArgs:\ntitle (str): Title of dialog window\ninputs (list): List of input definitions\\n [[Name, Type, DefaultValue, OptionalSettings], [...]]\\n Example: [&#039;Image&#039;, WindowsInputTypes.Image, &#039;Logo.png&#039;]\ninput_area_width (int): Width of input area\ninput_changed_callback (object): Function called when an input is changed\nupdate_user_interface_callback (object): Function called after dialog is created to update the state of the dialog\n \nReturns:\nList of entered values\n \n&quot;&quot;&quot;\nQuestionDialog\nShows a question window\ndef QuestionDialog(question, title):\n&quot;&quot;&quot;\nShows a question window\n \nArgs:\nquestion (str): Question to show\ntitle (str): Title of window\n \nReturns:\ntrue if &#039;yes&#039; was clicked, false if &#039;no&#039; was clicked\n \n&quot;&quot;&quot;\nSaveFileDialog\nPrompts user to save a file\ndef SaveFileDialog(title, filter, default_extension):\n&quot;&quot;&quot;\nPrompts user to save a file\n \nArgs:\ntitle (str): Title of dialog window\nfilter (str): File filter, example filter: &#039;Part Files|*.AD_PRT&#039;\ndefault_extension (str): Default file extension, e.g. &#039;.AD_PRT&#039;\n \nReturns:\nPath and name of selected file or empty string if canceled\n \n&quot;&quot;&quot;\nSelectFolderDialog\nPrompts the user to select a folder\ndef SelectFolderDialog(current_folder, description):\n&quot;&quot;&quot;\nPrompts the user to select a folder\n \nArgs:\ncurrent_folder (str): The current folder, if any\ndescription (str): Description of what is being chosen, shown to user\n \nReturns:\nPath of selected folder or empty if canceled\n \n&quot;&quot;&quot;\nSetInputValue\nSets the current value for an input\ndef SetInputValue(index, value):\n&quot;&quot;&quot;\nSets the current value for an input\n \nArgs:\nindex (int): Index of the input\nvalue (object): Value to show\n \n&quot;&quot;&quot;\nSetStringList\nUpdates the list of strings for a stringlist input\ndef SetStringList(index, strings):\n&quot;&quot;&quot;\nUpdates the list of strings for a stringlist input\n \nArgs:\nindex (int): Index of the stringlist input\nstrings (object): New list of strings to show\n \n&quot;&quot;&quot;\nUtilityDialog\nShows a dialog prompting the user to enter values\r\nThe dialog remains open until the user clicks on the close button\r\nA callback function is called to give the input values to the script\nOverload 1:\ndef UtilityDialog(title, action_button_text, action_button_callback, input_changed_callback, inputs, input_area_width):\n&quot;&quot;&quot;\nShows a dialog prompting the user to enter values The dialog remains open until the user clicks on the close button A callback function is called to give the input values to the script\n \nArgs:\ntitle (str): Title of dialog window\naction_button_text (str): Text for action button\naction_button_callback (object): Function called when the action button is clicked\ninput_changed_callback (object): Function called when an input is changed\ninputs (list): List of input definitions [[Name, Type, DefaultValue, OptionalSettings], [...]]\ninput_area_width (int): Width of dialog input area, optional\n \n&quot;&quot;&quot;\nOverload 2:\ndef UtilityDialog(title, action_button_text, action_button_callback, input_changed_callback, inputs, input_area_width, update_user_interface_callback):\n&quot;&quot;&quot;\nShows a dialog prompting the user to enter values The dialog remains open until the user clicks on the close button A callback function is called to give the input values to the script\n \nArgs:\ntitle (str): Title of dialog window\naction_button_text (str): Text for action button\naction_button_callback (object): Function called when the action button is clicked\ninput_changed_callback (object): Function called when an input is changed\ninputs (list): List of input definitions\\n [[Name, Type, DefaultValue, OptionalSettings], [...]]\\n Example: [&#039;Image&#039;, WindowsInputTypes.Image, &#039;Logo.png&#039;]\ninput_area_width (int): Width of dialog input area\nupdate_user_interface_callback (object): Function called after dialog is created to update the state of the dialog\n \n&quot;&quot;&quot;\n\n⬆ Back to Top"},"WindowsInputTypes":{"slug":"WindowsInputTypes","filePath":"WindowsInputTypes.md","title":"WindowsInputTypes","links":["Classes","README","Methods-Index","Properties-Index"],"tags":[],"content":"WindowsInputTypes\n Back to Classes | Documentation Home | Methods Index | Properties Index\n\nNamespace: AlibreScript.API\nKind: Class\n\nType of Windows input\n\n⬆ Back to Top"},"_Footer":{"slug":"_Footer","filePath":"_Footer.md","title":"_Footer","links":["Home","Classes","Methods-Index","Properties-Index","Members-Index"],"tags":[],"content":"Navigation: Home | Classes | Methods | Properties | Members\nGenerated on 2025-09-23 02:06"},"_Sidebar":{"slug":"_Sidebar","filePath":"_Sidebar.md","title":"_Sidebar","links":["Home","README","Classes","Methods-Index","Properties-Index","Members-Index","Namespaces","Interfaces"],"tags":[],"content":"Navigation\n\nHome - Documentation hub\nREADME - Project overview\nClasses - All classes by category\nMethods - Method reference\nProperties - Property reference\nMembers - Member index A-Z\nNamespaces - Namespace organization\nInterfaces - Interface definitions\n\nQuick Access\n\nAssembly &amp; Parts\nSketching\nGeometry\nConfiguration\n"},"index":{"slug":"index","filePath":"index.md","title":"AlibreScript API Documentation","links":["Home"],"tags":[],"content":"Transclude of Home"},"members-":{"slug":"members-","filePath":"members-#.md","title":"members-#","links":["Members-Index","README","Classes","Assembly","Bspline","Bspline3D","Circle","CircularArc","CircularArc3D","Ellipse","EllipticalArc","GlobalParameters","Line","Line3D","Part","Polyline","Polyline3D","PolylinePoint","PolylinePoint3D","SketchPoint","SketchPoint3D","Windows"],"tags":[],"content":"Members Index -\n Back to Members Index | Documentation Home | All Classes\n\nMethodAssembly in Assembly\nMethodAssembly in Assembly\nMethodAssembly in Assembly\nMethodAssembly in Assembly\nMethodAssembly in Assembly\nMethodBspline in Bspline\nMethodBspline3D in Bspline3D\nMethodCircle in Circle\nMethodCircularArc in CircularArc\nMethodCircularArc in CircularArc\nMethodCircularArc3D in CircularArc3D\nMethodCircularArc3D in CircularArc3D\nMethodEllipse in Ellipse\nMethodEllipticalArc in EllipticalArc\nMethodGlobalParameters in GlobalParameters\nMethodGlobalParameters in GlobalParameters\nMethodGlobalParameters in GlobalParameters\nMethodLine in Line\nMethodLine3D in Line3D\nMethodPart in Part\nMethodPart in Part\nMethodPart in Part\nMethodPart in Part\nMethodPart in Part\nMethodPart in Part\nMethodPart in Part\nMethodPolyline in Polyline\nMethodPolyline in Polyline\nMethodPolyline3D in Polyline3D\nMethodPolyline3D in Polyline3D\nMethodPolylinePoint in PolylinePoint\nMethodPolylinePoint in PolylinePoint\nMethodPolylinePoint3D in PolylinePoint3D\nMethodPolylinePoint3D in PolylinePoint3D\nMethodSketchPoint in SketchPoint\nMethodSketchPoint3D in SketchPoint3D\nMethodWindows in Windows\n\n\n⬆ Back to Top"},"members-a":{"slug":"members-a","filePath":"members-a.md","title":"members-a","links":["Home","Classes","Members-Index","Methods-Index","Properties-Index","members-z","members-b","Assembly","Sketch","Part","Configuration","Polyline","Sketch3D","GlobalParameters","AssembledPart","Polyline3D","CircularArc","CircularArc3D","Parameter"],"tags":[],"content":"Members Index - A\nHome | Classes | Members | Methods | Properties\n** Navigation:** Z | **B ** |  Members Index\nAll members starting with the letter “A”\nMethod Categories in “A”\nAssembly &amp; Constraint Methods\n\nAddAlignConstraint - Align components\nAddAngleConstraint - Angle constraints\nAddAxis - Add assembly axes\n\nSketching &amp; Drawing Methods\n\nAddArc - Add circular arcs to sketches\nAddBspline - Add B-spline curves\nAddCircle - Add circles to sketches\nAddConstraint - Apply sketch constraints\nAddDimension - Add dimensions to sketches\n\nPart Feature Methods\n\nAddChamfer - Add chamfer features\nAddChamferAngle - Add angled chamfers\n\nConfiguration Methods\n\nAddConfiguration - Add part configurations\nActivate - Activate configurations\n\nComplete List\n\nMethodActivate in Configuration\nMethodAdd3DSketch in Part\nMethodAddAlignConstraint in Assembly\nMethodAddAlignConstraint in Assembly\nMethodAddAlignConstraint2 in Assembly\nMethodAddAngleConstraint in Assembly\nMethodAddAngleConstraint in Assembly\nMethodAddAngleConstraint2 in Assembly\nMethodAddArc in Polyline\nMethodAddArc in Sketch\nMethodAddArc in Sketch3D\nMethodAddArcCenterStartAngle in Sketch\nMethodAddArcCenterStartEnd in Sketch\nMethodAddArcCenterStartEnd in Sketch3D\nMethodAddAxis in Assembly\nMethodAddAxis in Assembly\nMethodAddAxis in Part\nMethodAddAxis in Part\nMethodAddAxis in Part\nMethodAddAxis in Part\nMethodAddBspline in Sketch\nMethodAddBspline in Sketch\nMethodAddBspline in Sketch\nMethodAddBspline in Sketch3D\nMethodAddBspline in Sketch3D\nMethodAddChamfer in Part\nMethodAddChamfer in Part\nMethodAddChamfer in Part\nMethodAddChamfer in Part\nMethodAddChamferAngle in Part\nMethodAddChamferAngle in Part\nMethodAddCircle in Polyline\nMethodAddCircle in Sketch\nMethodAddCircle in Sketch\nMethodAddConfiguration in Assembly\nMethodAddConfiguration in Assembly\nMethodAddConfiguration in GlobalParameters\nMethodAddConfiguration in GlobalParameters\nMethodAddConfiguration in Part\nMethodAddConfiguration in Part\nMethodAddConstraint in Sketch\nMethodAddConstraint in Sketch\nMethodAddDimension in Sketch\nMethodAddDimension in Sketch\nMethodAddDimension in Sketch\nMethodAddEllipse in Sketch\nMethodAddEllipse in Sketch\nMethodAddEllipse in Sketch\nMethodAddEllipticalArc in Sketch\nMethodAddEllipticalArc in Sketch\nMethodAddExtrudeBoss in Part\nMethodAddExtrudeBoss in Part\nMethodAddExtrudeCut in Part\nMethodAddExtrudeCut in Part\nMethodAddFastenerConstraint in Assembly\nMethodAddFastenerConstraint2 in Assembly\nMethodAddFigure in Sketch\nMethodAddFillet in Part\nMethodAddFillet in Part\nMethodAddFillet in Part\nMethodAddGear in Part\nMethodAddGearConstraint in Assembly\nMethodAddGearDN in Part\nMethodAddGearDN in Part\nMethodAddGearDP in Part\nMethodAddGearDP in Part\nMethodAddGearNP in Part\nMethodAddGearNP in Part\nMethodAddLine in Sketch\nMethodAddLine in Sketch\nMethodAddLine in Sketch\nMethodAddLine in Sketch3D\nMethodAddLine in Sketch3D\nMethodAddLine in Sketch3D\nMethodAddLines in Sketch\nMethodAddLines in Sketch3D\nMethodAddLoftBoss in Part\nMethodAddLoftBoss in Part\nMethodAddLoftCut in Part\nMethodAddLoftCut in Part\nMethodAddMateConstraint in Assembly\nMethodAddMateConstraint in Assembly\nMethodAddMateConstraint2 in Assembly\nMethodAddNewPart in Assembly\nMethodAddNewSubAssembly in Assembly\nMethodAddOrientConstraint in Assembly\nMethodAddOrientConstraint in Assembly\nMethodAddParameter in Assembly\nMethodAddParameter in Assembly\nMethodAddParameter in GlobalParameters\nMethodAddParameter in GlobalParameters\nMethodAddParameter in Part\nMethodAddParameter in Part\nMethodAddParameter in Part\nMethodAddPart in Assembly\nMethodAddPart in Assembly\nMethodAddPart in Assembly\nMethodAddPart in Assembly\nMethodAddPart in Assembly\nMethodAddPart in Assembly\nMethodAddPart in Assembly\nMethodAddPart in Assembly\nMethodAddPart in Assembly\nMethodAddPlane in Assembly\nMethodAddPlane in Assembly\nMethodAddPlane in Assembly\nMethodAddPlane in Assembly\nMethodAddPlane in Part\nMethodAddPlane in Part\nMethodAddPlane in Part\nMethodAddPlane in Part\nMethodAddPlane in Part\nMethodAddPoint in AssembledPart\nMethodAddPoint in AssembledPart\nMethodAddPoint in AssembledPart\nMethodAddPoint in AssembledPart\nMethodAddPoint in AssembledPart\nMethodAddPoint in AssembledPart\nMethodAddPoint in AssembledPart\nMethodAddPoint in Assembly\nMethodAddPoint in Assembly\nMethodAddPoint in Assembly\nMethodAddPoint in Assembly\nMethodAddPoint in Assembly\nMethodAddPoint in Assembly\nMethodAddPoint in Assembly\nMethodAddPoint in Assembly\nMethodAddPoint in Part\nMethodAddPoint in Part\nMethodAddPoint in Part\nMethodAddPoint in Part\nMethodAddPoint in Part\nMethodAddPoint in Part\nMethodAddPoint in Part\nMethodAddPoint in Part\nMethodAddPoint in Part\nMethodAddPoint in Part\nMethodAddPoint in Polyline\nMethodAddPoint in Polyline3D\nMethodAddPoint in Sketch\nMethodAddPoint in Sketch\nMethodAddPoint in Sketch\nMethodAddPoint in Sketch3D\nMethodAddPoint in Sketch3D\nMethodAddPointFromCircularEdge in AssembledPart\nMethodAddPointFromCircularEdge in Assembly\nMethodAddPointFromCircularEdge in Part\nMethodAddPointFromToroidalFace in AssembledPart\nMethodAddPointFromToroidalFace in Assembly\nMethodAddPointFromToroidalFace in Part\nMethodAddPoints in Assembly\nMethodAddPoints in Part\nMethodAddPolygon in Sketch\nMethodAddPolyhole in Sketch\nMethodAddPolyline in Polyline\nMethodAddPolyline in Polyline3D\nMethodAddPolyline in Sketch\nMethodAddPolyline in Sketch3D\nMethodAddRackAndPinionConstraint in Assembly\nMethodAddRectangle in Sketch\nMethodAddRevolveBoss in Part\nMethodAddRevolveCut in Part\nMethodAddScrewConstraint in Assembly\nMethodAddSketch in Part\nMethodAddSubAssembly in Assembly\nMethodAddSubAssembly in Assembly\nMethodAddSubAssembly in Assembly\nMethodAddSubAssembly in Assembly\nMethodAddSubAssembly in Assembly\nMethodAddSubAssembly in Assembly\nMethodAddSubAssembly in Assembly\nMethodAddSubAssembly in Assembly\nMethodAddSubAssembly in Assembly\nMethodAddSweepBoss in Part\nMethodAddSweepCut in Part\nMethodAddTangentConstraint in Assembly\nMethodAddTangentConstraint in Assembly\nMethodAddVertexChamfer in Part\nMethodAddVertexChamfer in Part\nMethodAnchorPart in Assembly\nMethodAnchorPart in Assembly\nMethodAnchorSubAssembly in Assembly\nPropertyAngle in CircularArc\nPropertyAngle in CircularArc3D\nMethodAssemblyPointtoPartPoint in AssembledPart\nMethodAttachToExcel in Parameter\n\n\n⬆ Back to Top"},"members-c":{"slug":"members-c","filePath":"members-c.md","title":"members-c","links":["Home","Classes","Members-Index","Methods-Index","Properties-Index","members-a","members-d","Circle","Assembly","Polyline","CSharp","CircularArc","CircularArc3D","Ellipse","EllipticalArc","Polyline3D","GlobalParameters","Part","Windows","Parameter","AssembledPart","AssembledSubAssembly","Bspline","Bspline3D","Sketch"],"tags":[],"content":"Members Index - C\nHome | Classes | Members | Methods | Properties\n** Navigation:** A | **D ** |  Members Index\nAll members starting with the letter “C”\nKey Categories in “C”\nGeometry Properties\n\nCenter - Center points of geometric shapes\nCenterPoint - Center as sketch point objects\n\n💬 Documentation Properties\n\nComment - Object comments and descriptions\n\nObject Operations\n\nClone - Duplicate objects\nClose - Close files and objects\nCompile - Code compilation\n\nComplete List\n\nPropertyCenter in Circle\nPropertyCenter in CircularArc\nPropertyCenter in CircularArc3D\nPropertyCenter in Ellipse\nPropertyCenter in EllipticalArc\nPropertyCenterPoint in Circle\nPropertyCenterPoint in CircularArc\nPropertyCenterPoint in Ellipse\nPropertyCenterPoint in EllipticalArc\nMethodClone in Polyline\nMethodClone in Polyline\nMethodClone in Polyline3D\nMethodClone in Polyline3D\nMethodClose in Assembly\nMethodClose in GlobalParameters\nMethodClose in Part\nMethodCloseForm in Windows\nPropertyComment in Assembly\nPropertyComment in Parameter\nPropertyComment in Part\nMethodCompile in CSharp\nMethodCompileAndRun in CSharp\nMethodCompileAndRun in CSharp\nPropertyConfigurations in AssembledPart\nPropertyConfigurations in AssembledSubAssembly\nPropertyConfigurations in Assembly\nPropertyConfigurations in GlobalParameters\nPropertyConfigurations in Part\nPropertyControlPoints in Bspline\nPropertyControlPoints in Bspline3D\nMethodCopyFrom in Sketch\nMethodCopyFrom in Sketch\nPropertyCostCenter in Assembly\nPropertyCostCenter in Part\nPropertyCreatedBy in Assembly\nPropertyCreatedBy in Part\nPropertyCreatedDate in Assembly\nPropertyCreatedDate in Part\nMethodCreateUniqueName in Assembly\nPropertyCreatingApplication in Assembly\nPropertyCreatingApplication in Part\n\n\n⬆ Back to Top"},"members-d":{"slug":"members-d","filePath":"members-d.md","title":"members-d","links":["Home","Classes","Members-Index","Methods-Index","Properties-Index","members-c","members-e","Assembly","Edge","Windows","Face","Part"],"tags":[],"content":"Members Index - D\nHome | Classes | Members | Methods | Properties\n** Navigation:** C | **E ** |  Members Index\nAll members starting with the letter “D”\nKey Categories in “D”\nObject Properties\n\nDensity - Material density properties\nDescription - Object descriptions\nDocumentNumber - Document identification\nDiameter - Edge diameter properties\n\nDisplay &amp; UI Methods\n\nDisplayUnits - Unit display settings\nDisableInput - Input management\nDistanceTo - Distance measurements\n\nDuplication Methods\n\nDuplicatePart - Part duplication\nDuplicateSubAssembly - Sub-assembly duplication\n\nComplete List\n\nPropertyDensity in Assembly\nPropertyDensity in Part\nPropertyDescription in Assembly\nPropertyDescription in Part\nPropertyDiameter in Edge\nMethodDisableInput in Windows\nMethodDisplayUnits in Assembly\nMethodDisplayUnits in Part\nMethodDistanceTo in Face\nPropertyDocumentNumber in Assembly\nPropertyDocumentNumber in Part\nMethodDuplicatePart in Assembly\nMethodDuplicatePart in Assembly\nMethodDuplicatePart in Assembly\nMethodDuplicatePart in Assembly\nMethodDuplicateSubAssembly in Assembly\nMethodDuplicateSubAssembly in Assembly\nMethodDuplicateSubAssembly in Assembly\nMethodDuplicateSubAssembly in Assembly\n\n\n⬆ Back to Top"},"members-e":{"slug":"members-e","filePath":"members-e.md","title":"members-e","links":["Members-Index","README","Classes","Windows","CircularArc","EllipticalArc","Line","Line3D","CircularArc3D","Assembly","Part","Parameter","Sketch"],"tags":[],"content":"Members Index - E\n Back to Members Index | Documentation Home | All Classes\n\nMethodEnableInput in Windows\nPropertyEnd in CircularArc\nPropertyEnd in EllipticalArc\nPropertyEnd in Line\nPropertyEnd in Line3D\nPropertyEndPoint in CircularArc\nPropertyEndPoint in CircularArc3D\nPropertyEndPoint in EllipticalArc\nPropertyEndPoint in Line\nPropertyEndPoint in Line3D\nPropertyEngineeringApprovalDate in Assembly\nPropertyEngineeringApprovalDate in Part\nPropertyEngineeringApprovedBy in Assembly\nPropertyEngineeringApprovedBy in Part\nPropertyEquation in Parameter\nMethodErrorDialog in Windows\nPropertyEstimatedCost in Assembly\nPropertyEstimatedCost in Part\nPropertyExcelCell in Parameter\nPropertyExcelSheet in Parameter\nPropertyExcelWorkbook in Parameter\nMethodExportBIP in Assembly\nMethodExportBIP in Part\nMethodExportIGES in Assembly\nMethodExportIGES in Part\nMethodExportRotatedSTL in Part\nMethodExportSAT in Assembly\nMethodExportSAT in Part\nMethodExportSTEP203 in Assembly\nMethodExportSTEP203 in Part\nMethodExportSTEP214 in Assembly\nMethodExportSTEP214 in Part\nMethodExportSTL in Assembly\nMethodExportSTL in Part\nMethodExportSVG in Sketch\nMethodExportSVG in Sketch\nMethodExportSVG in Sketch\nPropertyExtendedMaterialInformation in Assembly\nPropertyExtendedMaterialInformation in Part\n\n\n⬆ Back to Top"},"members-f":{"slug":"members-f","filePath":"members-f.md","title":"members-f","links":["Members-Index","README","Classes","Sketch","Sketch3D","Assembly","Part","Polyline"],"tags":[],"content":"Members Index - F\n Back to Members Index | Documentation Home | All Classes\n\nPropertyFigures in Sketch\nPropertyFigures in Sketch3D\nPropertyFileName in Assembly\nPropertyFileName in Part\nMethodFindIntersection in Polyline\nMethodFindIntersection in Polyline\nMethodFindIntersectionWithCircle in Polyline\nMethodFromXml in Sketch\nMethodFromXml in Sketch3D\n\n\n⬆ Back to Top"},"members-g":{"slug":"members-g","filePath":"members-g.md","title":"members-g","links":["Home","Classes","Members-Index","Methods-Index","Properties-Index","members-f","members-h","Assembly","Face","Part","Point","AssembledPart","Windows","GlobalParameters","AssembledSubAssembly","Bspline","Bspline3D","IAxis","IPlane","IPoint","Axis","Edge","Plane","Sketch","Sketch3D","Vertex","ThreeD","TwoD"],"tags":[],"content":"Members Index - G\nHome | Classes | Members | Methods | Properties\n** Navigation:** F | **H ** |  Members Index\nAll members starting with the letter “G” - 86 items\nKey Categories in “G”\nConfiguration Methods\n\nGetActiveConfiguration - Get active configuration\nGetConfiguration - Retrieve specific configurations\n\nGeometry &amp; Measurement\n\nGetArea - Calculate face areas\nGetBoundingBox - Get object boundaries\nGetCoordinates - Point coordinate retrieval\n\nAssembly &amp; Part Methods\n\nGetAssembly - Assembly retrieval\nGetAxis - Axis element access\nGet3DSketch - 3D sketch retrieval\n\nSystem &amp; Utility Methods\n\nGetCustomProperty - Custom property access\nGetDisplayedForm - Window management\n\nComplete List\n\nMethodGet3DSketch in Part\nMethodGetActiveConfiguration in Assembly\nMethodGetActiveConfiguration in GlobalParameters\nMethodGetActiveConfiguration in Part\nMethodGetAdjoiningFaces in Face\nMethodGetArea in Face\nMethodGetAssembly in AssembledPart\nMethodGetAssemblyBoundingBox in AssembledPart\nMethodGetAssemblyVertices in AssembledPart\nMethodGetAxis in Assembly\nMethodGetAxis in Part\nMethodGetBoundingBox in Part\nMethodGetConfiguration in AssembledPart\nMethodGetConfiguration in AssembledSubAssembly\nMethodGetConfiguration in Assembly\nMethodGetConfiguration in GlobalParameters\nMethodGetConfiguration in Part\nMethodGetCoordinates in Point\nMethodGetCustomProperty in Assembly\nMethodGetCustomProperty in Part\nMethodGetDisplayedForm in Windows\nMethodGetEdge in AssembledPart\nMethodGetEdge in Part\nMethodGetEdges in AssembledPart\nMethodGetEdges in Face\nMethodGetEdges in Part\nMethodGetFace in AssembledPart\nMethodGetFace in Part\nMethodGetFaces in AssembledPart\nMethodGetFaces in Part\nMethodGetFeature in Part\nMethodGetInputValue in Windows\nMethodGetMappedOccurrence in AssembledPart\nMethodGetMappedOccurrence in AssembledSubAssembly\nMethodGetNormalAt in Bspline\nMethodGetNormalAt in Bspline3D\nMethodGetOccurrence in IAxis\nMethodGetOccurrence in IPlane\nMethodGetOccurrence in IPoint\nMethodGetParameter in Assembly\nMethodGetParameter in GlobalParameters\nMethodGetParameter in Part\nMethodGetPart in Assembly\nMethodGetPart in Axis\nMethodGetPart in Edge\nMethodGetPart in Face\nMethodGetPart in Plane\nMethodGetPart in Point\nMethodGetPart in Sketch\nMethodGetPart in Sketch3D\nMethodGetPart in Vertex\nMethodGetPartOrientation in Assembly\nMethodGetPartOrientation in Assembly\nMethodGetPerpendicularVector in ThreeD\nMethodGetPerpendicularVector in TwoD\nMethodGetPlane in Assembly\nMethodGetPlane in Part\nMethodGetPoint in Assembly\nMethodGetPoint in Part\nMethodGetPointAt in Bspline\nMethodGetPointAt in Bspline3D\nMethodGetSelectionAssembly in AssembledSubAssembly\nMethodGetSelectionAssembly in Axis\nMethodGetSelectionAssembly in Edge\nMethodGetSelectionAssembly in Face\nMethodGetSelectionAssembly in Part\nMethodGetSelectionAssembly in Plane\nMethodGetSelectionAssembly in Point\nMethodGetSelectionAssembly in Sketch\nMethodGetSelectionAssembly in Sketch3D\nMethodGetSelectionAssembly in Vertex\nMethodGetSketch in Part\nMethodGetSubAssembly in Assembly\nMethodGetSurface in Sketch\nMethodGetUserData in Assembly\nMethodGetUserData in Part\nMethodGetVertex in Part\nMethodGetVertices in Edge\nMethodGetVertices in Face\nMethodGetVertices in Part\nMethodGetX in Bspline\nMethodGetX in Bspline3D\nMethodGetY in Bspline\nMethodGetY in Bspline3D\nMethodGetZ in Bspline3D\nMethodGlobaltoPoint in Sketch\n\n\n⬆ Back to Top"},"members-h":{"slug":"members-h","filePath":"members-h.md","title":"members-h","links":["Members-Index","README","Classes","Axis","Plane","Point","Part","Assembly"],"tags":[],"content":"Members Index - H\n Back to Members Index | Documentation Home | All Classes\n\nMethodHide in Axis\nMethodHide in Plane\nMethodHide in Point\nMethodHideFeature in Part\nMethodHideFeature in Part\nMethodHidePart in Assembly\nMethodHidePart in Assembly\nMethodHideSubAssembly in Assembly\n\n\n⬆ Back to Top"},"members-i":{"slug":"members-i","filePath":"members-i.md","title":"members-i","links":["Members-Index","README","Classes","Sketch","Windows","Polyline","Polyline3D","Configuration","Part","Face","Plane","Bspline","Bspline3D","Circle","CircularArc","CircularArc3D","Ellipse","EllipticalArc","Line","Line3D","SketchPoint","SketchPoint3D"],"tags":[],"content":"Members Index - I\n Back to Members Index | Documentation Home | All Classes\n\nMethodImportSVG in Sketch\nMethodImportSVG in Sketch\nMethodInfoDialog in Windows\nMethodInsertPoint in Polyline\nMethodInsertPoint in Polyline3D\nPropertyIsActive in Configuration\nMethodIsOpen in Part\nMethodIsParallel in Face\nMethodIsParallel in Plane\nMethodIsPointOnLine in Polyline\nMethodIsPointOnLine in Polyline3D\nMethodIsRectangle in Face\nPropertyIsReference in Bspline\nPropertyIsReference in Bspline3D\nPropertyIsReference in Circle\nPropertyIsReference in CircularArc\nPropertyIsReference in CircularArc3D\nPropertyIsReference in Ellipse\nPropertyIsReference in EllipticalArc\nPropertyIsReference in Line\nPropertyIsReference in Line3D\nPropertyIsReference in SketchPoint\nPropertyIsReference in SketchPoint3D\n\n\n⬆ Back to Top"},"members-j":{"slug":"members-j","filePath":"members-j.md","title":"members-j","links":["Members-Index","README","Classes","Polyline","Polyline3D"],"tags":[],"content":"Members Index - J\n Back to Members Index | Documentation Home | All Classes\n\nMethodJoin in Polyline\nMethodJoin in Polyline3D\n\n\n⬆ Back to Top"},"members-k":{"slug":"members-k","filePath":"members-k.md","title":"members-k","links":["Members-Index","README","Classes","Assembly","Part","Bspline","Bspline3D"],"tags":[],"content":"Members Index - K\n Back to Members Index | Documentation Home | All Classes\n\nPropertyKeywords in Assembly\nPropertyKeywords in Part\nPropertyKnotVectors in Bspline\nPropertyKnotVectors in Bspline3D\n\n\n⬆ Back to Top"},"members-l":{"slug":"members-l","filePath":"members-l.md","title":"members-l","links":["Members-Index","README","Classes","Assembly","Part","Bspline","Bspline3D","Circle","Edge","Line","Line3D","Sketch","Sketch3D","Configuration"],"tags":[],"content":"Members Index - L\n Back to Members Index | Documentation Home | All Classes\n\nPropertyLastAuthor in Assembly\nPropertyLastAuthor in Part\nPropertyLastUpdateDate in Assembly\nPropertyLastUpdateDate in Part\nPropertyLength in Bspline\nPropertyLength in Bspline3D\nPropertyLength in Circle\nPropertyLength in Edge\nPropertyLength in Line\nPropertyLength in Line3D\nMethodLoadXml in Sketch\nMethodLoadXml in Sketch3D\nMethodLockAll in Configuration\n\n\n⬆ Back to Top"},"members-m":{"slug":"members-m","filePath":"members-m.md","title":"members-m","links":["Members-Index","README","Classes","Ellipse","EllipticalArc","Assembly","Part"],"tags":[],"content":"Members Index - M\n Back to Members Index | Documentation Home | All Classes\n\nPropertyMajorAxisAngle in Ellipse\nPropertyMajorAxisAngle in EllipticalArc\nPropertyManufacturingApprovedBy in Assembly\nPropertyManufacturingApprovedBy in Part\nPropertyManufacturingApprovedDate in Assembly\nPropertyManufacturingApprovedDate in Part\nPropertyMass in Part\nPropertyMaterial in Assembly\nPropertyMaterial in Part\nPropertyMinorMajorRatio in Ellipse\nPropertyMinorMajorRatio in EllipticalArc\nPropertyModifiedInformation in Assembly\nPropertyModifiedInformation in Part\nMethodMovePart in Assembly\nMethodMovePart in Assembly\nMethodMoveParts in Assembly\nMethodMoveSubAssemblies in Assembly\nMethodMoveSubAssembly in Assembly\nMethodMoveSubAssembly in Assembly\n\n\n⬆ Back to Top"},"members-n":{"slug":"members-n","filePath":"members-n.md","title":"members-n","links":["Members-Index","README","Classes","AssembledPart","AssembledSubAssembly","Assembly","Axis","Configuration","Edge","Face","Feature","GlobalParameters","Parameter","Part","Plane","Point","Sketch","Sketch3D","Vertex","TwoD"],"tags":[],"content":"Members Index - N\n Back to Members Index | Documentation Home | All Classes\n\nPropertyName in AssembledPart\nPropertyName in AssembledSubAssembly\nPropertyName in Assembly\nPropertyName in Axis\nPropertyName in Configuration\nPropertyName in Edge\nPropertyName in Face\nPropertyName in Feature\nPropertyName in GlobalParameters\nPropertyName in Parameter\nPropertyName in Part\nPropertyName in Plane\nPropertyName in Point\nPropertyName in Sketch\nPropertyName in Sketch3D\nPropertyName in Vertex\nMethodNonUniformScale in Part\nMethodNormalizeVector in TwoD\nPropertyNumber in Assembly\nPropertyNumber in Part\n\n\n⬆ Back to Top"},"members-o":{"slug":"members-o","filePath":"members-o.md","title":"members-o","links":["Members-Index","README","Classes","Polyline","Polyline3D","PolylinePoint","PolylinePoint3D","Windows","Bspline","Bspline3D","Assembly","Part","Sketch"],"tags":[],"content":"Members Index - O\n Back to Members Index | Documentation Home | All Classes\n\nMethodOffset in Polyline\nMethodOffset in Polyline3D\nMethodOffset in PolylinePoint\nMethodOffset in PolylinePoint3D\nMethodOpenFileDialog in Windows\nMethodOptionsDialog in Windows\nMethodOptionsDialog in Windows\nPropertyOrder in Bspline\nPropertyOrder in Bspline3D\nPropertyOrigin in Assembly\nPropertyOrigin in Part\nPropertyOrigin in Sketch\n\n\n⬆ Back to Top"},"members-p":{"slug":"members-p","filePath":"members-p.md","title":"members-p","links":["Members-Index","README","Classes","Assembly","GlobalParameters","Part","AssembledPart","IPoint","Sketch"],"tags":[],"content":"Members Index - P\n Back to Members Index | Documentation Home | All Classes\n\nPropertyParameters in Assembly\nPropertyParameters in GlobalParameters\nPropertyParameters in Part\nMethodPartPointtoAssemblyPoint in AssembledPart\nPropertyParts in Assembly\nMethodPauseUpdating in Assembly\nMethodPauseUpdating in Part\nMethodPointObject in IPoint\nMethodPointtoGlobal in Sketch\nPropertyProduct in Assembly\nPropertyProduct in Part\n\n\n⬆ Back to Top"},"members-q":{"slug":"members-q","filePath":"members-q.md","title":"members-q","links":["Members-Index","README","Classes","Windows"],"tags":[],"content":"Members Index - Q\n Back to Members Index | Documentation Home | All Classes\n\nMethodQuestionDialog in Windows\n\n\n⬆ Back to Top"},"members-r":{"slug":"members-r","filePath":"members-r.md","title":"members-r","links":["Home","Classes","Members-Index","Methods-Index","Properties-Index","members-q","members-s","Circle","Parameter","Assembly","Polyline","Part","CircularArc","CircularArc3D","Ellipse","EllipticalArc","Polyline3D","TwoD","PolylinePoint","CSharp"],"tags":[],"content":"Members Index - R\nHome | Classes | Members | Methods | Properties\n** Navigation:** Q | **S ** |  Members Index\nAll members starting with the letter “R” - 34 items\nKey Categories in “R”\nGeometry Properties\n\nRadius - Circular geometry radius values\n\nParameter &amp; Data Properties\n\nRawValue - Parameter raw values\nReceivedFrom - Source information\nRevision - Version information\n\nRegeneration Methods\n\nRegenerate - Rebuild objects\nResumeUpdating - Resume update operations\n\n🗑️ Removal Methods\n\nRemoveDuplicates - Clean duplicate points\nRemoveFeature - Delete features\nRemovePlane - Remove planes\nRemovePoint - Delete points\nRemoveSketch - Remove sketches\n\nComplete List\n\nPropertyRadius in Circle\nPropertyRadius in CircularArc\nPropertyRadius in CircularArc3D\nPropertyRadius in Ellipse\nPropertyRadius in EllipticalArc\nPropertyRawValue in Parameter\nPropertyReceivedFrom in Assembly\nPropertyReceivedFrom in Part\nMethodRegenerate in Assembly\nMethodRegenerate in Part\nMethodRemoveDuplicates in Polyline\nMethodRemoveDuplicates in Polyline3D\nMethodRemoveFeature in Part\nMethodRemoveFeature in Part\nMethodRemovePlane in Part\nMethodRemovePoint in Part\nMethodRemoveSketch in Part\nMethodRemoveSketch in Part\nMethodResumeUpdating in Assembly\nMethodResumeUpdating in Part\nPropertyRevision in Assembly\nPropertyRevision in Part\nMethodRotatePart in Assembly\nMethodRotatePart in Assembly\nMethodRotateParts in Assembly\nMethodRotatePoint in TwoD\nMethodRotateSubAssemblies in Assembly\nMethodRotateSubAssembly in Assembly\nMethodRotateSubAssembly in Assembly\nMethodRotateSubAssembly in Assembly\nMethodRotateZ in Polyline\nMethodRotateZ in PolylinePoint\nMethodRun in CSharp\nMethodRun in CSharp\n\n\n⬆ Back to Top"},"members-s":{"slug":"members-s","filePath":"members-s.md","title":"members-s","links":["Home","Classes","Members-Index","Methods-Index","Properties-Index","members-r","members-t","Assembly","Sketch","Part","Windows","GlobalParameters","Sketch3D","PolylinePoint","PolylinePoint3D","Feature","Configuration","Axis","Plane","Point","Polyline","Polyline3D","CircularArc","EllipticalArc","Line","Line3D","CircularArc3D","Bspline","Bspline3D"],"tags":[],"content":"Members Index - S\nHome | Classes | Members | Methods | Properties\n** Navigation:** R | **T ** |  Members Index\nAll members starting with the letter “S” - 71 items\nKey Categories in “S”\n💾 Save &amp; Export Methods\n\nSave - Save files\nSaveAs - Save with new name\nSaveAll - Save all files\nSaveSnapshot - Export images\nSaveThumbnail - Generate thumbnails\nSavetoXml - XML export\n\nTransformation Methods\n\nScale - Scale objects and geometry\nSelect - Object selection\n\n🪟 Dialog &amp; UI Methods\n\nSaveFileDialog - File save dialogs\n\nComplete List\n\nMethodSave in Assembly\nMethodSave in Assembly\nMethodSave in GlobalParameters\nMethodSave in GlobalParameters\nMethodSave in Part\nMethodSave in Part\nMethodSaveAll in Assembly\nMethodSaveAs in Assembly\nMethodSaveAs in GlobalParameters\nMethodSaveAs in Part\nMethodSaveFileDialog in Windows\nMethodSaveSnapshot in Assembly\nMethodSaveSnapshot in Part\nMethodSaveThumbnail in Assembly\nMethodSaveThumbnail in Part\nMethodSavetoXml in Sketch\nMethodSavetoXml in Sketch3D\nMethodScale in Part\nMethodScale in PolylinePoint\nMethodScale in PolylinePoint3D\nMethodSelect in Part\nMethodSelect in Part\nMethodSelectFolderDialog in Windows\nPropertySelections in Assembly\nPropertySelections in Part\nMethodSetColor in Feature\nMethodSetColor in Part\nMethodSetCustomProperty in Assembly\nMethodSetCustomProperty in Part\nMethodSetInputValue in Windows\nMethodSetLocks in Configuration\nMethodSetStringList in Windows\nMethodSetUserData in Assembly\nMethodSetUserData in Part\nMethodShow in Axis\nMethodShow in Plane\nMethodShow in Point\nMethodShowFeature in Part\nMethodShowFeature in Part\nMethodShowPart in Assembly\nMethodShowPart in Assembly\nMethodShowSubAssembly in Assembly\nMethodSplitAtPoint in Polyline\nMethodSplitAtPoint in Polyline3D\nPropertyStart in CircularArc\nPropertyStart in EllipticalArc\nPropertyStart in Line\nPropertyStart in Line3D\nMethodStartFaceMapping in Sketch\nMethodStartFaceMapping in Sketch\nMethodStartMapping in Sketch\nPropertyStartPoint in CircularArc\nPropertyStartPoint in CircularArc3D\nPropertyStartPoint in EllipticalArc\nPropertyStartPoint in Line\nPropertyStartPoint in Line3D\nPropertyStockSize in Assembly\nPropertyStockSize in Part\nMethodStopFaceMapping in Sketch\nMethodStopMapping in Sketch\nPropertySubAssemblies in Assembly\nMethodSubdivide in Bspline\nMethodSubdivide in Bspline3D\nMethodSubdivideGetNormals in Bspline3D\nPropertySupplier in Assembly\nPropertySupplier in Part\nMethodSuppressFeature in Part\nMethodSuppressFeature in Part\nMethodSuppressPart in Assembly\nMethodSuppressPart in Assembly\nMethodSuppressSubAssembly in Assembly\n\n\n⬆ Back to Top"},"members-t":{"slug":"members-t","filePath":"members-t.md","title":"members-t","links":["Members-Index","README","Classes","Assembly","Part","Sketch","Sketch3D","ThreeD","CircularArc","CircularArc3D","Parameter"],"tags":[],"content":"Members Index - T\n Back to Members Index | Documentation Home | All Classes\n\nPropertyTitle in Assembly\nPropertyTitle in Part\nMethodToXml in Sketch\nMethodToXml in Sketch3D\nMethodTransformPointUsingVectors in ThreeD\nPropertyType in CircularArc\nPropertyType in CircularArc3D\nPropertyType in Parameter\n\n\n⬆ Back to Top"},"members-u":{"slug":"members-u","filePath":"members-u.md","title":"members-u","links":["Members-Index","README","Classes","Assembly","Parameter","Configuration","Part","Windows"],"tags":[],"content":"Members Index - U\n Back to Members Index | Documentation Home | All Classes\n\nMethodUnanchorPart in Assembly\nMethodUnanchorPart in Assembly\nMethodUnanchorSubAssembly in Assembly\nPropertyUnits in Parameter\nMethodUnlockAll in Configuration\nMethodUnsuppressFeature in Part\nMethodUnsuppressFeature in Part\nMethodUnsuppressPart in Assembly\nMethodUnsuppressPart in Assembly\nMethodUnsuppressSubAssembly in Assembly\nMethodUtilityDialog in Windows\nMethodUtilityDialog in Windows\n\n\n⬆ Back to Top"},"members-v":{"slug":"members-v","filePath":"members-v.md","title":"members-v","links":["Members-Index","README","Classes","Parameter","Assembly","Part"],"tags":[],"content":"Members Index - V\n Back to Members Index | Documentation Home | All Classes\n\nPropertyValue in Parameter\nPropertyVendor in Assembly\nPropertyVendor in Part\n\n\n⬆ Back to Top"},"members-w":{"slug":"members-w","filePath":"members-w.md","title":"members-w","links":["Members-Index","README","Classes","Assembly","Part","Bspline","Bspline3D"],"tags":[],"content":"Members Index - W\n Back to Members Index | Documentation Home | All Classes\n\nPropertyWebLink in Assembly\nPropertyWebLink in Part\nPropertyWeights in Bspline\nPropertyWeights in Bspline3D\n\n\n⬆ Back to Top"},"members-x":{"slug":"members-x","filePath":"members-x.md","title":"members-x","links":["Members-Index","README","Classes","Point","SketchPoint","SketchPoint3D","Vertex","Assembly","Part"],"tags":[],"content":"Members Index - X\n Back to Members Index | Documentation Home | All Classes\n\nPropertyX in Point\nPropertyX in SketchPoint\nPropertyX in SketchPoint3D\nPropertyX in Vertex\nPropertyXAxis in Assembly\nPropertyXAxis in Part\nPropertyXYPlane in Assembly\nPropertyXYPlane in Part\n\n\n⬆ Back to Top"},"members-y":{"slug":"members-y","filePath":"members-y.md","title":"members-y","links":["Members-Index","README","Classes","Point","SketchPoint","SketchPoint3D","Vertex","Assembly","Part"],"tags":[],"content":"Members Index - Y\n Back to Members Index | Documentation Home | All Classes\n\nPropertyY in Point\nPropertyY in SketchPoint\nPropertyY in SketchPoint3D\nPropertyY in Vertex\nPropertyYAxis in Assembly\nPropertyYAxis in Part\nPropertyYZPlane in Assembly\nPropertyYZPlane in Part\n\n\n⬆ Back to Top"},"members-z":{"slug":"members-z","filePath":"members-z.md","title":"members-z","links":["Members-Index","README","Classes","Point","SketchPoint3D","Vertex","Assembly","Part"],"tags":[],"content":"Members Index - Z\n Back to Members Index | Documentation Home | All Classes\n\nPropertyZ in Point\nPropertyZ in SketchPoint3D\nPropertyZ in Vertex\nPropertyZAxis in Assembly\nPropertyZAxis in Part\nPropertyZXPlane in Assembly\nPropertyZXPlane in Part\n\n\n⬆ Back to Top"}}